[
  {
    "title": "微服务架构设计模式",
    "bookUrl": "https://book.douban.com/subject/33425123/",
    "authorInfo": "[美]　克里斯?理查森（Chris Richardson） / 喻勇　译 ",
    "pubInfo": " 机械工业出版社 / 2019-5 / 139元",
    "bookInfo": {
      "img": [
        "https://img1.doubanio.com/view/subject/l/public/s32303297.jpg",
        "https://img1.doubanio.com/view/subject/s/public/s32303297.jpg"
      ],
      "originalName": "",
      "averageRating": " 9.0 ",
      "ratersCount": "172",
      "ratings": [
        "65.7%",
        "29.1%",
        "5.2%",
        "0.0%",
        "0.0%"
      ],
      "bookIntro": "成功地开发基于微服务架构的应用软件，需要掌握一系列全新的架构思想和实践。在这本独特的书籍中，微服务架构的先驱、Java 开发者社区的意见领袖 Chris Richardson 收集、分类并解释了 44 个架构设计模式，这些模式用来解决诸如服务拆分、事务管理、查询和跨服务通信等难题。 本书将教会你如何开发和部署生产级别的微服务架构应用。这套宝贵的架构设计模式建立在数十年的分布式系统经验之上，Chris 还为开发服务添加了新的模式，并将它们组合成可在真实条件下可靠地扩展和执行的系统。本书不仅仅是一个模式目录，还提供了经验驱动的建议，以帮助你设计、实现、测试和部署基于微服务的应用程序。 本书包含： 如何（以及为什么）使用微服务架构 服务拆分的策略 事务管理和查询相关的模式 高效的测试策略 包括容器和 Serverless 在内的部署模式 本书专为熟悉标准企业应用程序架构的开发人员编写，使用 Java 编写所有示例代码。",
      "authorIntro": "克里斯·理查森（Chris Richardson） 世界著名的软件大师，《POJOS in Action》等技术名著的作者，也是著名开源项目 Cloud Foundry 和 Eventuate 的创始人。他的研究领域包括微服务架构设计、分布式数据管理、事件驱动的应用架构 、领域驱动设计、持续交付、Spring 框架、Scala、NoSQL 数据库等。 喻勇 在技术圈驰骋多年，曾担任过微软技术布道师，VMware Cloud Foundry 生态建设负责人，并有幸引领了国内容器技术的创业浪潮。目前定居加拿大，关注微服务架构、云原生应用等领域。 Chris 与喻勇曾在 VMware 全球开发者关系团队共事多年，现在他们合作为国内企业客户提供微服务相关的咨询和培训服务，他们的中文网站是：www.chrisrichardson.cn",
      "bookToc": "目　　录\n        写给中文版读者的话\n        译者序\n        中文版序一\n        中文版序二\n        前言\n        引言\n        第1章　逃离单体地狱   / 1\n        1.1　迈向单体地狱的漫长旅程   / 2\n        1.1.1　FTGO应用程序的架构   / 3\n        1.1.2　单体架构的好处   / 4\n        1.1.3　什么是单体地狱   / 4\n        1.2　为什么本书与你有关   / 7\n        1.3　你会在本书中学到什么   / 8\n        1.4　拯救之道：微服务架构   / 8\n        1.4.1　扩展立方体和服务   / 9\n        1.4.2　微服务架构作为模块化的一种形式   / 11\n        1.4.3　每个服务都拥有自己的数据库   / 12\n        1.4.4　FTGO的微服务架构   / 12\n        1.4.5　微服务架构与SOA的异同   / 14\n        1.5　微服务架构的好处和弊端   / 15\n        1.5.1　微服务架构的好处   / 15\n        1.5.2　微服务架构的弊端   / 17\n        1.6　微服务架构的模式语言   / 19\n        1.6.1　微服务架构并不是“银弹”   / 20\n        1.6.2　模式和模式语言   / 21\n        1.6.3　微服务架构的模式语言概述   / 24\n        1.7　微服务之上：流程和组织   / 29\n        1.7.1　进行软件开发和交付的组织   / 30\n        1.7.2　进行软件开发和交付的流程   / 31\n        1.7.3　采用微服务架构时的人为因素   / 32\n        第2章　服务的拆分策略   / 34\n        2.1　微服务架构到底是什么   / 35\n        2.1.1　软件架构是什么，为什么它如此重要   / 35\n        2.1.2　什么是架构的风格   / 37\n        2.1.3　微服务架构是一种架构风格   / 40\n        2.2　为应用程序定义微服务架构   / 43\n        2.2.1　识别系统操作   / 45\n        2.2.2　根据业务能力进行服务拆分   / 50\n        2.2.3　根据子域进行服务拆分   / 53\n        2.2.4　拆分的指导原则   / 54\n        2.2.5　拆分单体应用为服务的难点   / 56\n        2.2.6　定义服务API   / 59\n        第3章　微服务架构中的进程间通信   / 63\n        3.1　微服务架构中的进程间通信概述   / 64\n        3.1.1　交互方式   / 64\n        3.1.2　在微服务架构中定义API   / 66\n        3.1.3　API的演化   / 67\n        3.1.4　消息的格式   / 69\n        3.2　基于同步远程过程调用模式的通信   / 70\n        3.2.1　使用REST   / 71\n        3.2.2　使用gRPC   / 74\n        3.2.3　使用断路器模式处理局部故障   / 75\n        3.2.4　使用服务发现   / 78\n        3.3　基于异步消息模式的通信   / 82\n        3.3.1　什么是消息传递   / 83\n        3.3.2　使用消息机制实现交互方式   / 84\n        3.3.3　为基于消息机制的服务API创建API规范   / 86\n        3.3.4　使用消息代理   / 87\n        3.3.5　处理并发和消息顺序   / 91\n        3.3.6　处理重复消息   / 92\n        3.3.7　事务性消息   / 93\n        3.3.8　消息相关的类库和框架   / 97\n        3.4　使用异步消息提高可用性   / 99\n        3.4.1　同步消息会降低可用性   / 99\n        3.4.2　消除同步交互   / 101\n        第4章　使用Saga管理事务　   / 106\n        4.1　微服务架构下的事务管理   / 107\n        4.1.1　微服务架构对分布式事务的需求   / 108\n        4.1.2　分布式事务的挑战   / 109\n        4.1.3　使用Saga模式维护数据一致性   / 109\n        4.2　Saga的协调模式   / 113\n        4.2.1　协同式Saga   / 113\n        4.2.2　编排式Saga   / 117\n        4.3　解决隔离问题   / 121\n        4.3.1　缺乏隔离导致的问题   / 122\n        4.3.2　Saga模式下实现隔离的对策   / 123\n        4.4　Order Service和Create Order Saga的设计   / 127\n        4.4.1　OrderService类   / 128\n        4.4.2　Create Order Saga的实现   / 129\n        4.4.3　OrderCommandHandlers类   / 136\n        4.4.4　OrderServiceConfiguration类   / 138\n        第5章　微服务架构中的业务逻辑设计   / 141\n        5.1　业务逻辑组织模式   / 142\n        5.1.1　使用事务脚本模式设计业务逻辑   / 143\n        5.1.2　使用领域模型模式设计业务逻辑   / 144\n        5.1.3　关于领域驱动设计   / 146\n        5.2　使用聚合模式设计领域模型   / 146\n        5.2.1　模糊边界所带来的问题   / 147\n        5.2.2　聚合拥有明确的边界   / 149\n        5.2.3　聚合的规则   / 150\n        5.2.4　聚合的颗粒度   / 152\n        5.2.5　使用聚合设计业务逻辑   / 153\n        5.3　发布领域事件   / 154\n        5.3.1　为什么需要发布变更事件   / 154\n        5.3.2　什么是领域事件   / 155\n        5.3.3　事件增强   / 155\n        5.3.4　识别领域事件   / 156\n        5.3.5　生成和发布领域事件   / 157\n        5.3.6　消费领域事件   / 161\n        5.4　Kitchen Service的业务逻辑   / 162\n        5.5　Order Service的业务逻辑   / 167\n        5.5.1　Order聚合   / 169\n        5.5.2　 OrderService类   / 173\n        第6章　使用事件溯源开发业务逻辑   / 176\n        6.1　使用事件溯源开发业务逻辑概述   / 177\n        6.1.1　传统持久化技术的问题   / 177\n        6.1.2　什么是事件溯源   / 179\n        6.1.3　使用乐观锁处理并发更新   / 186\n        6.1.4　事件溯源和发布事件   / 186\n        6.1.5　使用快照提升性能   / 188\n        6.1.6　幂等方式的消息处理   / 189\n        6.1.7　领域事件的演化   / 190\n        6.1.8　事件溯源的好处   / 192\n        6.1.9　事件溯源的弊端   / 193\n        6.2　实现事件存储库   / 194\n        6.2.1　Eventuate Local事件存储库的工作原理   / 195\n        6.2.2　Eventuate的Java客户端框架   / 198\n        6.3　同时使用Saga和事件溯源   / 201\n        6.3.1　使用事件溯源实现协同式Saga   / 203\n        6.3.2　创建编排式Saga   / 203\n        6.3.3　实现基于事件溯源的Saga参与方   / 205\n        6.3.4　实现基于事件溯源的Saga编排器   / 208\n        第7章　在微服务架构中实现查询   / 212\n        7.1　使用API组合模式进行查询   / 213\n        7.1.1　findOrder()查询操作   / 213\n        7.1.2　什么是API组合模式   / 214\n        7.1.3　使用API组合模式实现findOrder()查询操作   / 215\n        7.1.4　API组合模式的设计缺陷   / 216\n        7.1.5　API组合模式的好处和弊端   / 219\n        7.2　使用CQRS模式   / 220\n        7.2.1　为什么要使用CQRS   / 220\n        7.2.2　什么是CQRS   / 223\n        7.2.3　CQRS的好处   / 226\n        7.2.4　CQRS的弊端   / 227\n        7.3　设计CQRS视图   / 228\n        7.3.1　选择视图存储库   / 229\n        7.3.2　设计数据访问模块   / 230\n        7.3.3　添加和更新CQRS视图   / 232\n        7.4　实现基于AWS DynamoDB的CQRS视图   / 233\n        7.4.1　OrderHistoryEventHandlers模块   / 234\n        7.4.2　DynamoDB中的数据建模和查询设计   / 235\n        7.4.3　OrderHistoryDaoDynamoDb类   / 239\n        第8章　外部API模式   / 244\n        8.1　外部API的设计难题   / 245\n        8.1.1　FTGO移动客户端API的设计难题   / 246\n        8.1.2　其他类型客户端API的设计难题   / 248\n        8.2　API Gateway模式   / 250\n        8.2.1　什么是API Gateway模式   / 250\n        8.2.2　API Gateway模式的好处和弊端   / 256\n        8.2.3　以Netflix为例的API Gateway   / 257\n        8.2.4　API Gateway的设计难题   / 258\n        8.3　实现一个API Gateway   / 260\n        8.3.1　使用现成的API Gateway产品或服务   / 261\n        8.3.2　开发自己的API Gateway   / 262\n        8.3.3　使用GraphQL实现API Gateway   / 269\n        第9章　微服务架构中的测试策略（上）   / 282\n        9.1　微服务架构中的测试策略概述   / 284\n        9.1.1　什么是测试   / 284\n        9.1.2　微服务架构中的测试挑战   / 289\n        9.1.3　部署流水线   / 295\n        9.2　为服务编写单元测试   / 296\n        9.2.1　为实体编写单元测试   / 298\n        9.2.2　为值对象编写单元测试   / 299\n        9.2.3　为Saga编写单元测试   / 300\n        9.2.4　为领域服务编写单元测试   / 302\n        9.2.5　为控制器编写单元测试   / 303\n        9.2.6　为事件和消息处理程序编写单元测试   / 305\n        第10章　微服务架构中的测试策略（下）   / 308\n        10.1　编写集成测试   / 308\n        10.1.1　针对持久化层的集成测试   / 311\n        10.1.2　针对基于REST的请求/响应式交互的集成测试   / 312\n        10.1.3　针对发布/订阅式交互的集成测试   / 316\n        10.1.4　针对异步请求/响应式交互的集成契约测试   / 320\n        10.2　编写组件测试   / 324\n        10.2.1　定义验收测试   / 325\n        10.2.2　使用Gherkin编写验收测试   / 326\n        10.2.3　设计组件测试   / 328\n        10.2.4　为FTGO的Order Service编写组件测试   / 330\n        10.3　端到端测试   / 334\n        10.3.1　设计端到端测试   / 335\n        10.3.2　编写端到端测试   / 335\n        10.3.3　运行端到端测试   / 336\n        第11章　开发面向生产环境的微服务应用   / 338\n        11.1　开发安全的服务   / 339\n        11.1.1　传统单体应用程序的安全性   / 340\n        11.1.2　在微服务架构中实现安全性   / 343\n        11.2　设计可配置的服务   / 349\n        11.2.1　使用基于推送的外部化配置   / 350\n        11.2.2　使用基于拉取的外部化配置   / 352\n        11.3　设计可观测的服务   / 353\n        11.3.1　使用健康检查API模式   / 355\n        11.3.2　使用日志聚合模式   / 357\n        11.3.3　使用分布式追踪模式   / 358\n        11.3.4　使用应用程序指标模式   / 361\n        11.3.5　使用异常追踪模式   / 364\n        11.3.6　使用审计日志模式   / 365\n        11.4　使用微服务基底模式开发服务   / 367\n        11.4.1　使用微服务基底   / 368\n        11.4.2　从微服务基底到服务网格   / 368\n        第12章　部署微服务应用   / 371\n        12.1　部署模式：编程语言特定的发布包格式   / 374\n        12.1.1　使用编程语言特定的发布包格式进行部署的好处   / 376\n        12.1.2　使用编程语言特定的发布包格式进行部署的弊端   / 377\n        12.2　部署模式：将服务部署为虚拟机   / 378\n        12.2.1　将服务部署为虚拟机的好处   / 380\n        12.2.2　将服务部署为虚拟机的弊端   / 380\n        12.3　部署模式：将服务部署为容器   / 381\n        12.3.1　使用Docker部署服务   / 383\n        12.3.2　将服务部署为容器的好处   / 385\n        12.3.3　将服务部署为容器的弊端   / 386\n        12.4　使用Kubernetes部署FTGO应用程序   / 386\n        12.4.1　什么是Kubernetes   / 386\n        12.4.2　在Kubernetes上部署Restaurant Service   / 389\n        12.4.3　部署API Gateway   / 392\n        12.4.4　零停机部署   / 393\n        12.4.5　使用服务网格分隔部署与发布流程   / 394\n        12.5　部署模式：Serverless部署   / 402\n        12.5.1　使用AWS Lambda进行Serverless部署   / 403\n        12.5.2　开发Lambda函数   / 404\n        12.5.3　调用Lambda函数   / 404\n        12.5.4　使用Lambda函数的好处   / 405\n        12.5.5　使用Lambda函数的弊端   / 406\n        12.6　使用AWS Lambda和AWS Gateway部署RESTful服务   / 406\n        12.6.1　AWS Lambda版本的Restaurant Service   / 407\n        12.6.2　把服务打包为ZIP文件   / 411\n        12.6.3　使用Serverless框架部署Lambda函数   / 412\n        第13章　微服务架构的重构策略   / 415\n        13.1　重构到微服务需要考虑的问题   / 416\n        13.1.1　为什么要重构单体应用   / 416\n        13.1.2　绞杀单体应用   / 417\n        13.2　将单体应用重构为微服务架构的若干策略   / 420\n        13.2.1　将新功能实现为服务   / 420\n        13.2.2　隔离表现层与后端   / 422\n        13.2.3　提取业务能力到服务中   / 423\n        13.3　设计服务与单体的协作方式   / 429\n        13.3.1　设计集成胶水   / 430\n        13.3.2　在服务和单体之间维持数据一致性   / 434\n        13.3.3　处理身份验证和访问授权   / 438\n        13.4　将新功能实现为服务：处理错误配送订单   / 440\n        13.4.1　Delayed Delivery Service的设计   / 441\n        13.4.2　为Delayed Delivery Service设计集成胶水   / 442\n        13.5　从单体中提取送餐管理功能   / 444\n        13.5.1　现有的送餐管理功能   / 444\n        13.5.2　Delivery Service概览   / 446\n        13.5.3　设计Delivery Service的领域模型   / 447\n        13.5.4　Delivery Service集成胶水的设计   / 450\n        13.5.5　修改FTGO单体使其能够与Delivery Service交互   / 451\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 55 条",
      "commentsList": [
        {
          "user": "Loading",
          "ratingScore": "力荐",
          "ratingTime": "2019-09-07",
          "thumbsUpCount": "3",
          "content": "指导性书籍，还需要自己积累代码库工具链"
        },
        {
          "user": "jianjie_ohyeah",
          "ratingScore": "推荐",
          "ratingTime": "2019-06-30",
          "thumbsUpCount": "2",
          "content": "SAGA 那章还是很不错的 ... \n结合了阿里的《中台》里所列出的事务场景，发现其实 SAGA 能统一 TCC & 事务消息的场景 ..."
        },
        {
          "user": "沉寂之舟",
          "ratingScore": "力荐",
          "ratingTime": "2019-06-10",
          "thumbsUpCount": "5",
          "content": "总体感觉就是我知道的大神都知道,我不知道的大神也知道.无论是学习微服务还是实施微服务,这本书都能达到解惑的目标.在学习spring cloud,kerbernete的时候,一直都有疑问,为什么要这么做,多种方式效果差不多,怎么选之类,读了这书,真的让我茅塞顿开--一切都是取舍.架构师的作用就是分清现实和目标,做好取舍.书里面不仅仅做比较,还根据具体的示例说明推荐的方案.收获超级多,短期内还需要结合代码复习一下."
        },
        {
          "user": "邻家的の柠檬叔",
          "ratingScore": "力荐",
          "ratingTime": "2019-09-03",
          "thumbsUpCount": "2",
          "content": "每个人都应该读一遍"
        },
        {
          "user": "潇潇鱼",
          "ratingScore": "力荐",
          "ratingTime": "2019-08-28",
          "thumbsUpCount": "3",
          "content": "从实际应用出发，对各种设计模式的对比和分析简明扼要，结合实际开发场景示例清晰，涉及接口设计、数据库设计、架构设计等各个方面，由浅入深，全而不杂，非常适合有一定微服务经验，但难于拔高的技术人员学习，全书无赘述，翻译者本身是资深的外企开发人员，对语言和技术的把握炉火纯青，堪称微服务领域难得一见的好书。"
        },
        {
          "user": "康康",
          "ratingScore": "力荐",
          "ratingTime": "2019-10-21",
          "thumbsUpCount": "1",
          "content": "对微服务从设计到实现、测试、集成都做了非常详细的描述，同时将微服务和领域驱动设计做了很好的结合，总体来说是微服务领域最为完整的一本书。"
        },
        {
          "user": "伪文人想摇滚",
          "ratingScore": "还行",
          "ratingTime": "2019-12-24",
          "thumbsUpCount": "1",
          "content": "从理论的角度来说 勉强算是科普.但是无关名词太多,读起来不畅快,部分章节没啥太多的实战参考价值.真有兴趣的,参照着看看左耳听风的极客时间专栏或许会更好些."
        },
        {
          "user": "皮卡丘你老实点",
          "ratingScore": "力荐",
          "ratingTime": "2019-08-08",
          "thumbsUpCount": "3",
          "content": "有很多值得反复思考的地方，而且本书最好的地方在于对于一种模式的评价既有优点又有缺点，讲解方式又符合思考过程，非常赞。"
        },
        {
          "user": "Joard Spike",
          "ratingScore": "力荐",
          "ratingTime": "2019-12-03",
          "thumbsUpCount": "0",
          "content": "大型传统企业IT的微服务架构劝退指北。写得很细，可作为参考资料和指引。\n从大型企业IT的角度推荐扩充阅读《架构即未来》以及《企业级业务架构设计》，至少目前更看好从EA的角度去梳理流程、拆分服务。"
        },
        {
          "user": "char",
          "ratingScore": "力荐",
          "ratingTime": "2020-02-29",
          "thumbsUpCount": "0",
          "content": "【英文版】"
        }
      ]
    }
  },
  {
    "title": "微服务设计",
    "bookUrl": "https://book.douban.com/subject/26772677/",
    "authorInfo": "[英] Sam Newman / 崔力强、张　骏 ",
    "pubInfo": " 人民邮电出版社 / 2016-5 / 69.00元",
    "bookInfo": {
      "img": [
        "https://img1.doubanio.com/view/subject/l/public/s28626997.jpg",
        "https://img1.doubanio.com/view/subject/s/public/s28626997.jpg"
      ],
      "originalName": "",
      "averageRating": " 8.2 ",
      "ratersCount": "702",
      "ratings": [
        "32.1%",
        "48.4%",
        "16.7%",
        "1.9%",
        "1.0%"
      ],
      "bookIntro": "作者简介： Sam Newman 是ThoughtWorks公司的技术专家、ThoughtWorks内部系统架构师，同时还为全球的客户提供咨询服务。他在开发和IT运维方面与全球多个领域的公司有过合作。 译者简介： 崔力强 阿里巴巴技术专家，目前专注于持续交付相关的产品开发。曾在ThoughtWorks任职多年，从事软件定制开发、敏捷软件开发的相关咨询等工作，帮助过数个团队和项目进行精益需求管理、软件设计、自动化测试和持续集成等实践。微信号：blade_1986 张骏 2010年加入ThoughtWorks公司。作为开发人员、项目经理、资深敏捷教练和资深咨询师，在金融、电信和能源服务行业的大型复杂业务系统的设计、开发、管理、咨询等方面有丰富的经验。曾为国内外诸多客户提供软件设计、开发以及咨询服务。拥有10年工作经验，在Scrum、看板、规模化敏捷等方法...(展开全部)",
      "authorIntro": "作者简介： Sam Newman 是ThoughtWorks公司的技术专家、ThoughtWorks内部系统架构师，同时还为全球的客户提供咨询服务。他在开发和IT运维方面与全球多个领域的公司有过合作。 译者简介： 崔力强 阿里巴巴技术专家，目前专注于持续交付相关的产品开发。曾在ThoughtWorks任职多年，从事软件定制开发、敏捷软件开发的相关咨询等工作，帮助过数个团队和项目进行精益需求管理、软件设计、自动化测试和持续集成等实践。微信号：blade_1986 张骏 2010年加入ThoughtWorks公司。作为开发人员、项目经理、资深敏捷教练和资深咨询师，在金融、电信和能源服务行业的大型复杂业务系统的设计、开发、管理、咨询等方面有丰富的经验。曾为国内外诸多客户提供软件设计、开发以及咨询服务。拥有10年工作经验，在Scrum、看板、规模化敏捷等方法论，以及精益需求管理、自动化测试、持续集成、领域驱动设计、微服务等具体实践方面都有丰富的积累。微信号：zhangjun695339",
      "bookToc": "前言　　xiv\n        第1章　微服务　　1\n        1.1　什么是微服务　　2\n        1.1.1　很小，专注于做好一件事　　2\n        1.1.2　自治性　　3\n        1.2　主要好处　　3\n        1.2.1　技术异构性　　3\n        1.2.2　弹性　　4\n        1.2.3　扩展　　5\n        1.2.4　简化部署　　5\n        1.2.5　与组织结构相匹配　　6\n        1.2.6　可组合性　　6\n        1.2.7　对可替代性的优化　　6\n        1.3　面向服务的架构　　7\n        1.4　其他分解技术　　7\n        1.4.1　共享库　　8\n        1.4.2　模块　　8\n        1.5　没有银弹　　9\n        1.6　小结　　10\n        第2章　演化式架构师　　11\n        2.1　不准确的比较　　11\n        2.2　架构师的演化视角　　12\n        2.3　分区　　14\n        2.4　一个原则性的方法　　15\n        2.4.1　战略目标　　15\n        2.4.2　原则　　15\n        2.4.3　实践　　16\n        2.4.4　将原则和实践相结合　　16\n        2.4.5　真实世界的例子　　16\n        2.5　要求的标准　　17\n        2.5.1　监控　　18\n        2.5.2　接口　　18\n        2.5.3　架构安全性　　18\n        2.6　代码治理　　18\n        2.6.1　范例　　19\n        2.6.2　裁剪服务代码模板　　19\n        2.7　技术债务　　20\n        2.8　例外管理　　21\n        2.9　集中治理和领导　　21\n        2.10　建设团队　　22\n        2.11　小结　　23\n        第3章　如何建模服务　　24\n        3.1　MusicCorp简介　　24\n        3.2　什么样的服务是好服务　　25\n        3.2.1　松耦合　　25\n        3.2.2　高内聚　　25\n        3.3　限界上下文　　26\n        3.3.1　共享的隐藏模型　　26\n        3.3.2　模块和服务　　27\n        3.3.3　过早划分　　28\n        3.4　业务功能　　28\n        3.5　逐步划分上下文　　29\n        3.6　关于业务概念的沟通　　30\n        3.7　技术边界　　30\n        3.8　小结　　31\n        第4章　集成　　32\n        4.1　寻找理想的集成技术　　32\n        4.1.1　避免破坏性修改　　32\n        4.1.2　保证API的技术无关性　　32\n        4.1.3　使你的服务易于消费方使用　　33\n        4.1.4　隐藏内部实现细节　　33\n        4.2　为用户创建接口　　33\n        4.3　共享数据库　　33\n        4.4　同步与异步　　35\n        4.5　编排与协同　　35\n        4.6　远程过程调用　　38\n        4.6.1　技术的耦合　　38\n        4.6.2　本地调用和远程调用并不相同　　39\n        4.6.3　脆弱性　　39\n        4.6.4　RPC很糟糕吗　　40\n        4.7　REST　　41\n        4.7.1　REST和HTTP　　41\n        4.7.2　超媒体作为程序状态的引擎　　42\n        4.7.3　JSON、XML还是其他　　44\n        4.7.4　留心过多的约定　　44\n        4.7.5　基于HTTP的REST的缺点　　45\n        4.8　实现基于事件的异步协作方式　　46\n        4.8.1　技术选择　　46\n        4.8.2　异步架构的复杂性　　47\n        4.9　服务即状态机　　48\n        4.10　响应式扩展　　48\n        4.11　微服务世界中的DRY和代码重用的危险　　49\n        4.12　按引用访问　　50\n        4.13　版本管理　　51\n        4.13.1　尽可能推迟　　51\n        4.13.2　及早发现破坏性修改　　52\n        4.13.3　使用语义化的版本管理　　53\n        4.13.4　不同的接口共存　　53\n        4.13.5　同时使用多个版本的服务　　54\n        4.14　用户界面　　55\n        4.14.1　走向数字化　　56\n        4.14.2　约束　　56\n        4.14.3　API组合　　57\n        4.14.4　UI片段的组合　　57\n        4.14.5　为前端服务的后端　　59\n        4.14.6　一种混合方式　　60\n        4.15　与第三方软件集成　　61\n        4.15.1　缺乏控制　　61\n        4.15.2　定制化　　62\n        4.15.3　意大利面式的集成　　62\n        4.15.4　在自己可控的平台进行定制化　　62\n        4.15.5　绞杀者模式　　64\n        4.16　小结　　65\n        第5章　分解单块系统　　66\n        5.1　关键是接缝　　66\n        5.2　分解MusicCorp　　67\n        5.3　分解单块系统的原因　　68\n        5.3.1　改变的速度　　68\n        5.3.2　团队结构　　68\n        5.3.3　安全　　68\n        5.3.4　技术　　68\n        5.4　杂乱的依赖　　69\n        5.5　数据库　　69\n        5.6　找到问题的关键　　69\n        5.7　例子：打破外键关系　　70\n        5.8　例子：共享静态数据　　71\n        5.9　例子：共享数据　　72\n        5.10　例子：共享表　　73\n        5.11　重构数据库　　74\n        5.12　事务边界　　75\n        5.12.1　再试一次　　76\n        5.12.2　终止整个操作　　77\n        5.12.3　分布式事务　　77\n        5.12.4　应该怎么办呢　　78\n        5.13　报告　　78\n        5.14　报告数据库　　78\n        5.15　通过服务调用来获取数据　　80\n        5.16　数据导出　　81\n        5.17　事件数据导出　　82\n        5.18　数据导出的备份　　83\n        5.19　走向实时　　84\n        5.20　修改的代价　　84\n        5.21　理解根本原因　　84\n        5.22　小结　　85\n        第6章　部署　　86\n        6.1　持续集成简介　　86\n        6.2　把持续集成映射到微服务　　87\n        6.3　构建流水线和持续交付　　90\n        6.4　平台特定的构建物　　91\n        6.5　操作系统构建物　　92\n        6.6　定制化镜像　　93\n        6.6.1　将镜像作为构建物　　94\n        6.6.2　不可变服务器　　95\n        6.7　环境　　95\n        6.8　服务配置　　96\n        6.9　服务与主机之间的映射　　97\n        6.9.1　单主机多服务　　97\n        6.9.2　应用程序容器　　99\n        6.9.3　每个主机一个服务　　100\n        6.9.4　平台即服务　　101\n        6.10　自动化　　101\n        6.11　从物理机到虚拟机　　102\n        6.11.1　传统的虚拟化技术　　103\n        6.11.2　Vagrant　　104\n        6.11.3　Linux容器　　104\n        6.11.4　Docker　　106\n        6.12　一个部署接口　　107\n        6.13　小结　　109\n        第7章　测试　　110\n        7.1　测试类型　　110\n        7.2　测试范围　　111\n        7.2.1　单元测试　　112\n        7.2.2　服务测试　　113\n        7.2.3　端到端测试　　114\n        7.2.4　权衡　　114\n        7.2.5　比例　　115\n        7.3　实现服务测试　　115\n        7.3.1　mock还是打桩　　115\n        7.3.2　智能的打桩服务　　116\n        7.4　微妙的端到端测试　　117\n        7.5　端到端测试的缺点　　118\n        7.6　脆弱的测试　　118\n        7.6.1　谁来写这些测试　　119\n        7.6.2　测试多长时间　　119\n        7.6.3　大量的堆积　　120\n        7.6.4　元版本　　120\n        7.7　测试场景，而不是故事　　121\n        7.8　拯救消费者驱动的测试　　121\n        7.8.1　Pact　　123\n        7.8.2　关于沟通　　124\n        7.9　还应该使用端到端测试吗　　124\n        7.10　部署后再测试　　125\n        7.10.1　区分部署和上线　　125\n        7.10.2　金丝雀发布　　126\n        7.10.3　平均修复时间胜过平均故障间隔时间　　127\n        7.11　跨功能的测试　　128\n        7.12　小结　　129\n        第8章　监控　　131\n        8.1　单一服务，单一服务器　　132\n        8.2　单一服务，多个服务器　　132\n        8.3　多个服务，多个服务器　　133\n        8.4　日志，日志，更多的日志　　134\n        8.5　多个服务的指标跟踪　　135\n        8.6　服务指标　　135\n        8.7　综合监控　　136\n        8.8　关联标识　　137\n        8.9　级联　　139\n        8.10　标准化　　139\n        8.11　考虑受众　　140\n        8.12　未来　　140\n        8.13　小结　　141\n        第9章　安全　　143\n        9.1　身份验证和授权　　143\n        9.1.1　常见的单点登录实现　　144\n        9.1.2　单点登录网关　　145\n        9.1.3　细粒度的授权　　146\n        9.2　服务间的身份验证和授权　　146\n        9.2.1　在边界内允许一切　　146\n        9.2.2　HTTP(S) 基本身份验证　　147\n        9.2.3　使用SAML或OpenID Connect　　148\n        9.2.4　客户端证书　　148\n        9.2.5　HTTP之上的HMAC　　149\n        9.2.6　API密钥　　149\n        9.2.7　代理问题　　150\n        9.3　静态数据的安全　　152\n        9.3.1　使用众所周知的加密算法　　152\n        9.3.2　一切皆与密钥相关　　153\n        9.3.3　选择你的目标　　153\n        9.3.4　按需解密　　153\n        9.3.5　加密备份　　153\n        9.4　深度防御　　154\n        9.4.1　防火墙　　154\n        9.4.2　日志　　154\n        9.4.3　入侵检测（和预防）系统　　154\n        9.4.4　网络隔离　　155\n        9.4.5　操作系统　　155\n        9.5　一个示例　　156\n        9.6　保持节俭　　158\n        9.7　人的因素　　158\n        9.8　黄金法则　　158\n        9.9　内建安全　　159\n        9.10　外部验证　　159\n        9.11　小结　　159\n        第10章　康威定律和系统设计　　161\n        10.1　证据　　161\n        10.1.1　松耦合组织和紧耦合组织　　162\n        10.1.2　Windows Vista　　162\n        10.2　Netflix和Amazon　　162\n        10.3　我们可以做什么　　163\n        10.4　适应沟通途径　　163\n        10.5　服务所有权　　164\n        10.6　共享服务的原因　　164\n        10.6.1　难以分割　　164\n        10.6.2　特性团队　　164\n        10.6.3　交付瓶颈　　165\n        10.7　内部开源　　166\n        10.7.1　守护者的角色　　166\n        10.7.2　成熟　　166\n        10.7.3　工具　　167\n        10.8　限界上下文和团队结构　　167\n        10.9　孤儿服务　　167\n        10.10　案例研究：RealEstate.com.au　　168\n        10.11　反向的康威定律　　169\n        10.12　人　　170\n        10.13　小结　　170\n        第11章　规模化微服务　　171\n        11.1　故障无处不在　　171\n        11.2　多少是太多　　172\n        11.3　功能降级　　173\n        11.4　架构性安全措施　　174\n        11.5　反脆弱的组织　　175\n        11.5.1　超时　　176\n        11.5.2　断路器　　176\n        11.5.3　舱壁　　178\n        11.5.4　隔离　　179\n        11.6　幂等　　179\n        11.7　扩展　　180\n        11.7.1　更强大的主机　　181\n        11.7.2　拆分负载　　181\n        11.7.3　分散风险　　181\n        11.7.4　负载均衡　　182\n        11.7.5　基于worker的系统　　184\n        11.7.6　重新设计　　184\n        11.8　扩展数据库　　185\n        11.8.1　服务的可用性和数据的持久性　　185\n        11.8.2　扩展读取　　185\n        11.8.3　扩展写操作　　186\n        11.8.4　共享数据库基础设施　　187\n        11.8.5　CQRS　　187\n        11.9　缓存　　188\n        11.9.1　客户端、 代理和服务器端缓存　　188\n        11.9.2　HTTP缓存　　189\n        11.9.3　为写使用缓存　　190\n        11.9.4　为弹性使用缓存　　190\n        11.9.5　隐藏源服务　　191\n        11.9.6　保持简单　　191\n        11.9.7　缓存中毒：一个警示　　192\n        11.10　自动伸缩　　192\n        11.11　CAP定理　　193\n        11.11.1　牺牲一致性　　194\n        11.11.2　牺牲可用性　　195\n        11.11.3　牺牲分区容忍性　　195\n        11.11.4　AP还是CP　　196\n        11.11.5　这不是全部或全不　　196\n        11.11.6　真实世界　　197\n        11.12　服务发现　　197\n        11.13　动态服务注册　　199\n        11.13.1　Zookeeper　　199\n        11.13.2　Consul　　200\n        11.13.4　构造你自己的系统　　201\n        11.13.5　别忘了人　　201\n        11.14　文档服务　　201\n        11.14.1　Swagger　　202\n        11.14.2　HAL 和HAL浏览器　　202\n        11.15　自描述系统　　203\n        11.16　小结　　203\n        第12章　总结　　204\n        12.1　微服务的原则　　204\n        12.1.1　围绕业务概念建模　　205\n        12.1.2　接受自动化文化　　205\n        12.1.3　隐藏内部实现细节　　205\n        12.1.4　让一切都去中心化　　206\n        12.1.5　可独立部署　　206\n        12.1.6　隔离失败　　206\n        12.1.7　高度可观察　　207\n        12.2　什么时候你不应该使用微服务　　207\n        12.3　临别赠言　　208\n        关于作者　　209\n        关于封面　　209\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 266 条",
      "commentsList": [
        {
          "user": "nothinger",
          "ratingScore": "力荐",
          "ratingTime": "2017-01-28",
          "thumbsUpCount": "12",
          "content": "以前对于这种近似于方法论的书，一贯都是看完目录就无法读下去。现在渐渐发现其实是因为工程经验和项目经验太少的原因，就好像屠龙之术在一般屠夫看来既不知所云也毫无意义一样。幸运的是，第一次尝试就遇到了这本书，打开了新的大门；否则我估计在未来几年内我还是会对这类书敬而远之。"
        },
        {
          "user": "贾里",
          "ratingScore": "推荐",
          "ratingTime": "2016-06-03",
          "thumbsUpCount": "5",
          "content": "理清了一些模糊的概念。但再次确认一个道理：没有银弹！"
        },
        {
          "user": "lunar",
          "ratingScore": "力荐",
          "ratingTime": "2016-06-16",
          "thumbsUpCount": "4",
          "content": "是我这几年读过的最好的一本软件架构书"
        },
        {
          "user": "garfield",
          "ratingScore": "力荐",
          "ratingTime": "2016-08-25",
          "thumbsUpCount": "2",
          "content": "看的时候4星，等自己开始实践改造旧工程的时候，重读的时候意识这本书的可贵了"
        },
        {
          "user": "isaachan",
          "ratingScore": "力荐",
          "ratingTime": "2017-03-12",
          "thumbsUpCount": "2",
          "content": "这才是技术书籍的典范，真正做的人来讲自己经历过的故事。"
        },
        {
          "user": "王中军",
          "ratingScore": "推荐",
          "ratingTime": "2017-08-18",
          "thumbsUpCount": "3",
          "content": "作者和译者都来自ThoughtWorks，值得信赖！除了系统化地论述了微服务的方方面面以外，书中推荐的技术博客、工具软件等对增强感性认识都很有帮助。对关于COTS的集成，作者提出的在自己可控的平台进行定制化的核心思想尤其值得牢记。"
        },
        {
          "user": "小海",
          "ratingScore": "还行",
          "ratingTime": "2017-06-07",
          "thumbsUpCount": "2",
          "content": "内容偏虚"
        },
        {
          "user": "放开那个西红柿",
          "ratingScore": "还行",
          "ratingTime": "2016-04-23",
          "thumbsUpCount": "0",
          "content": "还比较全面。"
        },
        {
          "user": "嘉陵",
          "ratingScore": "还行",
          "ratingTime": "2016-05-14",
          "thumbsUpCount": "2",
          "content": "微服务并不神秘，只是用了一个新词解释已经存在的事物。"
        },
        {
          "user": "透明",
          "ratingScore": "推荐",
          "ratingTime": "2017-04-23",
          "thumbsUpCount": "0",
          "content": "这一遍读得细 #微服务# #数字化#"
        }
      ]
    }
  },
  {
    "title": "生产微服务:在工程组织范围内构建标准化的系统",
    "bookUrl": "https://book.douban.com/subject/27127050/",
    "authorInfo": "【美】Susan J. Fowler（苏珊 J. 福勒） / 薛命灯 ",
    "pubInfo": " 电子工业出版社 / 2017-9 / 55.00",
    "bookInfo": {
      "img": [
        "https://img9.doubanio.com/view/subject/l/public/s29530715.jpg",
        "https://img9.doubanio.com/view/subject/s/public/s29530715.jpg"
      ],
      "originalName": "",
      "averageRating": " 7.9 ",
      "ratersCount": "56",
      "ratings": [
        "21.4%",
        "46.4%",
        "32.1%",
        "0.0%",
        "0.0%"
      ],
      "bookIntro": "近年来，微服务因其良好的伸缩性和灵活性备受各大巨头科技公司的青睐，微服务俨然已成为技术社区的一个热门词汇。作者Susan Fowler从她在Uber成功实施微服务的经验出发，结合其他各大公司工程师的意见和建议，制订了一组生产就绪微服务的标准。作者在《生产微服务》中不仅对这组标准的各项细节展开了深入的讨论，还提供了一个检查清单，用于帮助读者了解自己的微服务生态系统是否符合生产就绪标准。",
      "authorIntro": "Susan Fowler 是Uber 的网站可靠性工程师，她致力于在Uber 的所有微服务上推行生产就绪标准化，并参与到关键性业务团队中，帮助他们将微服务带向生产就绪状态。在加入Uber 之前，她在一些初创公司的应用平台和基础设施平台上工作。她之前在宾夕法尼亚大学学习粒子物理学，研究超对称性，并为ATLAS 和CMS 检测器设计硬件。 译者简介 薛命灯，毕业于厦门大学软件学院，具有十余年软件开发和架构经验。技术涉猎十分广泛，从前端到后端，从各种编程语言到分布式软件架构，从企业应用到大数据。在工作之余，爱好摄影和技术翻译，是 InfoQ的优秀社区编辑。",
      "bookToc": "前言.  xii\n        第 1章　微服务简介.  1\n        从单体应用到微服务  1\n        微服务架构  7\n        微服务生态系统 9\n        第 1层：硬件层 10\n        第 2层：通信层 11\n        第 3层：应用平台层  13\n        第 4层：微服务层  15\n        组织的挑战  16\n        反康威定律 17\n        技术蔓延  18\n        更多失效的可能性  18\n        资源竞争  19\n        第 2章　生产就绪 21\n        微服务标准化的挑战 21\n        可用性：标准化的目标 22\n        生产就绪标准  23\n        稳定性  24\n        可靠性  24\n        伸缩性  25\n        容错和灾备 26\n        高性能  28\n        监控 28\n        文档化  29\n        实现生产就绪标准  31\n        第 3章　稳定性和可靠性.  33\n        微服务稳定性和可靠性的原则 33\n        开发周期 34\n        部署管道 36\n        staging  36\n        canary 40\n        生产 41\n        让稳定可靠的部署成为强制措施  41\n        服务依赖 42\n        路由和服务发现  44\n        服务和端点的解除  44\n        评估你的微服务  45\n        开发周期  45\n        部署管道  46\n        服务依赖  46\n        路由和服务发现 46\n        服务和端点的解除  46\n        第 4章　伸缩性和高性能.  47\n        关于微服务伸缩性和高性能的原则  47\n        了解增长规模  48\n        质的增长规模  48\n        量的增长规模  50\n        资源的有效利用  50\n        资源感知 51\n        资源需求  51\n        资源瓶颈  51\n        容量规划 52\n        依赖项的伸缩  53\n        流量管理 54\n        任务处理 55\n        编程语言的限制 55\n        高效地处理请求任务  56\n        可伸缩的数据存储  56\n        微服务生态系统的数据库选择  57\n        微服务架构在数据库方面面临的挑战. 57\n        评估你的微服务  58\n        增长规模  58\n        资源的有效利用 58\n        资源感知  58\n        容量规划  59\n        依赖项的伸缩  59\n        流量管理  59\n        任务处理  59\n        可伸缩的数据存储  59\n        第 5章　容错和灾备 61\n        用于构建具有容错能力微服务的原则  61\n        避免单点故障  62\n        故障场景 63\n        常见的生态系统故障  64\n        硬件故障  65\n        通信层和应用平台层的故障  66\n        依赖项故障 68\n        内部故障  69\n        弹性测试 70\n        代码测试  71\n        负载测试  72\n        混沌测试  74\n        故障检测和修复  75\n        事故和中断 76\n        处理事故的 5个步骤  78\n        评估你的微服务  80\n        避免故障点 80\n        故障场景  80\n        弹性测试  80\n        故障检测和修复 81\n        第 6章　监控 83\n        用于微服务监控的原则. 83\n        关键性度量指标  84\n        日志  86\n        仪表盘  87\n        告警  88\n        设置有效的告警 89\n        处理告警  89\n        轮班待命 90\n        评估你的微服务  91\n        关键性度量指标 91\n        日志 91\n        仪表盘  91\n        告警 91\n        轮班待命  92\n        第 7章　文档化和理解.  93\n        微服务文档和理解的原则  93\n        微服务文档  95\n        描述  96\n        架构图  96\n        轮班待命信息  97\n        链接 97\n        开发上手指南  97\n        请求消息流、端点和依赖项  98\n        运行手册  98\n        问答章节  99\n        理解微服务  99\n        架构评审  100\n        生产就绪审计  101\n        生产就绪路线图  101\n        生产就绪自动化  102\n        评估你的微服务  102\n        微服务文档 103\n        微服务理解 103\n        附录A　生产就绪检查列表 105\n        附录B　评估你的微服务 107\n        术语表 113\n        索引. 119\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 31 条",
      "commentsList": [
        {
          "user": "Zoom.Quiet",
          "ratingScore": "推荐",
          "ratingTime": "2018-01-13",
          "thumbsUpCount": "1",
          "content": "是也乎 ╮(╯▽╰)╭\n\n作为实战团队的经验总结…\n123页中…70页是反复重复的内容…\n\n但字字血泪…每一条建议都包含上万工时…实在是大公司才玩的起的生态…"
        },
        {
          "user": "放开那个西红柿",
          "ratingScore": "推荐",
          "ratingTime": "2018-03-19",
          "thumbsUpCount": "0",
          "content": "书很薄，一开始以为又是口水书，最后发现是还是不错的，真正体验过来的人才会理解。特别是后面的附录，建议打印人手一份。哈哈。"
        },
        {
          "user": "Chain",
          "ratingScore": "推荐",
          "ratingTime": "2017-10-10",
          "thumbsUpCount": "0",
          "content": "recap"
        },
        {
          "user": "greatabel",
          "ratingScore": "推荐",
          "ratingTime": "2019-09-08",
          "thumbsUpCount": "0",
          "content": "初创公司在早起发展阶段，应用一般不太有太多功能需要被拆分为微服务，但是需要预研和技术准备，万一爆发了呢。这本书比《微服务设计》更接近实际一些，那本更偏理论，虽然都从具体实现抽离了。【摘录在Technology豆列】"
        },
        {
          "user": "Mayne Wong",
          "ratingScore": "力荐",
          "ratingTime": "2018-05-07",
          "thumbsUpCount": "0",
          "content": "上个月服务挂了几次，就想着把监控和容灾捡起来。这本小册子简直是 Todo list 大全，每章看着都能治百病。可惜人力有穷时，先从监控的开始整吧。"
        },
        {
          "user": "ò.⒏㈢ ㄧ°",
          "ratingScore": "还行",
          "ratingTime": "2020-03-26",
          "thumbsUpCount": "0",
          "content": "看附录就够了"
        },
        {
          "user": "顾白",
          "ratingScore": "还行",
          "ratingTime": "2018-05-21",
          "thumbsUpCount": "0",
          "content": "附录价值大，完全就是todo前思考索引"
        },
        {
          "user": "惟以不永怀",
          "ratingScore": "还行",
          "ratingTime": "2019-02-03",
          "thumbsUpCount": "0",
          "content": "有点逻嗦，重点看附录1和附录2即可，去年单位上了微服务架构，里面很多观点还是很有共鸣的"
        },
        {
          "user": "无心",
          "ratingScore": "力荐",
          "ratingTime": "2019-03-03",
          "thumbsUpCount": "0",
          "content": "如作者所言，书中所提及的很多原则可以被用于改进微服务之外的任何大小和任意架构的服务和应用。"
        },
        {
          "user": "逸水流觞",
          "ratingScore": "推荐",
          "ratingTime": "2019-09-26",
          "thumbsUpCount": "0",
          "content": "生产经验的总结；衡量自己服务是否是一个健康的微服务的标准，check list。"
        }
      ]
    }
  },
  {
    "title": "高可用可伸缩微服务架构:基于Dubbo、SpringCloud和ServiceMesh",
    "bookUrl": "https://book.douban.com/subject/33417842/",
    "authorInfo": "程超、梁桂钊、秦金卫、方志斌、张逸、杜琪、殷琦、肖冠宇 ",
    "pubInfo": " 电子工业出版社 / 2019-5-1 / 108.00",
    "bookInfo": {
      "img": [
        "https://img9.doubanio.com/view/subject/l/public/s32296926.jpg",
        "https://img9.doubanio.com/view/subject/s/public/s32296926.jpg"
      ],
      "originalName": "",
      "averageRating": " 7.2 ",
      "ratersCount": "51",
      "ratings": [
        "47.1%",
        "9.8%",
        "17.6%",
        "9.8%",
        "15.7%"
      ],
      "bookIntro": "",
      "authorIntro": "",
      "bookToc": "1.1 什么是架构 1\n        1.2 几个相关概念 3\n        1.3 从软件的生命周期看架构设计 7\n        1.4 架构的形式与特点 9\n        1.5 架构的目标与方法 13\n        1.6 架构的不同风格 18\n        第2章 微服务领域驱动设计 30\n        2.1 领域驱动设计 31\n        2.1.1 领域驱动设计概览 31\n        2.1.2 问题域与解决方案域 34\n        2.1.3 限界上下文 35\n        2.1.4 上下文映射 40\n        2.1.5 领域架构 43\n        2.2 微服务的设计 48\n        2.2.1 限界上下文的边界 48\n        2.2.2 限界上下文即微服务 51\n        2.2.3 识别限界上下文 53\n        2.2.4 微服务之间的协作 59\n        2.3 小结 63\n        第3章 Apache Dubbo框架的原理与实现 64\n        3.1 Dubbo框架的选型与使用 64\n        3.1.1 Dubbo框架的选型 64\n        3.1.2 Dubbo框架的使用 65\n        3.2 Dubbo框架的原理分析 70\n        3.2.1 总体架构分析 70\n        3.2.2 Dubbo Bean的加载 73\n        3.2.3 Dubbo Extension机制 77\n        3.2.4 Dubbo消费端 91\n        3.2.5 Dubbo服务端 126\n        3.2.6 Dubbo的通信机制 144\n        3.3 基于Dubbo的自动化Mock系统 165\n        3.3.1 Mock模拟系统的产生 166\n        3.3.2 Dubbo Mock的使用 167\n        3.3.3 Dubbo Mock的原理解析 168\n        3.3.4 自动化Mock系统的实现 170\n        第4章 Spring Boot/Spring Cloud实践 177\n        4.1 Spring Boot原理剖析 178\n        4.1.1 Spring Boot Quick Start 178\n        4.1.2 Spring Boot之SpringApplication 180\n        4.1.3 spring-boot-loaded模块分析 186\n        4.1.4 spring-boot-autoconfigure模块分析 190\n        4.1.5 Spring Boot Conditional注解分析 195\n        4.2 Dubbo Spring Boot Starter 198\n        4.2.1 Dubbo Spring Boot Starter简介 198\n        4.2.2 Dubbo Initializr及sample 198\n        4.2.3 dubbo-spring-boot-autoconfigure模块 201\n        4.2.4 dubbo-spring-boot-actuator模块 204\n        4.3 Spring Cloud栈 211\n        4.3.1 为什么微服务架构需要Spring Cloud 212\n        4.3.2 Spring Cloud技术栈总览 214\n        4.3.3 spring-cloud-scaffold基础库集合 215\n        4.4 基于Maven Archetype的脚手架 239\n        4.4.1 Maven Archetype 239\n        4.4.2 脚手架的搭建 240\n        4.4.3 生成脚手架 247\n        第5章 微服务稳定性保证的常用手段 250\n        5.1 微服务的稳定性 250\n        5.2 高可用 250\n        5.2.1 限流原理与实现 250\n        5.2.2 断路器原理与实现 256\n        5.2.3 超时与重试 260\n        5.3 高并发 262\n        5.3.1 异步 263\n        5.3.2 缓存 270\n        5.4 总结 272\n        第6章 微服务下如何保证事务的一致性 273\n        6.1 从本地事务到分布式事务的演变 273\n        6.2 强一致性解决方案 276\n        6.2.1 二阶段提交协议 276\n        6.2.2 三阶段提交协议 278\n        6.3 最终一致性解决方案 280\n        6.3.1 TCC模式 280\n        6.3.2 补偿模式 285\n        6.3.3 可靠事件模式 286\n        6.4 开源项目的分布式事务实现解读 288\n        6.4.1 Apache RocketMQ 288\n        6.4.2 ServiceComb 289\n        第7章 百亿流量微服务网关的设计与实现 293\n        7.1 API网关概述 293\n        7.1.1 分布式服务架构、微服务架构与 API 网关 293\n        7.1.2 API网关的定义、职能与关注点 296\n        7.1.3 API网关的分类与技术分析 298\n        7.2 开源网关的分析与调研 300\n        7.2.1 常见的开源网关介绍 300\n        7.2.2 四大开源网关的对比分析 308\n        7.2.3 开源网关的技术总结 309\n        7.3 百亿流量交易系统API网关设计 310\n        7.3.1 百亿流量交易系统API网关的现状和面临问题 310\n        7.3.2 业务网关的设计与最佳实践 313\n        第8章 微服务编排 317\n        8.1 Netflix Conductor 317\n        8.2 Netflix Conductor的架构 319\n        8.3 Conductor的使用案例 320\n        8.4 Netflix Conductor源码分析 328\n        8.4.1 Client层源码分析 330\n        8.4.2 Server端源码分析 337\n        8.4.3 core端源码分析 344\n        第9章 微服务数据抽取与统计 356\n        9.1 案例小故事 356\n        9.2 数据仓库概述 358\n        9.2.1 什么是数据仓库 358\n        9.2.2 数据仓库架构 360\n        9.2.3 数据仓库建模方法 361\n        9.2.4 数据抽取、转换和加载 361\n        9.2.5 数据统计 362\n        9.3 数据仓库工具Hive 362\n        9.3.1 安装Hive 364\n        9.3.2 Hive数据库 366\n        9.3.3 Hive表 367\n        9.4 使用Sqoop抽取数据 369\n        9.4.1 安装Sqoop 370\n        9.4.2 将MySQL表数据导入Hive表 372\n        9.5 ETL作业调度 375\n        第10章 微服务双活体系建设 377\n        10.1 系统高可用 377\n        10.2 双活数据中心 379\n        10.2.1 单机房部署 379\n        10.2.2 双机房部署 380\n        10.2.3 基于支付场景的双活体系建设 383\n        第11章 基于支付场景下的微服务改造与性能优化 399\n        11.1 支付场景的介绍 399\n        11.2 支付业务建模和服务划分 400\n        11.3 支付场景下微服务架构的详解与分析 402\n        11.3.1 业务架构分析 402\n        11.3.2 技术平台详解 404\n        11.4 从代码层面提升微服务架构的性能 407\n        11.4.1 从代码和设计的角度看 407\n        11.4.2 从整体架构的角度看 418\n        11.5 微服务架构中常见的一些故障分析技巧 421\n        第12章 遗留系统的微服务架构改造 426\n        12.1 代码分层结构的转变 426\n        12.2 遗留系统的债券与思考 430\n        12.3 从单体系统拆分服务的方法论 431\n        12.4 遗留系统的微服务架构改造 436\n        12.4.1 从代码重构开始 436\n        12.4.2 拆分服务需要面向服务进行架构设计 437\n        12.4.3 改造是一个渐进的过程 437\n        12.4.4 单元测试是基石 440\n        12.4.5 面向失败的设计 440\n        12.4.6 前后端分离 441\n        12.4.7 共享现有数据库 441\n        12.4.8 灰度发布的必要性 442\n        12.4.9 日志聚合与全链路监控 442\n        第13章 Service Mesh详解 443\n        13.1 Service Mesh是什么 443\n        13.2 Service Mesh的背景 443\n        13.3 Service Mesh介绍 444\n        13.3.1 Service Mesh架构 444\n        13.3.2 Service Mesh能做什么 445\n        13.4 Service Mesh的价值 446\n        13.5 Service Mesh现状 447\n        13.6 Service Mesh存在的问题 448\n        13.7 Istio详解 449\n        13.7.1 Istio架构 449\n        13.7.2 数据平面 450\n        13.7.3 控制平面 455\n        13.7.4 Isito案例 458\n        13.8 Service Mesh展望 461\n        第14章 微服务监控实战 463\n        14.1 APM原理与应用 464\n        14.1.1 什么是APM 464\n        14.1.2 APM监控点 464\n        14.1.3 APM深入解析 464\n        14.2 Prometheus监控系统介绍 492\n        14.2.1 Prometheus的主要特点 493\n        14.2.2 Prometheus的架构及组件介绍 493\n        14.2.3 Prometheus的安装 494\n        14.2.4 使用Prometheus对MySQL进行监控 498\n        14.2.5 Prometheus的告警机制 501\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 23 条",
      "commentsList": [
        {
          "user": "饭后甜点",
          "ratingScore": "很差",
          "ratingTime": "2019-08-19",
          "thumbsUpCount": "5",
          "content": "国内超过两个作者的都是烂书"
        },
        {
          "user": "jianjie_ohyeah",
          "ratingScore": "很差",
          "ratingTime": "2019-07-20",
          "thumbsUpCount": "8",
          "content": "本书是截图、代码的堆砌，毫无价值可言"
        },
        {
          "user": "阿杜",
          "ratingScore": "力荐",
          "ratingTime": "2019-05-19",
          "thumbsUpCount": "2",
          "content": "从J2EE的史前时代走过来的开发者，应该对当初的ESB、Spring、SOA等名称有很深的印象，随着技术的发展，微服务作为新兴的技术开始在互联网技术领域大展身手，本书讨论了微服务的起源、核心框架和很多关键问题的理论和最佳实践，最后还对Service Mesh这种近年来新兴的技术进行了分析和阐述。阅读这本书，你可以学习到一线开发者的经验和总结，一定能够有所收获。"
        },
        {
          "user": "罗刹剑客",
          "ratingScore": "较差",
          "ratingTime": "2019-07-26",
          "thumbsUpCount": "0",
          "content": "估计是作者太多的原因，内容太杂，各章质量参差不齐、而且互相独立，没有一条把内容串起来的主线。"
        },
        {
          "user": "杨嘉捷",
          "ratingScore": "较差",
          "ratingTime": "2020-02-19",
          "thumbsUpCount": "0",
          "content": "只想看第十二章，结果很失望"
        },
        {
          "user": "johnny-wong",
          "ratingScore": "还行",
          "ratingTime": "2020-02-08",
          "thumbsUpCount": "0",
          "content": "国人著，好几个作者，没有一个统一的主线，各个章节相互独立，没有连贯性，概念超多，代码片段超多"
        },
        {
          "user": "凛之魔法石",
          "ratingScore": "还行",
          "ratingTime": "2019-09-07",
          "thumbsUpCount": "0",
          "content": "#沐雨斋悦读#对一本书评价时，要看对其定位，这本作为入门书三星还是可以有的，方方面面都讲了点，也算全面。但你较真要比入门高点，那么截图代码凑页数、每章体例不一各自为政，这种感觉是KPI产物的书就确实不堪了。"
        },
        {
          "user": "布鲁斯@晁",
          "ratingScore": "力荐",
          "ratingTime": "2019-06-04",
          "thumbsUpCount": "0",
          "content": "1.微服务是当今互联网技术的主流技术。2.dubbo 和spring cloud 是现在最流行的微服务平台。3.本书是国内程序员的必读书目。4.读书过程中受益匪浅，学到了很多东西，谢谢本书作者的知识分享。——朝天王"
        },
        {
          "user": "itd",
          "ratingScore": "很差",
          "ratingTime": "2019-07-23",
          "thumbsUpCount": "1",
          "content": "可能我水平不够吧 我觉这本书真是非常之差 搞得我专门来评论 就是代码和死板概念的堆砌 而且代码和概念在书中的编排凌乱 非常失望 希望作者如果下次出书要用心点"
        },
        {
          "user": "王占华",
          "ratingScore": "较差",
          "ratingTime": "2019-08-12",
          "thumbsUpCount": "0",
          "content": "这本书只是大量代码的堆砌，好多东西一笔带过，不值得一看。所以，基本不值得购买。国内技术书籍透露着浮躁的气息。"
        }
      ]
    }
  },
  {
    "title": "Spring微服务实战",
    "bookUrl": "https://book.douban.com/subject/30233791/",
    "authorInfo": "[美]约翰·卡内尔（John Carnell） / 陈文辉 ",
    "pubInfo": " 人民邮电出版社 / 2018-6-1 / 79.00",
    "bookInfo": {
      "img": [
        "https://img1.doubanio.com/view/subject/l/public/s29779139.jpg",
        "https://img1.doubanio.com/view/subject/s/public/s29779139.jpg"
      ],
      "originalName": "",
      "averageRating": " 8.1 ",
      "ratersCount": "103",
      "ratings": [
        "38.8%",
        "42.7%",
        "16.5%",
        "1.9%",
        "0.0%"
      ],
      "bookIntro": "本书以一个名为EagleEye的项目为主线，介绍云、微服务等概念以及Spring Boot和Spring Cloud等诸多Spring项目，并介绍如何将EagleEye项目一步一步地从单体架构重构成微服务架构，进而将这个项目拆分成众多微服务，让它们运行在各自的Docker容器中，实现持续集成/持续部署，并最终自动部署到云环境（Amazon）中。针对在重构过程中遇到的各种微服务开发会面临的典型问题（包括开发、测试和运维等问题），本书介绍了解决这些问题的核心模式，以及在实战中如何选择特定Spring Cloud子项目或其他工具解决这些问题。 本书适合拥有构建分布式应用程序的经验、拥有Spring的知识背景以及对学习构建基于微服务的应用程序感兴趣的Java开发人员阅读。对于希望使用微服务构建基于云的应用程序，以及希望了解如何将基于微服务的应用部署到云上的开发人员，本书也具有很好的学习参考价值。",
      "authorIntro": "约翰·卡内尔（John Carnell）是一位知名云工程师，拥有20 年的Java 开发经验。他大部分时间都在使用AWS 平台构建基于电话的微服务。他的日常工作主要是设计和构建跨Java、Clojure 和Go 等多种技术平台的微服务。",
      "bookToc": "目录\n        第　1章 欢迎迈入云世界，Spring　1\n        1.1　什么是微服务　1\n        1.2　什么是Spring，为什么它与微服务有关　4\n        1.3　在本书中读者会学到什么　5\n        1.4　为什么本书与你有关　6\n        1.5　使用Spring Boot来构建微服务　6\n        1.6　为什么要改变构建应用的方式　10\n        1.7　云到底是什么　11\n        1.8　为什么是云和微服务　13\n        1.9　微服务不只是编写代码　14\n        1.9.1　核心微服务开发模式　15\n        1.9.2　微服务路由模式　16\n        1.9.3　微服务客户端弹性模式　17\n        1.9.4　微服务安全模式　18\n        1.9.5　微服务日志记录和跟踪模式　19\n        1.9.6　微服务构建和部署模式　20\n        1.10　使用Spring Cloud构建微服务　22\n        1.10.1　Spring Boot　23\n        1.10.2　Spring Cloud Config　23\n        1.10.3　Spring Cloud服务发现　24\n        1.10.4　Spring Cloud与Netflix Hystrix和Netflix Ribbon　24\n        1.10.5　Spring Cloud与Netflix Zuul　24\n        1.10.6　Spring Cloud Stream　24\n        1.10.7　Spring Cloud Sleuth　24\n        1.10.8　Spring Cloud Security　25\n        1.10.9　代码供应　25\n        1.11　通过示例来介绍Spring Cloud　25\n        1.12　确保本书的示例是有意义的　27\n        1.13　小结　28\n        第　2章 使用Spring Boot构建微服务　29\n        2.1　架构师的故事：设计微服务架构　31\n        2.1.1　分解业务问题　31\n        2.1.2　建立服务粒度　32\n        2.1.3　互相交流：定义服务接口　35\n        2.2　何时不应该使用微服务　36\n        2.2.1　构建分布式系统的复杂性　36\n        2.2.2　服务器散乱　36\n        2.2.3　应用程序的类型　36\n        2.2.4　数据事务和一致性　37\n        2.3　开发人员的故事：用SpringBoot和Java构建微服务　37\n        2.3.1　从骨架项目开始　37\n        2.3.2　引导Spring Boot应用程序：编写引导类　39\n        2.3.3　构建微服务的入口：Spring Boot控制器　40\n        2.4　DevOps工程师的故事：构建运行时的严谨性　44\n        2.4.1　服务装配：打包和部署微服务　46\n        2.4.2　服务引导：管理微服务的配置　47\n        2.4.3　服务注册和发现：客户端如何与微服务通信　48\n        2.4.4　传达微服务的“健康状况”　49\n        2.5　将视角综合起来　51\n        2.6　小结　52\n        第3章　使用Spring Cloud配置服务器控制配置　53\n        3.1　管理配置（和复杂性）　54\n        3.1.1　配置管理架构　55\n        3.1.2　实施选择　56\n        3.2　构建Spring Cloud配置服务器　58\n        3.2.1　创建Spring Cloud Config引导类　61\n        3.2.2　使用带有文件系统的Spring Cloud配置服务器　62\n        3.3　将Spring Cloud Config与Spring Boot客户端集成　64\n        3.3.1　建立许可证服务对Spring Cloud Config服务器的依赖　65\n        3.3.2　配置许可证服务以使用Spring Cloud Config　66\n        3.3.3　使用Spring Cloud配置服务器连接数据源　69\n        3.3.4　使用@Value注解直接读取属性　72\n        3.3.5　使用Spring Cloud配置服务器和Git　73\n        3.3.6　使用Spring Cloud配置服务器刷新属性　73\n        3.4　保护敏感的配置信息　75\n        3.4.1　下载并安装加密所需的Oracle JCE jar　75\n        3.4.2　创建加密密钥　76\n        3.4.3　加密和解密属性　76\n        3.4.4　配置微服务以在客户端使用加密　78\n        3.5　最后的想法　79\n        3.6　小结　80\n        第4章　服务发现　81\n        4.1　我的服务在哪里　82\n        4.2　云中的服务发现　84\n        4.2.1　服务发现架构　84\n        4.2.2　使用Spring和Netflix Eureka进行服务发现实战　87\n        4.3　构建Spring Eureka服务　88\n        4.4　通过Spring Eureka注册服务　90\n        4.5　使用服务发现来查找服务　93\n        4.5.1　使用Spring DiscoveryClient查找服务实例　95\n        4.5.2　使用带有Ribbon功能的Spring RestTemplate调用服务　97\n        4.5.3　使用Netflix Feign客户端调用服务　98\n        4.6　小结　100\n        第5章　使用Spring Cloud和NetflixHystrix的客户端弹性模式　101\n        5.1　什么是客户端弹性模式　102\n        5.1.1　客户端负载均衡模式　103\n        5.1.2　断路器模式　103\n        5.1.3　后备模式　103\n        5.1.4　舱壁模式　104\n        5.2　为什么客户端弹性很重要　104\n        5.3　进入Hystrix　107\n        5.4　搭建许可服务器以使用Spring Cloud和Hystrix　107\n        5.5　使用Hystrix实现断路器　109\n        5.5.1　对组织微服务的调用超时　111\n        5.5.2　定制断路器的超时时间　112\n        5.6　后备处理　113\n        5.7　实现舱壁模式　115\n        5.8　基础进阶—微调Hystrix　118\n        5.9　线程上下文和Hystrix　122\n        5.9.1　ThreadLocal与Hystrix　122\n        5.9.2　HystrixConcurrencyStrategy实战　125\n        5.10　小结　129\n        第6章　使用Spring Cloud和Zuul进行服务路由　131\n        6.1　什么是服务网关　132\n        6.2　Spring Cloud和Netflix Zuul简介　133\n        6.2.1　建立一个Zuul Spring Boot项目　134\n        6.2.2　为Zuul服务使用Spring Cloud注解　134\n        6.2.3　配置Zuul与Eureka进行通信　135\n        6.3　在Zuul中配置路由　135\n        6.3.1　通过服务发现自动映射路由　136\n        6.3.2　使用服务发现手动映射路由　137\n        6.3.3　使用静态URL手动映射路由　140\n        6.3.4　动态重新加载路由配置　142\n        6.3.5　Zuul和服务超时　143\n        6.4　Zuul的真正威力：过滤器　144\n        6.5　构建第 一个生成关联ID的Zuul前置过滤器　147\n        6.6　构建接收关联ID的后置过滤器　155\n        6.7　构建动态路由过滤器　157\n        6.7.1　构建路由过滤器的骨架　159\n        6.7.2　实现run()方法　159\n        6.7.3　转发路由　161\n        6.7.4　整合　162\n        6.8　小结　163\n        第7章　保护微服务　164\n        7.1　OAuth2简介　165\n        7.2　从小事做起：使用Spring和OAuth2来保护单个端点　167\n        7.2.1　建立EagleEye OAuth2验证服务　167\n        7.2.2　使用OAuth2服务注册客户端应用程序　168\n        7.2.3　配置EagleEye用户　171\n        7.2.4　验证用户　172\n        7.3　使用OAuth2保护组织服务　175\n        7.3.1　将Spring Security和OAuth2 jar添加到各个服务　176\n        7.3.2　配置服务以指向OAuth2验证服务　176\n        7.3.3　定义谁可以访问服务　177\n        7.3.4　传播OAuth2访问令牌　180\n        7.4　JSON Web Token与OAuth2　183\n        7.4.1　修改验证服务以颁发JWT令牌　184\n        7.4.2　在微服务中使用JWT　188\n        7.4.3　扩展JWT令牌　189\n        7.4.4　从JWT令牌中解析自定义字段　191\n        7.5　关于微服务安全的总结　193\n        7.6　小结　195\n        第8章　使用Spring Cloud Stream的事件驱动架构　196\n        8.1　为什么使用消息传递、EDA和微服务　197\n        8.1.1　使用同步请求-响应方式来传达状态变化　198\n        8.1.2　使用消息传递在服务之间传达状态更改　199\n        8.1.3　消息传递架构的缺点　201\n        8.2　Spring Cloud Stream简介　202\n        8.3　编写简单的消息生产者和消费者　205\n        8.3.1　在组织服务中编写消息生产者　205\n        8.3.2　在许可证服务中编写消息消费者　210\n        8.3.3　在实际操作中查看消息服务　213\n        8.4　Spring Cloud Stream用例：分布式缓存　214\n        8.4.1　使用Redis来缓存查找　215\n        8.4.2　定义自定义通道　221\n        8.4.3　将其全部汇集在一起：在收到消息时清除缓存　222\n        8.5　小结　223\n        第9章　使用Spring Cloud Sleuth和Zipkin进行分布式跟踪　224\n        9.1　Spring Cloud Sleuth与关联ID　225\n        9.1.1　将Spring Cloud Sleuth添加到许可证服务和组织服务中　226\n        9.1.2　剖析Spring Cloud Sleuth跟踪　226\n        9.2　日志聚合与Spring Cloud Sleuth　227\n        9.2.1　Spring Cloud Sleuth与Papertrail实现实战　229\n        9.2.2　创建Papertrail账户并配置syslog连接器　230\n        9.2.3　将Docker输出重定向到Papertrail　232\n        9.2.4　在Papertrail中搜索Spring Cloud Sleuth的跟踪ID　234\n        9.2.5　使用Zuul将关联ID添加到HTTP响应　235\n        9.3　使用Open Zipkin进行分布式跟踪　237\n        9.3.1　添加Spring Cloud Sleuth和Zipkin依赖项　238\n        9.3.2　配置服务以指向Zipkin　238\n        9.3.3　安装和配置Zipkin服务器　239\n        9.3.4　设置跟踪级别　240\n        9.3.5　使用Zipkin跟踪事务　241\n        9.3.6　可视化更复杂的事务　243\n        9.3.7　捕获消息传递跟踪　244\n        9.3.8　添加自定义跨度　246\n        9.4　小结　248\n        第　10章 部署微服务　250\n        10.1　EagleEye：在云中建立核心基础设施　251\n        10.1.1　使用亚马逊的RDS创建PostgreSQL数据库　253\n        10.1.2　在AWS中创建Redis集群　257\n        10.1.3　创建ECS集群　258\n        10.2　超越基础设施：部署EagleEye　262\n        10.3　构建和部署管道的架构　265\n        10.4　构建和部署管道实战　268\n        10.5　开始构建和部署管道：GitHub和Travis CI　270\n        10.6　使服务能够在Travis CI中构建　270\n        10.6.1　构建的核心运行时配置　273\n        10.6.2　安装预构建工具　275\n        10.6.3　执行构建　277\n        10.6.4　标记源代码　277\n        10.6.5　构建微服务并创建Docker镜像　279\n        10.6.6　将镜像推送到Docker Hub　279\n        10.6.7　在Amazon ECS中启动服务　280\n        10.6.8　启动平台测试　280\n        10.7　关于构建和部署管道的总结　282\n        10.8　小结　282\n        附录A　在桌面运行云服务　283\n        附录B　OAuth2授权类型　291\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 40 条",
      "commentsList": [
        {
          "user": "小兵传奇",
          "ratingScore": "推荐",
          "ratingTime": "2018-07-31",
          "thumbsUpCount": "1",
          "content": "除去官方文档，本书内容很通俗又讲解到位，不过还是薄了一点"
        },
        {
          "user": "jiangda",
          "ratingScore": "还行",
          "ratingTime": "2018-10-27",
          "thumbsUpCount": "1",
          "content": "四小时看完，正如豆友所说，适合我这样的懒人。"
        },
        {
          "user": "Jeao&Leon",
          "ratingScore": "还行",
          "ratingTime": "2019-02-05",
          "thumbsUpCount": "1",
          "content": "还是翻译问题，很糟糕。\n信息量其实还没超过往上可以找到的一些简易信息。看起来很多实例，其实讲解的还是不够清晰。\nspring cloud stream,spring oauth2和sleuth zipkin之前尚未了解。全是新概念的补充"
        },
        {
          "user": "Olivia",
          "ratingScore": "推荐",
          "ratingTime": "2019-09-24",
          "thumbsUpCount": "1",
          "content": "配图就足够值回票价了。思路清晰，深入浅出。适合菜鸟小白如我。技术不断进步，文中提到的设计模式也有相应的Service Mesh予以代替和支撑。太过深入细节，或太和平台绑定，容易过时，亦即丧失价值。"
        },
        {
          "user": "meantobe",
          "ratingScore": "推荐",
          "ratingTime": "2019-02-27",
          "thumbsUpCount": "0",
          "content": "思路清晰，比国人那本要好些"
        },
        {
          "user": "MrCAI",
          "ratingScore": "推荐",
          "ratingTime": "2018-09-01",
          "thumbsUpCount": "0",
          "content": "第一章提纲挈领；后续的章节偏细节，介绍了spring cloud提供的微服务架构各种开源框架"
        },
        {
          "user": "Jon",
          "ratingScore": "推荐",
          "ratingTime": "2019-03-10",
          "thumbsUpCount": "0",
          "content": "不错的 spring cloud 入门教程。中文翻译有瑕疵，中文版的代码也有若干错误，减一星。"
        },
        {
          "user": "PandaHermit",
          "ratingScore": "力荐",
          "ratingTime": "2018-08-15",
          "thumbsUpCount": "0",
          "content": "写的非常有调理，对微服务也有很好的讲解，代码都是关键代码恰到好处，非常棒的一本书。"
        },
        {
          "user": "育树霖疯",
          "ratingScore": "推荐",
          "ratingTime": "2018-11-20",
          "thumbsUpCount": "0",
          "content": "当按照作者的线索自行搭建微服务的时候，发现真是一本好书"
        },
        {
          "user": "海盐罗宋",
          "ratingScore": "推荐",
          "ratingTime": "2020-03-05",
          "thumbsUpCount": "0",
          "content": "干货挺多的，讲的比较系统全面，融会贯通，不错。"
        }
      ]
    }
  },
  {
    "title": "MicroservicePatterns:WithexamplesinJava",
    "bookUrl": "https://book.douban.com/subject/26989027/",
    "authorInfo": "Chris Richardson ",
    "pubInfo": " Manning / 2017-9 / GBP 38.44",
    "bookInfo": {
      "img": [
        "https://img3.doubanio.com/view/subject/l/public/s29918092.jpg",
        "https://img3.doubanio.com/view/subject/s/public/s29918092.jpg"
      ],
      "originalName": "",
      "averageRating": " 8.9 ",
      "ratersCount": "21",
      "ratings": [
        "57.1%",
        "33.3%",
        "9.5%",
        "0.0%",
        "0.0%"
      ],
      "bookIntro": "",
      "authorIntro": "",
      "bookToc": "1. ESCAPING MONOLITHIC HELL\n        2. DECOMPOSITION STRATEGIES\n        3. INTER-PROCESS COMMUNICATION IN A MICROSERVICE ARCHITECTURE\n        4. MANAGING TRANSACTIONS WITH SAGAS\n        5. DEVELOPING BUSINESS LOGIC FOR MICROSERVICES\n        6. IMPLEMENTING QUERIES WITH CQRS\n        7. SERVICE DISCOVERY AND REGISTRATION\n        8. API PATTERNS\n        9. MICROSERVICE CHASSIS\n        10. SECURITY\n        11. TESTING MICROSERVICES\n        12. DEPLOYING MICROSERVICES\n        13. VISIBILITY PATTERNS\n        14. REFACTORING TO MICROSERVICES\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 6 条",
      "commentsList": [
        {
          "user": "char",
          "ratingScore": "力荐",
          "ratingTime": "2020-02-17",
          "thumbsUpCount": "0",
          "content": "Day 47 理论与实践结合的一本书，有saga这样的pattern，也有针对DDD中各类如何写测试的实操，非常实用 #百日早起学习挑战#"
        },
        {
          "user": "YigWoo",
          "ratingScore": "推荐",
          "ratingTime": "2018-12-19",
          "thumbsUpCount": "0",
          "content": "初略概览。ddd + microservices"
        },
        {
          "user": "fankai",
          "ratingScore": "力荐",
          "ratingTime": "2018-08-25",
          "thumbsUpCount": "0",
          "content": "基本看完一遍了，总体感觉还是很不错的，各个模式讲解的比较深入，例子也容易上手"
        },
        {
          "user": "顾白",
          "ratingScore": 0.0,
          "ratingTime": "",
          "thumbsUpCount": "0",
          "content": "老外懂套路。帮组梳理知识点。"
        },
        {
          "user": "heyyoooo",
          "ratingScore": "还行",
          "ratingTime": "2019-10-26",
          "thumbsUpCount": "0",
          "content": "太尼玛啰嗦了。。。感觉可以把篇幅缩小到1/3"
        },
        {
          "user": "dingding2345",
          "ratingScore": "力荐",
          "ratingTime": "2020-03-02",
          "thumbsUpCount": "0",
          "content": "把我零碎的经验都串在一起了"
        }
      ]
    }
  },
  {
    "title": "SpringCloud微服务实战",
    "bookUrl": "https://book.douban.com/subject/27025912/",
    "authorInfo": "翟永超 ",
    "pubInfo": " 电子工业出版社 / 2017-5 / 89",
    "bookInfo": {
      "img": [
        "https://img3.doubanio.com/view/subject/l/public/s29434190.jpg",
        "https://img3.doubanio.com/view/subject/s/public/s29434190.jpg"
      ],
      "originalName": "",
      "averageRating": " 7.8 ",
      "ratersCount": "208",
      "ratings": [
        "14.4%",
        "52.4%",
        "27.4%",
        "4.3%",
        "1.4%"
      ],
      "bookIntro": "",
      "authorIntro": "",
      "bookToc": "第1章　基础知识\t1\n        什么是微服务架构\t1\n        -- 与单体系统的区别\t1\n        -- 如何实施微服务\t2\n        为什么选择Spring Cloud\t6\n        Spring Cloud简介\t7\n        版本说明\t8\n        第2章　微服务构建：Spring Boot\t11\n        框架简介\t12\n        快速入门\t13\n        -- 项目构建与解析\t13\n        -- 实现RESTful API\t17\n        配置详解\t20\n        -- 配置文件\t20\n        -- 自定义参数\t22\n        -- 参数引用\t22\n        -- 使用随机数\t23\n        -- 命令行参数\t23\n        -- 多环境配置\t24\n        -- 加载顺序\t25\n        监控与管理\t26\n        -- 初识actuator\t27\n        -- 原生端点\t28\n        小结\t38\n        第3章　服务治理：Spring Cloud Eureka\t39\n        服务治理\t39\n        -- Netflix Eureka\t40\n        --搭建服务注册中心\t41\n        --注册服务提供者\t43\n        --高可用注册中心\t46\n        --服务发现与消费\t48\n        Eureka详解\t51\n        --基础架构\t52\n        --服务治理机制\t52\n        --源码分析\t56\n        配置详解\t65\n        --服务注册类配置\t65\n        --服务实例类配置\t67\n        跨平台支持\t71\n        第4章　客户端负载均衡：Spring Cloud Ribbon\t73\n        客户端负载均衡\t73\n        RestTemplate详解\t75\n        -- GET请求\t75\n        -- POST请求\t77\n        -- PUT请求\t79\n        -- DELETE请求\t79\n        源码分析\t80\n        -- 负载均衡器\t91\n        -- 负载均衡策略\t109\n        配置详解\t123\n        --自动化配置\t124\n        -- Camden版本对RibbonClient配置的优化\t125\n        -- 参数配置\t127\n        -- 与Eureka结合\t127\n        重试机制\t128\n        第5章　服务容错保护：Spring Cloud Hystrix\t130\n        快速入门\t131\n        原理分析\t135\n        -- 工作流程\t135\n        -- 断路器原理\t144\n        -- 依赖隔离\t148\n        使用详解\t151\n        -- 创建请求命令\t151\n        -- 定义服务降级\t154\n        -- 异常处理\t157\n        -- 命令名称、分组以及线程池划分\t158\n        -- 请求缓存\t159\n        -- 请求合并\t166\n        属性详解\t172\n        -- Command属性\t174\n        -- collapser属性\t184\n        -- threadPool属性\t185\n        Hystrix仪表盘\t187\n        Turbine集群监控\t192\n        -- 构建监控聚合服务\t192\n        -- 与消息代理结合\t196\n        第6章　声明式服务调用：Spring Cloud Feign\t199\n        快速入门\t200\n        参数绑定\t202\n        继承特性\t205\n        Ribbon配置\t209\n        全局配置\t209\n        指定服务配置\t209\n        重试机制\t210\n        Hystrix配置\t211\n        全局配置\t211\n        禁用Hystrix\t211\n        指定命令配置\t212\n        服务降级配置\t212\n        其他配置\t214\n        第7章　API网关服务：Spring Cloud Zuul\t217\n        快速入门\t219\n        -- 构建网关\t220\n        -- 请求路由\t221\n        -- 请求过滤\t223\n        路由详解\t226\n        -- 传统路由配置\t226\n        -- 服务路由配置\t228\n        -- 服务路由的默认规则\t229\n        -- 自定义路由映射规则\t229\n        -- 路径匹配\t230\n        -- 路由前缀\t233\n        -- 本地跳转\t234\n        --  Cookie与头信息\t235\n        -- Hystrix和Ribbon支持\t236\n        过滤器详解\t238\n        -- 过滤器\t238\n        -- 请求生命周期\t239\n        -- 核心过滤器\t240\n        -- 异常处理\t244\n        -- 禁用过滤器\t256\n        动态加载\t257\n        -- 动态路由\t257\n        -- 动态过滤器\t261\n        第8章　分布式配置中心：Spring Cloud Config\t267\n        快速入门\t267\n        -- 构建配置中心\t268\n        -- 配置规则详解\t269\n        -- 客户端配置映射\t272\n        服务端详解\t274\n        -- 基础架构\t274\n        -- Git配置仓库\t276\n        -- SVN配置仓库\t279\n        -- 本地仓库\t279\n        -- 本地文件系统\t279\n        -- 健康监测\t280\n        -- 属性覆盖\t281\n        -- 安全保护\t281\n        -- 加密解密\t282\n        -- 高可用配置\t286\n        客户端详解\t286\n        --  URI指定配置中心\t287\n        -- 服务化配置中心\t287\n        -- 失败快速响应与重试\t290\n        -- 获取远程配置\t292\n        -- 动态刷新配置\t293\n        第9章　消息总线：Spring Cloud Bus\t295\n        消息代理\t295\n        RabbitMQ实现消息总线\t296\n        -- 基本概念\t297\n        -- 安装与使用\t298\n        -- 快速入门\t302\n        -- 整合Spring Cloud Bus\t306\n        -- 原理分析\t307\n        -- 指定刷新范围\t308\n        -- 架构优化\t309\n        -- RabbitMQ配置\t310\n        Kafka实现消息总线\t312\n        -- Kafka简介\t312\n        -- 快速入门\t313\n        --整合Spring Cloud Bus\t315\n        -- Kafka配置\t318\n        深入理解\t318\n        -- 源码分析\t320\n        -- 其他消息代理的支持\t342\n        第10章　消息驱动的微服务：Spring Cloud Stream\t344\n        快速入门\t344\n        核心概念\t349\n        -- 绑定器\t350\n        -- 发布-订阅模式\t351\n        -- 消费组\t353\n        -- 消息分区\t354\n        使用详解\t355\n        -- 开启绑定功能\t355\n        -- 绑定消息通道\t356\n        -- 消息生产与消费\t360\n        -- 响应式编程\t366\n        -- 消费组与消息分区\t368\n        -- 消息类型\t370\n        绑定器详解\t373\n        -- 绑定器SPI\t373\n        -- 自动化配置\t374\n        -- 多绑定器配置\t374\n        --  RabbitMQ与Kafka绑定器\t376\n        配置详解\t376\n        -- 基础配置\t377\n        -- 绑定通道配置\t377\n        -- 绑定器配置\t379\n        第11章　分布式服务跟踪：Spring Cloud Sleuth\t386\n        快速入门\t386\n        -- 准备工作\t386\n        -- 实现跟踪\t389\n        跟踪原理\t390\n        抽样收集\t392\n        与Logstash整合\t394\n        与Zipkin整合\t397\n        --  HTTP收集\t398\n        -- 消息中间件收集\t402\n        -- 收集原理\t404\n        -- 数据存储\t414\n        --  API接口\t417\n        附录A　Starter POMs\t419\n        后记\t421\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 76 条",
      "commentsList": [
        {
          "user": "Josen Zhang",
          "ratingScore": "推荐",
          "ratingTime": "2018-10-02",
          "thumbsUpCount": "3",
          "content": "国内作者写书还有待提高，不能光拿着官方文档翻译一遍就是自己的了啊"
        },
        {
          "user": "邻家的の柠檬叔",
          "ratingScore": "还行",
          "ratingTime": "2017-05-28",
          "thumbsUpCount": "0",
          "content": "实战用的工具书系列，必备书籍，但是很多东西讲得太细了，缺了一本更偏重于理念和怎样将所有组件全部有机的组成架构的概念类书，当然可能是作者觉得讲微服务本身的书已经太多了吧；"
        },
        {
          "user": "街道办杨书记",
          "ratingScore": "还行",
          "ratingTime": "2019-01-05",
          "thumbsUpCount": "0",
          "content": "还行，ojbk"
        },
        {
          "user": "影·指尖流转",
          "ratingScore": "还行",
          "ratingTime": "2019-04-21",
          "thumbsUpCount": "0",
          "content": "书中的Spring Cloud版本比较旧(与最新版本差一个大版本)，如果要用最新版搭项目的话，需要看官方文档，这个只能当个参考。"
        },
        {
          "user": "chown",
          "ratingScore": "推荐",
          "ratingTime": "2018-04-09",
          "thumbsUpCount": "1",
          "content": "对Spring Cloud的入门。Eureka, Ribbon, Hystrix, Feign, Zuul, Config, Bus"
        },
        {
          "user": "acAric",
          "ratingScore": "推荐",
          "ratingTime": "2018-01-29",
          "thumbsUpCount": "0",
          "content": "我觉得这本书非常不错。基本讲到了Spring Cloud的方方面面，讲技术的书难得不冗余。先普及分布式环境下的难题，再讲解Spring Cloud的应用方案。 分布式微服务架构无论在开发还是部署都是一件极其麻烦的事情，然而经过了Spring Cloud的整合，让难度降低了不至几个级别。技术圈的更新迭代真的太迅速了~~作为技术人员，一定一定要保持学习的热情和速度、"
        },
        {
          "user": "sunny",
          "ratingScore": "推荐",
          "ratingTime": "2019-10-16",
          "thumbsUpCount": "0",
          "content": "不能说把项目跑起来就实战了啊，要踩哪些坑适应哪些场景没说，作者的理解应该还是有的。"
        },
        {
          "user": "太阳HE草",
          "ratingScore": "还行",
          "ratingTime": "2019-10-09",
          "thumbsUpCount": "0",
          "content": "基本的使用+一点源码分析，算是不错的学习地图。\n内容上没有作者的博客丰富，源码解析不够清晰，不过也无伤大雅，源码终归是要自己实践才是真，作为引导还不错。"
        },
        {
          "user": "走过214318",
          "ratingScore": "推荐",
          "ratingTime": "2018-10-26",
          "thumbsUpCount": "0",
          "content": "还是很不错的，新的服务架构需要来学习学习，有经验的开发同学应该很容易入门。"
        },
        {
          "user": "元勰",
          "ratingScore": "推荐",
          "ratingTime": "2019-01-19",
          "thumbsUpCount": "0",
          "content": "开始说的很费劲.后面还比较有感觉.分布式环境下,spring cloud是一个全套解决方案.这本书对于常用的组件还是有一个大致的了解的."
        }
      ]
    }
  },
  {
    "title": "持续演进的CloudNative：云原生架构下微服务最佳实践",
    "bookUrl": "https://book.douban.com/subject/30370644/",
    "authorInfo": "王启军 ",
    "pubInfo": " 电子工业出版社 / 2018-10 / 79",
    "bookInfo": {
      "img": [
        "https://img3.doubanio.com/view/subject/l/public/s29914722.jpg",
        "https://img3.doubanio.com/view/subject/s/public/s29914722.jpg"
      ],
      "originalName": "",
      "averageRating": " 7.8 ",
      "ratersCount": "39",
      "ratings": [
        "33.3%",
        "38.5%",
        "20.5%",
        "2.6%",
        "5.1%"
      ],
      "bookIntro": "《持续演进的Cloud Native：云原生架构下微服务最佳实践》从架构、研发流程、团队文化三个角度详细介绍了如何构建Cloud Native。作者长期活跃在研发一线，具有丰富的架构设计经验，也曾亲身经历过很多失败的架构设计，如很多团队在实施微服务架构的时候，只强调拆分服务，根本没有理解微服务架构应该怎么做。《持续演进的Cloud Native：云原生架构下微服务最佳实践》就是想告诉读者，除了拆分服务，还要把哪些事做好，例如基础设施、一致性、性能、研发流程、团队文化等。 《持续演进的Cloud Native：云原生架构下微服务最佳实践》共分为10 章，第1 章从整体上描述了Cloud Native 的起源、组成及原则等；从第2 章到第7 章重点描述了微服务架构、敏捷基础设施及公共基础服务、可用性、可扩展性、性能、一致性等方面的设计实践；第8 章介绍了Serverless 和Service Mesh；第9 章介绍了如何构建研发流程；第10 章介绍了如何建设团队文化。 《持续演进的Cloud Native：云原生架构下微服务最佳实践》希望给技术管理者、架构师和有一定基础的技术人员提供帮助，特别是希望改变研发模式，从交付型软件过渡到云服务的传统软件企业开发者，此书将帮助你少走弯路。",
      "authorIntro": "王启军，目前就职于华为公司架构部，负责华为公司的Cloud Native、微服务架构推进落地，前后参与了华为手机祥云4.0、物联网IoT 2.0的架构设计。曾任当当架构师，主导电商平台架构设计，包括订单、支付、价格、库存、物流等。曾就职于搜狐，负责手机微博的研发。十余年的技术历练，也曾作为技术负责人带领过近百人的团队。公众号“奔跑中的蜗牛”的作者。",
      "bookToc": "第1章  综述  1\n        1.1  Cloud Native的起源  1\n        1.2  Cloud Native的组成  4\n        1.3  Cloud Native背后的诉求  5\n        1.4  如何衡量Cloud Native的能力  5\n        1.5  Cloud Native的原则  6\n        第2章  微服务架构  11\n        2.1  微服务架构的起源  11\n        2.2  为什么采用微服务架构  12\n        2.2.1  单体架构与微服务架构  12\n        2.2.2  什么时候开始微服务架构  14\n        2.2.3  如何决定微服务架构的拆分粒度  14\n        2.3  微服务设计原则  15\n        2.4  微服务架构实施的先决条件  17\n        2.4.1  研发环境和流程上的转变  17\n        2.4.2  拆分前先做好解耦  18\n        2.5  微服务划分模式  20\n        2.5.1  基于业务复杂度选择服务划分方法  20\n        2.5.2  基于数据驱动划分服务  21\n        2.5.3  基于领域驱动划分服务  22\n        2.5.4  从已有单体架构中逐步划分服务  23\n        2.5.5  微服务拆分策略  24\n        2.5.6  如何衡量服务划分的合理性  25\n        2.6  微服务划分反模式  26\n        2.7  微服务API设计  28\n        2.7.1  优秀API的设计原则  28\n        2.7.2  服务间通信——RPC  28\n        2.7.3  序列化——Protobuf  30\n        2.7.4  服务间通信——RESTful  33\n        2.7.5  通过Swagger实现RESTful  36\n        2.7.6  通过Spring Boot、Springfox、Swagger实现RESTful  41\n        2.7.7  HTTP协议的进化——HTTP/2  46\n        2.7.8  HTTP/2和Protobuf的组合——gRPC  48\n        2.8  微服务框架  53\n        2.9  基于Dubbo框架实现微服务  54\n        2.10  基于Spring Cloud框架实现微服务  58\n        2.11  服务发现场景下的ZooKeeper与Etcd  67\n        2.12  微服务部署策略  68\n        2.12.1  服务独享数据库  69\n        2.12.2  服务独享虚拟机/容器  70\n        2.13  为什么总觉得微服务架构很别扭  70\n        第3章  敏捷基础设施及公共基础服务  73\n        3.1  传统基础设施面临的挑战  73\n        3.2  什么是敏捷基础设施  74\n        3.3  基于容器的敏捷基础设施  75\n        3.3.1  容器VS虚拟机  76\n        3.3.2  安装Docker  77\n        3.3.3  部署私有Docker Registry  79\n        3.3.4  基于Spring Boot、Maven、Docker构建微服务  79\n        3.3.5  基于docker-compose管理容器  84\n        3.4  基于公共基础服务的平台化  85\n        3.5  监控告警服务  86\n        3.5.1  监控数据采集  87\n        3.5.2  监控数据接收模式  87\n        3.5.3  通过时间序列数据库存储监控数据  88\n        3.5.4  开源监控系统实现Prometheus  88\n        3.5.5  通过Prometheus和Grafana监控服务  90\n        3.6  分布式消息中间件服务  96\n        3.6.1  分布式消息中间件的作用  97\n        3.6.2  业界常用的分布式消息中间件  98\n        3.6.3  Kafka的设计原理  99\n        3.6.4  为什么Kafka性能高  100\n        3.6.5  Kafka的数据存储结构  102\n        3.6.6  如何保证Kafka不丢消息  104\n        3.6.7  Kafka跨数据中心场景集群部署模式  106\n        3.7  分布式缓存服务  108\n        3.7.1  分布式缓存的应用场景  109\n        3.7.2  业界常用的分布式缓存Memcached  110\n        3.7.3  业界常用的分布式缓存——Redis  111\n        3.7.4  Redis常用的分布式缓存集群模式  112\n        3.7.5  基于Codis实现Redis分布式缓存集群  116\n        3.8  分布式任务调度服务  118\n        3.8.1  通过Tbschedule实现分布式任务调度  119\n        3.8.2  通过Elastic-Job实现分布式任务调度  123\n        3.9  如何生成分布式ID  126\n        3.9.1  UUID  126\n        3.9.2  SnowFlake  127\n        3.9.3  Ticket Server  128\n        3.9.4  小结  129\n        第4章  可用性设计  130\n        4.1  综述  130\n        4.1.1  可用性和可靠性的关系  130\n        4.1.2  可用性的衡量标准  131\n        4.1.3  什么降低了可用性  131\n        4.2  逐步切换  132\n        4.2.1  影子测试  132\n        4.2.2  蓝绿部署  133\n        4.2.3  灰度发布/金丝雀发布  134\n        4.3  容错设计  135\n        4.3.1  消除单点  136\n        4.3.2  特性开关  136\n        4.3.3  服务分级  137\n        4.3.4  降级设计  138\n        4.3.5  超时重试  139\n        4.3.6  隔离策略  152\n        4.3.7  熔断器  153\n        4.4  流控设计  157\n        4.4.1  限流算法  157\n        4.4.2  流控策略  159\n        4.4.3  基于Guava限流  160\n        4.4.4  基于Nginx限流  162\n        4.5  容量预估  163\n        4.6  故障演练  164\n        4.7  数据迁移  165\n        4.7.1  逻辑分离，物理不分离  166\n        4.7.2  物理分离  166\n        第5章  可扩展性设计  168\n        5.1  加机器能解决问题吗  168\n        5.2  横向扩展  169\n        5.3  AKF扩展立方体  170\n        5.4  如何扩展长连接  172\n        5.5  如何扩展数据库  175\n        5.5.1  X轴扩展——主从复制集群  175\n        5.5.2  Y轴扩展——分库、垂直分表  176\n        5.5.3  Z轴扩展——分片（sharding）  177\n        5.5.4  为什么要带拆分键  182\n        5.5.5  分片后的关联查询问题  183\n        5.5.6  分片扩容（re-sharding）  184\n        5.5.7  精选案例  187\n        5.6  如何扩展数据中心  190\n        5.6.1  两地三中心和同城多活  190\n        5.6.2  同城多活  191\n        5.6.3  异地多活  192\n        第6章  性能设计  194\n        6.1  性能指标  195\n        6.2  如何树立目标  195\n        6.3  如何寻找平衡点  196\n        6.4  如何定位瓶颈点  197\n        6.5  服务通信优化  198\n        6.5.1  同步转异步  198\n        6.5.2  阻塞转非阻塞  199\n        6.5.3  序列化  200\n        6.6  通过消息中间件提升写性能  201\n        6.7  通过缓存提升读性能  202\n        6.7.1  基于ConcurrentHashMap实现本地缓存  203\n        6.7.2  基于Guava Cache实现本地缓存  204\n        6.7.3  缓存的常用模式  205\n        6.7.4  应用缓存的常见问题  207\n        6.8  数据库优化  208\n        6.8.1  通过执行计划分析瓶颈点  208\n        6.8.2  为搜索字段创建索引  209\n        6.8.3  通过慢查询日志分析瓶颈点  210\n        6.8.4  通过提升硬件能力优化数据库  211\n        6.9  简化设计  212\n        6.9.1  转移复杂度  212\n        6.9.2  从业务角度优化  212\n        第7章  一致性设计  214\n        7.1  问题起源  214\n        7.2  基础理论  215\n        7.2.1  什么是分布式事务  216\n        7.2.2  CAP定理  218\n        7.2.3  BASE理论  219\n        7.2.4  Quorum机制（NWR模型）  219\n        7.2.5  租约机制（Lease）  220\n        7.2.6  状态机（Replicated State Machine）  221\n        7.3  分布式系统的一致性分类  222\n        7.3.1  以数据为中心的一致性模型  223\n        7.3.2  以用户为中心的一致性模型  226\n        7.3.3  业界常用的一致性模型  229\n        7.4  如何实现强一致性  230\n        7.4.1  两阶段提交  230\n        7.4.2  三阶段提交（3PC）  231\n        7.5  如何实现最终一致性  232\n        7.5.1  重试机制  232\n        7.5.2  本地记录日志  233\n        7.5.3  可靠事件模式  233\n        7.5.4  Saga事务模型  235\n        7.5.5  TCC事务模型  237\n        7.6  分布式锁  238\n        7.6.1  基于数据库实现悲观锁和乐观锁  239\n        7.6.2  基于ZooKeeper的分布式锁  241\n        7.6.3  基于Redis实现分布式锁  242\n        7.7  如何保证幂等性  244\n        7.7.1  幂等令牌（Idempotency Key）  244\n        7.7.2  在数据库中实现幂等性  246\n        第8章  未来值得关注的方向  247\n        8.1  Serverless  247\n        8.1.1  什么是Serverless  247\n        8.1.2  Serverless的现状  248\n        8.1.3  Serverless的应用场景  249\n        8.2  Service Mesh  250\n        8.2.1  什么是Service Mesh  250\n        8.2.2  为什么需要Service Mesh  252\n        8.2.3  Service Mesh的现状  253\n        8.2.4  Istio架构分析  255\n        第9章  研发流程  258\n        9.1  十二因子  258\n        9.2  为什么选择DevOps  261\n        9.3  自动化测试  263\n        9.3.1  单元测试  263\n        9.3.2  TDD  264\n        9.3.3  提交即意味着可测试  265\n        9.4  Code Review  265\n        9.4.1  Code Review的意义  265\n        9.4.2  Code Review的原则  266\n        9.4.3  Code Review的过程  267\n        9.5  流水线  267\n        9.5.1  持续交付  267\n        9.5.2  持续部署流水线  268\n        9.5.3  基于开源打造流水线  268\n        9.5.4  Amazon的流水线  271\n        9.5.5  开发人员自服务  271\n        9.6  为什么需要AIOps  272\n        9.7  基于数据和反馈持续改进  273\n        9.8  拥抱变化  274\n        9.9  代码即设计  274\n        第10章  团队文化  276\n        10.1  为什么团队文化如此重要  276\n        10.2  组织结构  278\n        10.2.1  团队规模导致的问题  278\n        10.2.2  康威定律  278\n        10.2.3  扁平化的组织  279\n        10.2.4  独裁的管理方式还是民主的管理方式  280\n        10.2.5  民主的团队如何做决策  282\n        10.3  环境氛围  282\n        10.3.1  公开透明的工作环境  282\n        10.3.2  学习型组织  283\n        10.3.3  减少正式的汇报  284\n        10.3.4  高效的会议  284\n        10.3.5  量化指标致死  286\n        10.4  管理风格  287\n        10.4.1  下属请假你会拒绝吗  287\n        10.4.2  为什么你招不到你想要的人  288\n        10.4.3  得到了所有人的认可，说明你并不是一个好的管理者  291\n        10.4.4  尽量避免用自己的权力去做决策  291\n        10.4.5  一屋不扫也可助你“荡平天下”  292\n        10.4.6  如何留下你想要的人293\n        10.5  经典案例  294\n        10.5.1  Instagram的团队文化  294\n        10.5.2  Netflix的团队文化  294\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 20 条",
      "commentsList": [
        {
          "user": "张岩kris",
          "ratingScore": "很差",
          "ratingTime": "2019-05-30",
          "thumbsUpCount": "2",
          "content": "这书也可以给到8.5以上？？？？通篇都各种抄，大众架构理论。。除了最后一章的管理思维，没看到作者的任何思考，让我觉得这本书作者真的懂什么是云原生吗？？"
        },
        {
          "user": "Ivy",
          "ratingScore": "还行",
          "ratingTime": "2020-03-12",
          "thumbsUpCount": "1",
          "content": "算是比较全面了，但all in的通病就是浅显。拿来串串体系还是可以的"
        },
        {
          "user": "jianjie_ohyeah",
          "ratingScore": "还行",
          "ratingTime": "2019-06-10",
          "thumbsUpCount": "1",
          "content": "2019-03-13 初读; 2019-06-10重读；怎么说呢，大纲还是挺有意思的，要实现云原生需要什么，答曰：第一是基础，即敏捷的基础设置（数据库、缓存、队列、ID 生成 和 CT 调度等），其次是设计方面，体现在：可用性（降级、发布：蓝绿、金丝雀、影子）、可扩展性（扩容、partition）、性能（异步化提升吞吐，书中提到，kafka 的吞吐量是 db 的三四十倍，缓存提升读性能（redis 10w tps），CQRS 等）、一致性（各种模式）等等.. \n整体来说，还是太过浅显 ... 当成一个 introduction 中的 introduction 吧 ..."
        },
        {
          "user": "Olivia",
          "ratingScore": "推荐",
          "ratingTime": "2020-03-13",
          "thumbsUpCount": "0",
          "content": "「未来技术人员会分成两种，一种是构建云的，另一种是基于云构建应用的」。目前「云」\n的热点已逐步从基础设施层转至应用层。随着服务网格的进一步发展和下沉，应用开发门槛必将进一步降低，随之而来的，将是「云原生」应用的蓬勃发展。本书架构明晰，由点及面。云原生知识体系太过庞杂，概论难免浅显。如果将理论和实践章节分部编纂，恐怕书的厚度又将增加一个量级。书中章节难免有东拉西凑嫌疑，但初学者若想搭建理论框架，则无需太过介意。至于最后一章管理学，就只能「呵呵」了。"
        },
        {
          "user": "天平上的尘埃",
          "ratingScore": "推荐",
          "ratingTime": "2019-01-12",
          "thumbsUpCount": "0",
          "content": "作为国人写得一本书，还是看得出作者用心的态度和认真的分享。虽然从第四章到第七章主要是讲架构方面的议题，不过还是很好的介绍了云原生以及微服务的一些实践经验"
        },
        {
          "user": "南阜鸟",
          "ratingScore": "还行",
          "ratingTime": "2019-10-01",
          "thumbsUpCount": "0",
          "content": "讽刺的是，最后一章所说的种种缺点都是华为有的，而作者在华为"
        },
        {
          "user": "lowen",
          "ratingScore": "还行",
          "ratingTime": "2019-11-12",
          "thumbsUpCount": "0",
          "content": "还行吧，中间贴代码部分显然是注水。但是能够把整个微服务的框架的讲得比较清楚，能综述出来已经不容易了。"
        },
        {
          "user": "iambowen",
          "ratingScore": "推荐",
          "ratingTime": "2019-06-19",
          "thumbsUpCount": "0",
          "content": "理论体系和实践都很丰富，印象最深的是一致性介绍部分。"
        },
        {
          "user": "纯阳子",
          "ratingScore": "力荐",
          "ratingTime": "2019-11-05",
          "thumbsUpCount": "0",
          "content": "持续演进的Cloud Native\n又是一本写云原生架构的好书。这本书与《未来架构》面临同样的难题，云原生这个问题太大，不像云、微服务架构这些问题那么相对紧凑，粒度小到可以被当作一个易于处理的点来对待，云原生更像是一个由这些可以被看作点的相关技术构成的体系，每一个点要想说清楚都至少需要一本书，现在要放在一本书里边讲，就面临一个在材料方面如何取舍的问题，选择不好必然会影响可读性和总体观感。《未来架构》作者的选材思路是根据自己的认识和经验挑一些重点领域着笔墨，其他直接略过，所以显然是事先在写作框架内圈定了远程通信、服务治理、服务监控和数据架构这些东西，然后再在这个范围内重点介绍Apache SkyWalking、Dubbo、S（后文见书评正文）"
        },
        {
          "user": "Breakthen",
          "ratingScore": "推荐",
          "ratingTime": "2019-03-11",
          "thumbsUpCount": "0",
          "content": "很全面的经验之谈，只是限于篇幅，有些章节其实可以再深入一些"
        }
      ]
    }
  },
  {
    "title": "云原生服务网格Istio：原理、实践、架构与源码解析",
    "bookUrl": "https://book.douban.com/subject/34438220/",
    "authorInfo": "张超盟，章鑫，徐中虎，徐飞 ",
    "pubInfo": " 电子工业出版社 / 2019-7 / 139.00元",
    "bookInfo": {
      "img": [
        "https://img3.doubanio.com/view/subject/l/public/s33301812.jpg",
        "https://img3.doubanio.com/view/subject/s/public/s33301812.jpg"
      ],
      "originalName": "",
      "averageRating": " 8.6 ",
      "ratersCount": "15",
      "ratings": [
        "46.7%",
        "46.7%",
        "6.7%",
        "0.0%",
        "0.0%"
      ],
      "bookIntro": "本书分为原理篇、实践篇、架构篇和源码篇，由浅入深地将Istio项目庖丁解牛并呈现给读者。 原理篇介绍了服务网格技术与Istio项目的技术背景、设计理念与功能原理，能够帮助读者了解服务网格这一云原生领域的标志性技术，掌握Istio流量治理、策略与邀测和安全功能的使用方法。 实践篇从零开始搭建Istio运行环境并完成一个真实应用的开发、交付、上线监控与治理的完整过程，能够帮助读者熟悉Istio的功能并加深对Istio的理解。 架构篇剖析了Istio项目的三大核心子项目Pilot、Mixer、Citadel的详细架构，帮助读者熟悉Envoy、Galley、Pilot-agent等相关项目，并挖掘Istio代码背后的设计与实现思想。 源码篇对Istio各个项目的代码结构、文件组织、核心流程、主要数据结构及各主要代码片段等关键内容都进行了详细介绍，读者只需具备...(展开全部)",
      "authorIntro": "本书分为原理篇、实践篇、架构篇和源码篇，由浅入深地将Istio项目庖丁解牛并呈现给读者。 原理篇介绍了服务网格技术与Istio项目的技术背景、设计理念与功能原理，能够帮助读者了解服务网格这一云原生领域的标志性技术，掌握Istio流量治理、策略与邀测和安全功能的使用方法。 实践篇从零开始搭建Istio运行环境并完成一个真实应用的开发、交付、上线监控与治理的完整过程，能够帮助读者熟悉Istio的功能并加深对Istio的理解。 架构篇剖析了Istio项目的三大核心子项目Pilot、Mixer、Citadel的详细架构，帮助读者熟悉Envoy、Galley、Pilot-agent等相关项目，并挖掘Istio代码背后的设计与实现思想。 源码篇对Istio各个项目的代码结构、文件组织、核心流程、主要数据结构及各主要代码片段等关键内容都进行了详细介绍，读者只需具备一定的Go语言基础，便可快速掌握Istio各部分的实现原理，并根据自己的兴趣深入了解某一关键机制的完整实践。 本书提供源代码下载，参见 http://github.com/cloudnativebooks/cloud-native-istio。 无论是对于刚入门Istio的读者，还是对于已经在产品中使用Istio的读者，本书都极具参考价值。",
      "bookToc": "原理篇\n        第1章 你好，Istio\n        第2章 Istio架构概述\n        第3章 非侵入的流量治理\n        第4章 可扩展的策略和遥测\n        第5章 可插拔的服务安全\n        第6章 透明的Sidecar机制\n        第7章 多集群服务治理\n        实践篇\n        第8章 环境准备\n        第9章 流量监控\n        第10章 灰度发布\n        第11章 流量治理\n        第12章 服务保护\n        第13章 多集群管理\n        架构篇\n        第14章 司令官Pilot\n        第15章 守护神Mixer\n        第16章 安全碉堡Citadel\n        第17章 高性能代理Envoy\n        第18章 代理守护进程Pilot-agent\n        第19章 配置中心Galley\n        源码篇\n        第20章 Pilot源码解析\n        第21章 Mixer源码解析\n        第22章 Citadel源码解析\n        第23章 Envoy源码解析\n        第24章 Galley源码解析\n        结语\n        附录A 源码仓库介绍\n        附录B 实践经验和总结\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 7 条",
      "commentsList": [
        {
          "user": "Charles",
          "ratingScore": "还行",
          "ratingTime": "2020-02-22",
          "thumbsUpCount": "0",
          "content": "快速入了个门"
        },
        {
          "user": "Breakthen",
          "ratingScore": 0.0,
          "ratingTime": "",
          "thumbsUpCount": "0",
          "content": "粗读了一下，架构及源码部分未仔细看"
        },
        {
          "user": "Olivia",
          "ratingScore": "推荐",
          "ratingTime": "2020-03-05",
          "thumbsUpCount": "0",
          "content": "接连看两本华为系出品书籍，皆是佳品，喜欢喜欢。好难得看技术书籍能联想到「优雅」二字，「我们管在复杂环境下表现出鲁棒性的简单系统叫优雅」。谋篇布局就颇见功力，「原理篇」「实践篇」「架构篇」「源码篇」; 骨架丰满，深得我心。内容详尽、条理分明、图文辉映，妙哉妙哉。阅读需一定门槛，前置知识点有Kubernetes、微服务和服务网格，或者搭配SpringCloud更佳。\nPS: 坑很大，已行至此，只能前进。"
        },
        {
          "user": "行者酱油君",
          "ratingScore": "推荐",
          "ratingTime": "2019-09-10",
          "thumbsUpCount": "0",
          "content": "还不错，讲解得有点意思，作者有点水平。但是中间有些内容水平不太一致，略显初级；然后难点部分不敢深入，例如多集群的配置，这个就有点尴尬了。"
        },
        {
          "user": "happen",
          "ratingScore": "推荐",
          "ratingTime": "2019-10-27",
          "thumbsUpCount": "0",
          "content": "要了解istio的话，这本书就可以了，讲的很好。"
        },
        {
          "user": "云水馋心",
          "ratingScore": "力荐",
          "ratingTime": "2020-03-13",
          "thumbsUpCount": "0",
          "content": "从原理、实践到架构、源码篇，内容全面，讲解透彻"
        },
        {
          "user": "虾米（国霞）",
          "ratingScore": "力荐",
          "ratingTime": "2019-07-05",
          "thumbsUpCount": "2",
          "content": "这本书写得非常详尽、全面，堪称“Istio权威指南”，大到整本书，小到一个小节，都能看出作者写作的用心。这本书目前是所有Istio书中内容最全也最厚的，厉害了，各位作者！"
        }
      ]
    }
  },
  {
    "title": "ProgrammingKubernetes:DevelopingCloudNativeApplications",
    "bookUrl": "https://book.douban.com/subject/33393681/",
    "authorInfo": "Michael Hausenblas、Stefan Schimanski ",
    "pubInfo": " O'Reilly Media / 2019-9-4 / USD 59.99",
    "bookInfo": {
      "img": [
        "https://img1.doubanio.com/view/subject/l/public/s32278647.jpg",
        "https://img1.doubanio.com/view/subject/s/public/s32278647.jpg"
      ],
      "originalName": "",
      "averageRating": 0.0,
      "ratersCount": 0,
      "ratings": [],
      "bookIntro": "While Kubernetes has established itself as the industry standard for managing containers and their life cycles, there’s a definite need for good practices on how to write native applications. This practical guide shows application and infrastructure developers, DevOps practitioners, and site reliability engineers how to develop cloud native apps that run on Kubernetes. Red Hat’s developer advocate Michael Hausenblas and senior software engineer Stefan Schimanski guide you through Kubernetes’ basic building blocks including the client-go API library, custom resources, and cloud native programming languages. This intermediate-level book requires a minimum understanding of development and system administration tools and practices such as package management, the Go programming language, and using Git.",
      "authorIntro": "Michael Hausenblas is a Developer Advocate at Red Hat. Stefan Schimanski is a Senior Software Engineer at Red Hat. Stefan Schimanski is a Senior Software Engineer at Red Hat.",
      "bookToc": "1. Introduction\n        2. Kubernetes API Basics\n        3. Basics of client-go\n        4. Using Custom Resources\n        5. Automating Code Generation\n        6. Solutions for Writing Operators\n        7. Shipping Controllers and Operators\n        8. Custom API Servers\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 2 条",
      "commentsList": [
        {
          "user": "行者酱油君",
          "ratingScore": "力荐",
          "ratingTime": "2019-09-03",
          "thumbsUpCount": "0",
          "content": "开发 CRD+Operator 值得一看的一本书。"
        },
        {
          "user": "happen",
          "ratingScore": "力荐",
          "ratingTime": "2019-11-30",
          "thumbsUpCount": "1",
          "content": "深入k8s-apiserver的好书，19年读过最有价值的书之一。client-go，CRD，code-generator，informers，sample-controller，CRD vs 自定义apiserver，高级crd功能。"
        }
      ]
    }
  },
  {
    "title": "SpringBoot实战",
    "bookUrl": "https://book.douban.com/subject/26857423/",
    "authorInfo": "[美]克雷格·沃斯 / 丁雪丰 ",
    "pubInfo": " 人民邮电出版社 / 2016-9 / 59.00元",
    "bookInfo": {
      "img": [
        "https://img9.doubanio.com/view/subject/l/public/s28983685.jpg",
        "https://img9.doubanio.com/view/subject/s/public/s28983685.jpg"
      ],
      "originalName": "",
      "averageRating": " 7.1 ",
      "ratersCount": "342",
      "ratings": [
        "9.6%",
        "37.1%",
        "43.0%",
        "8.8%",
        "1.5%"
      ],
      "bookIntro": "本书以Spring应用程序开发为中心，全面讲解如何运用Spring Boot提高效率，使应用程序的开发和管理更加轻松有趣。作者行文亲切流畅，以大量示例讲解了Spring Boot在各类情境中的应用，内容涵盖起步依赖、Spring Boot CLI、Groovy、Grails、Actuator。对于Spring Boot开发应用中较为繁琐的内容，附录奉上整理完毕的表格，一目了然，方便读者查阅。",
      "authorIntro": "Craig Walls Pivotal高级工程师，Spring Social及Spring Sync项目领导者，著名技术博主，畅销书《Spring实战》作者。他致力于推广Spring框架，笔耕不辍，亦时常作为演讲嘉宾出席各类相关会议。 译者简介： 丁雪丰　 资深开发及运维工程师，活跃的技术图书译者，致力于推动优秀技术在国内的发展，出版了《Spring攻略》《MongoDB实战》《RESTful Web Service Cookbook中文版》等6部译著。",
      "bookToc": "第1章　入门　　1\n        1.1　Spring风云再起　　1\n        1.1.1　重新认识Spring　　2\n        1.1.2　Spring Boot精要　　3\n        1.1.3　Spring Boot不是什么　　6\n        1.2　Spring Boot入门　　6\n        1.2.1　安装Spring Boot CLI　　7\n        1.2.2　使用Spring Initializr初始化Spring Boot项目　　10\n        1.3　小结　　18\n        第2章　开发第一个应用程序　　19\n        2.1　运用Spring Boot　　19\n        2.1.1　查看初始化的Spring Boot新项目　　21\n        2.1.2　Spring Boot项目构建过程解析　　24\n        2.2　使用起步依赖　　27\n        2.2.1　指定基于功能的依赖　　28\n        2.2.2　覆盖起步依赖引入的传递依赖　　29\n        2.3　使用自动配置　　30\n        2.3.1　专注于应用程序功能　　31\n        2.3.2　运行应用程序　　36\n        2.3.3　刚刚发生了什么　　38\n        2.4　小结　　41\n        第3章　自定义配置　　42\n        3.1　覆盖Spring Boot自动配置　　42\n        3.1.1　保护应用程序　　43\n        3.1.2　创建自定义的安全配置　　44\n        3.1.3　掀开自动配置的神秘面纱　　48\n        3.2　通过属性文件外置配置　　49\n        3.2.1　自动配置微调　　50\n        3.2.2　应用程序Bean的配置外置　　55\n        3.2.3　使用Profile进行配置　　59\n        3.3　定制应用程序错误页面　　62\n        3.4　小结　　64\n        第4章　测试　　66\n        4.1　集成测试自动配置　　66\n        4.2　测试Web应用程序　　68\n        4.2.1　模拟Spring MVC　　69\n        4.2.2　测试Web安全　　72\n        4.3　测试运行中的应用程序　　74\n        4.3.1　用随机端口启动服务器　　75\n        4.3.2　使用Selenium测试HTML页面　　76\n        4.4　小结　　78\n        第5章　Groovy与Spring Boot CLI　　80\n        5.1　开发Spring Boot CLI应用程序　　80\n        5.1.1　设置CLI项目　　81\n        5.1.2　通过Groovy消除代码噪声　　81\n        5.1.3　发生了什么　　85\n        5.2　获取依赖　　86\n        5.2.1　覆盖默认依赖版本　　87\n        5.2.2　添加依赖仓库　　88\n        5.3　用CLI运行测试　　89\n        5.4　创建可部署的产物　　91\n        5.5　小结　　91\n        第6章　在Spring Boot中使用Grails　　93\n        6.1　使用GORM进行数据持久化　　93\n        6.2　使用Groovy Server Pages定义视图　　98\n        6.3　结合Spring Boot与Grails 3　　100\n        6.3.1　创建新的Grails项目　　100\n        6.3.2　定义领域模型　　103\n        6.3.3　开发Grails控制器　　104\n        6.3.4　创建视图　　105\n        6.4　小结　　107\n        第7章　深入Actuator　　108\n        7.1　揭秘Actuator的端点　　108\n        7.1.1　查看配置明细　　109\n        7.1.2　运行时度量　　115\n        7.1.3　关闭应用程序　　121\n        7.1.4　获取应用信息　　121\n        7.2　连接Actuator的远程shell　　122\n        7.2.1　查看autoconfig报告　　123\n        7.2.2　列出应用程序的Bean　　124\n        7.2.3　查看应用程序的度量信息　　124\n        7.2.4　调用Actuator端点　　125\n        7.3　通过JMX监控应用程序　　126\n        7.4　定制Actuator　　128\n        7.4.1　修改端点ID　　128\n        7.4.2　启用和禁用端点　　129\n        7.4.3　添加自定义度量信息　　129\n        7.4.4　创建自定义跟踪仓库　　132\n        7.4.5　插入自定义健康指示器　　134\n        7.5　保护Actuator端点　　136\n        7.6　小结　　138\n        第8章　部署Spring Boot应用程序　　139\n        8.1　衡量多种部署方式　　139\n        8.2　部署到应用服务器　　140\n        8.2.1　构建WAR文件　　141\n        8.2.2　创建生产Profile　　142\n        8.2.3　开启数据库迁移　　145\n        8.3　推上云端　　150\n        8.3.1　部署到Cloud Foundry　　150\n        8.3.2　部署到Heroku　　153\n        8.4　小结　　155\n        附录A　Spring Boot开发者工具　　157\n        附录B　Spring Boot起步依赖　　163\n        附录C　配置属性　　169\n        附录D　Spring Boot依赖　　202\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 139 条",
      "commentsList": [
        {
          "user": "这是大号",
          "ratingScore": "较差",
          "ratingTime": "2020-02-19",
          "thumbsUpCount": "2",
          "content": "这书也太实战了，与其说是一本书，更不如说是一本说明书，一本旅游手册"
        },
        {
          "user": "木杉1986",
          "ratingScore": "还行",
          "ratingTime": "2017-03-14",
          "thumbsUpCount": "4",
          "content": "东拉西扯了许多不必要的东西。。。"
        },
        {
          "user": "阅微草堂",
          "ratingScore": "力荐",
          "ratingTime": "2020-03-17",
          "thumbsUpCount": "0",
          "content": "一个应用程序的自身逻辑才是应用程序独一无二的东西。 springboot本质就是spring，使你专注业务逻辑，特性：自动配置，起步依赖，命令行界面，actuator检测组件。它通过内嵌服务器提供服务器功能，利用条件化配置和maven提供的传递依赖解析实现自动配置。"
        },
        {
          "user": "Zane",
          "ratingScore": "还行",
          "ratingTime": "2018-04-25",
          "thumbsUpCount": "1",
          "content": "因最近的面试和内部培训而试着了解下Spring Boot。对Spring Framework的印象有所改观。在快速搭建项目方面，Spring Boot做了不少改进，简化了很多配置。这本书也的确紧扣“实战”主题，相比之前看过的《Java8实战》，更像一本实操手册，适合上手。"
        },
        {
          "user": "luckygxf",
          "ratingScore": "还行",
          "ratingTime": "2018-04-22",
          "thumbsUpCount": "1",
          "content": "入门书"
        },
        {
          "user": "发条°|Pomelo\"",
          "ratingScore": "还行",
          "ratingTime": "2017-10-23",
          "thumbsUpCount": "0",
          "content": "入门书籍"
        },
        {
          "user": "Erika",
          "ratingScore": "很差",
          "ratingTime": "2019-03-18",
          "thumbsUpCount": "0",
          "content": "很烂，不如叫gradle、groovy实战，任何一个国内的入门视频/书都比这个强"
        },
        {
          "user": "nobody",
          "ratingScore": "还行",
          "ratingTime": "2018-04-11",
          "thumbsUpCount": "1",
          "content": "粗读了一遍，真正用的时候再有针对的细读"
        },
        {
          "user": "einverne",
          "ratingScore": "还行",
          "ratingTime": "2018-07-06",
          "thumbsUpCount": "0",
          "content": "只能说是入门SpringBoot的书了"
        },
        {
          "user": "Alexis",
          "ratingScore": "还行",
          "ratingTime": "2018-08-03",
          "thumbsUpCount": "0",
          "content": "过时。也不适合实战"
        }
      ]
    }
  },
  {
    "title": "分布式系统常用技术及案例分析",
    "bookUrl": "https://book.douban.com/subject/26975204/",
    "authorInfo": "柳伟卫 ",
    "pubInfo": " 电子工业出版社 / 2017-2 / 99",
    "bookInfo": {
      "img": [
        "https://img3.doubanio.com/view/subject/l/public/s29345560.jpg",
        "https://img3.doubanio.com/view/subject/s/public/s29345560.jpg"
      ],
      "originalName": "",
      "averageRating": " 4.0 ",
      "ratersCount": "47",
      "ratings": [
        "40.4%",
        "2.1%",
        "10.6%",
        "14.9%",
        "31.9%"
      ],
      "bookIntro": "《分布式系统常用技术及案例分析》全面介绍在设计分布式系统时所要考虑的技术方案，内容丰富、案例新颖，相关理论与技术实践较为前瞻。《分布式系统常用技术及案例分析》不仅仅介绍了分布式系统的原理、基础理论，同时还引入了大量市面上常用的最新分布式系统技术，不仅告诉读者怎么用，同时也分析了为什么这么用，并阐述了这些技术的优缺点。希望《分布式系统常用技术及案例分析》可以成为读者案头的工具书，供读者随手翻阅。 《分布式系统常用技术及案例分析》分为三大部分，即分布式系统基础理论、分布式系统常用技术以及经典的分布式系统案例分析。第一部分主要介绍分布式系统基础理论知识，总结一些在设计分布式系统时需要考虑的范式、知识点以及可能会面临的问题，其中包括线程、通信、一致性、容错性、CAP理论、安全性和并发等相关内容；同时讲述分布式系统的常见架构体系，其中也包括最近比较火的REST...(展开全部)",
      "authorIntro": "《分布式系统常用技术及案例分析》全面介绍在设计分布式系统时所要考虑的技术方案，内容丰富、案例新颖，相关理论与技术实践较为前瞻。《分布式系统常用技术及案例分析》不仅仅介绍了分布式系统的原理、基础理论，同时还引入了大量市面上常用的最新分布式系统技术，不仅告诉读者怎么用，同时也分析了为什么这么用，并阐述了这些技术的优缺点。希望《分布式系统常用技术及案例分析》可以成为读者案头的工具书，供读者随手翻阅。 《分布式系统常用技术及案例分析》分为三大部分，即分布式系统基础理论、分布式系统常用技术以及经典的分布式系统案例分析。第一部分主要介绍分布式系统基础理论知识，总结一些在设计分布式系统时需要考虑的范式、知识点以及可能会面临的问题，其中包括线程、通信、一致性、容错性、CAP理论、安全性和并发等相关内容；同时讲述分布式系统的常见架构体系，其中也包括最近比较火的RESTful风格架构、微服务、容器技术等。第二部分主要列举了在分布式系统应用中经常用到的一些主流技术，并介绍这些技术的作用和用法；这些技术涵盖了分布式消息服务、分布式计算、分布式存储、分布式监控系统、分布式版本控制、RESTful、微服务、容器等领域的内容。第三部分选取了以淘宝网和Twitter为代表的国内外知名互联网企业的大型分布式系统案例，分析其架构设计以及演变过程；这部分相当于是对第二部分零散的技术点做一个“串烧”，让读者可以结合技术的理论，看到实战的效果。 《分布式系统常用技术及案例分析》主要面向的读者是对分布式系统感兴趣的计算机专业的学生、软件工程师、系统架构师等。",
      "bookToc": "第1章　分布式系统基础知识\t1\n        1.1　概述\t2\n        1.1.1　什么是分布式系统\t2\n        1.1.2　集中式系统VS.分布式系统\t3\n        1.1.3　如何设计分布式系统\t4\n        1.1.4　分布式系统所面临的挑战\t5\n        1.2　线程\t6\n        1.2.1　什么是线程\t6\n        1.2.2　进程和线程\t7\n        1.2.3　编程语言中的线程对象\t8\n        1.2.4　SimpleThreads示例\t11\n        1.3　通信\t14\n        1.3.1　网络基础知识\t14\n        1.3.2　网络I/O模型的演进\t19\n        1.3.3　远程过程调用（RPC）\t33\n        1.3.4　面向消息的通信\t41\n        1.4 一致性\t43\n        1.4.1　以数据为中心的一致性模型\t44\n        1.4.2　以客户为中心的一致性\t45\n        1.5　容错性\t46\n        1.5.1　基本概念\t46\n        1.5.2　故障分类\t47\n        1.5.3　使用冗余来掩盖故障\t48\n        1.5.4　分布式提交\t48\n        1.6　CAP理论\t52\n        1.6.1　什么是CAP理论\t52\n        1.6.2　为什么说CAP只能三选二\t53\n        1.6.3　CAP常见模型\t55\n        1.6.4　CAP的意义\t56\n        1.6.5　CAP最新发展\t56\n        1.7　安全性\t57\n        1.7.1　基本概念\t58\n        1.7.2　加密算法\t60\n        1.7.3　安全通道\t63\n        1.7.4　访问控制\t72\n        1.8　并发\t74\n        1.8.1　线程与并发\t75\n        1.8.2　并发与并行\t75\n        1.8.3　并发带来的风险\t76\n        1.8.4　同步（Synchronization）\t78\n        1.8.5  原子访问（Atomic Access）\t83\n        第2章　分布式系统架构体系\t85\n        2.1　基于对象的体系结构\t86\n        2.1.1　分布式对象\t86\n        2.1.2　微软DCOM（COM+）\t87\n        2.1.3　CORBA\t88\n        2.1.4　Java RMI\t90\n        2.2　面向服务的架构（SOA）\t93\n        2.2.1　架构VS.标准\t94\n        2.2.2　SOA的基本概念\t95\n        2.2.3　基于Web Services的SOA\t97\n        2.2.4　SOA的演变\t112\n        2.3　REST风格的架构\t112\n        2.3.1　什么是REST\t112\n        2.3.2　REST有哪些特征\t113\n        2.3.3　Java实现REST的例子\t115\n        2.3.4　REST API最佳实践\t125\n        2.4　微服务架构（MSA）\t128\n        2.4.1　什么是MSA\t128\n        2.4.2　MSA VS. SOA\t130\n        2.4.3　何时采用MSA\t134\n        2.4.4　如何构建微服务\t135\n        2.5　容器技术\t139\n        2.5.1　虚拟化技术\t139\n        2.5.2　容器VS.虚拟机\t139\n        2.5.3　基于容器的持续部署\t142\n        2.6　Serverless架构\t149\n        2.6.1　什么是Serverless架构\t150\n        2.6.2　Serverless典型的应用场景\t151\n        2.6.3　常见的Serverless框架\t153\n        2.6.4　Serverless架构原则\t155\n        2.6.5　例子：使用Serverless实现游戏全球同服\t157\n        第3章　分布式消息服务\t164\n        3.1　Apache ActiveMQ\t165\n        3.1.1　Apache ActiveMQ简介\t165\n        3.1.2　Apache ActiveMQ安装配置\t166\n        3.1.3  例子：producer-consumer\t173\n        3.1.4  例子：使用JMX来监控ActiveMQ\t174\n        3.1.5  例子：使用Java实现producer-consumer\t176\n        3.2  RabbitMQ\t180\n        3.2.1  RabbitMQ简介\t180\n        3.2.2  RabbitMQ安装配置\t181\n        3.2.3　例子：Work Queues\t185\n        3.2.4　例子：Publish/Subscribe\t191\n        3.2.5　例子：Routing\t195\n        3.2.6　例子：Topics\t200\n        3.2.7  例子：RPC\t204\n        3.3  RocketMQ\t210\n        3.3.1  RocketMQ简介\t210\n        3.3.2  RocketMQ安装配置\t213\n        3.3.3  例子：使用Java实现producer-consumer\t214\n        3.3.4  RocketMQ最佳实践\t219\n        3.4  Apache Kafka\t223\n        3.4.1  Apache Kafka简介\t224\n        3.4.2  Apache Kafka的核心概念\t225\n        3.4.3  Apache Kafka的使用场景\t228\n        3.4.4  Apache Kafka的安装、配置、使用\t229\n        第4章　分布式计算\t236\n        4.1　MapReduce\t237\n        4.1.1　MapReduce简介\t237\n        4.1.2  MapReduce的编程模型\t238\n        4.1.3  MapReduce的实现\t243\n        4.1.4　MapReduce的使用技巧\t248\n        4.2  Apache Hadoop\t251\n        4.2.1  Apache Hadoop简介\t252\n        4.2.2  Apache Hadoop核心组件\t253\n        4.2.3  Apache Hadoop单节点上的安装配置\t254\n        4.2.4  Apache Hadoop集群上的安装配置\t258\n        4.2.5  例子：词频统计WordCount程序\t267\n        4.3  Apache Spark\t272\n        4.3.1  Apache Spark简介\t272\n        4.3.2  Apache Spark与Apache Hadoop的关系\t274\n        4.3.3  Apache Spark 2.0的新特性\t275\n        4.3.4　Apache Spark的安装和使用\t279\n        4.3.5　Apache Spark集群模式\t280\n        4.4  Apache Mesos\t282\n        4.4.1  Apache Mesos简介\t283\n        4.4.2　Apache Mesos的安装、使用\t285\n        4.4.3  设计高可用的Mesos framework\t289\n        第5章　分布式存储\t296\n        5.1　Bigtable\t297\n        5.1.1　Bigtable简介\t297\n        5.1.2　Bigtable的数据模型\t298\n        5.1.3　Bigtable的实现\t300\n        5.1.4　Bigtable的性能优化\t304\n        5.2　Apache HBase\t308\n        5.2.1　Apache HBase简介\t308\n        5.2.2　Apache HBase基本概念\t310\n        5.2.3　Apache HBase架构\t318\n        5.2.4　Apache HBase的安装、配置、使用\t332\n        5.2.5　本地伪分布式\t336\n        5.2.6　完全分布式\t338\n        5.3　Apache Cassandra\t342\n        5.3.1　Apache Cassandra简介\t342\n        5.3.2　Apache Cassandra的应用场景\t345\n        5.3.3　Apache Cassandra的架构、数据模型\t346\n        5.3.4　用于配置Apache Cassandra的核心组件\t347\n        5.3.5　Apache Cassandra的安装、配置、使用\t349\n        5.4　Memcached\t352\n        5.4.1　Memcached简介\t352\n        5.4.2　Memcached的架构\t353\n        5.4.3　Memcached的安装、使用\t355\n        5.4.4　Memcached客户端\t358\n        5.5　Redis\t370\n        5.5.1　Redis简介\t370\n        5.5.2　Redis的下载、安装、使用\t372\n        5.5.3　Redis的数据类型及抽象\t372\n        5.6　MongoDB\t392\n        5.6.1　MongoDB简介\t392\n        5.6.2　MongoDB的安装、配置、运行\t394\n        5.6.3　MongoDB核心概念\t401\n        5.6.4　MongoDB的数据模型\t406\n        5.6.5　示例：Java连接MongoDB\t420\n        第6章　分布式监控\t422\n        6.1　Nagios\t423\n        6.1.1　Nagios简介\t423\n        6.1.2　Nagios的安装、使用\t424\n        6.1.3　Nagios监控\t428\n        6.1.4　Nagios插件\t446\n        6.2　Zabbix\t448\n        6.2.1　Zabbix简介\t449\n        6.2.2　安装Zabbix\t451\n        6.2.3　Zabbix对于容器的支持\t460\n        6.2.4　Zabbix基本概念\t463\n        6.3　Consul\t474\n        6.3.1　Consul简介\t475\n        6.3.2　Consul架构\t476\n        6.3.3　Consul的安装和使用\t478\n        6.3.4　Consul agent\t492\n        6.4　ZooKeeper\t501\n        6.4.1　ZooKeeper简介\t501\n        6.4.2　ZooKeeper的安装和使用\t505\n        6.4.3　ZooKeeper内部工作原理\t509\n        6.4.4　例子：ZooKeeper实现barrier和producer-consumer queue\t514\n        第7章　分布式版本控制系统\t522\n        7.1　Bazaar\t523\n        7.1.1　Bazaar简介\t523\n        7.1.2　Bazaar的核心概念\t525\n        7.1.3　Bazaar的安装\t526\n        7.1.4　Bazaar的使用\t528\n        7.2　Mercurial\t533\n        7.2.1　Mercurial简介\t533\n        7.2.2　Mercurial的核心概念\t533\n        7.2.3　Mercurial的安装\t537\n        7.2.4　Mercurial的使用\t538\n        7.3　Git\t545\n        7.3.1　Git简介\t545\n        7.3.2　Git的安装\t546\n        7.3.3　Git的基础概念\t548\n        7.3.4　Git的使用\t551\n        第8章　RESTful API、微服务及容器技术\t578\n        8.1　Jersey\t579\n        8.1.1　Jersey简介\t579\n        8.1.2　Jersey的模块和依赖\t580\n        8.1.3　JAX-RS核心概念\t583\n        8.1.4　例子：用SSE构建实时Web应用\t595\n        8.2　Spring Boot\t603\n        8.2.1　Spring Boot简介\t603\n        8.2.2　Spring Boot的安装\t604\n        8.2.3　Spring Boot的使用\t610\n        8.2.4　Spring Boot的属性与配置\t615\n        8.3　Docker\t620\n        8.3.1　Docker简介\t621\n        8.3.2　Docker的特性\t621\n        8.3.3　Docker的概念和原理\t622\n        8.3.4　Docker Engine的安装\t628\n        8.3.5　Docker的使用\t633\n        第9章　淘宝网：“双11”神话的缔造者\t636\n        9.1　从LAMP到Java平台的转变\t637\n        9.1.1　淘宝网的诞生与发展\t637\n        9.1.2　“平民英雄”LAMP架构\t638\n        9.1.3　数据库更改为Oracle\t639\n        9.1.4　向Java平台转变\t642\n        9.2　坚定不移地走“去IOE”的道路\t643\n        9.2.1　使用小型机、EMC存储\t644\n        9.2.2　考虑“去IOE”\t644\n        9.2.3　如何去“I”\t646\n        9.2.4　如何去“O”\t649\n        9.2.5　如何去“E”\t650\n        9.3　打造云计算，决战“双11”\t653\n        9.3.1　“大淘宝”战略简介\t653\n        9.3.2　成立阿里云，专注云计算\t656\n        9.3.3　利用大数据优化物流\t660\n        9.3.4　技术是决胜“双11”的关键\t661\n        第10章　Twitter：实时信息传递的王者\t664\n        10.1　缓存，让响应更快\t665\n        10.1.1　Twitter的诞生\t665\n        10.1.2　RoR的蛮荒时代\t666\n        10.1.3　使用Memcached\t667\n        10.2　服务拆分与治理\t668\n        10.2.1　关系数据库不是万灵药\t668\n        10.2.2　系统拆分，平台转换\t670\n        10.2.3　Finagle\t670\n        10.3　抗击流量的洪流\t672\n        10.3.1　业务的重新设计\t673\n        10.3.2　Storm处理实时的大数据\t675\n        10.3.3　从Storm到Heron\t676\n        参考文献\t680\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 25 条",
      "commentsList": [
        {
          "user": "Loading",
          "ratingScore": "很差",
          "ratingTime": "2017-03-17",
          "thumbsUpCount": "6",
          "content": "全是安装部署的东西，到处抄，不知道你们这种给五颗星的是怎么想的"
        },
        {
          "user": "厚积薄发",
          "ratingScore": "很差",
          "ratingTime": "2017-09-13",
          "thumbsUpCount": "1",
          "content": "哎"
        },
        {
          "user": "[已注销]",
          "ratingScore": "很差",
          "ratingTime": "2019-04-02",
          "thumbsUpCount": "0",
          "content": "随便翻了下Mafka部分就发现关于Consumer/ConsumerGroup的基本错误。Redis的部分基本都是概念。案例分析选淘宝双十一，有种过于熟悉的感觉。作者像是为了追求大而全，匆忙上架。"
        },
        {
          "user": "Treaser",
          "ratingScore": "很差",
          "ratingTime": "2019-09-26",
          "thumbsUpCount": "0",
          "content": "这本书的作者的豆瓣账号把自己写的一堆烂书都打了5星。于是我赶紧打个1星平衡一下。烂到令人窒息，和我们使用这本书作为教材的老师一样烂。"
        },
        {
          "user": "hoenhime",
          "ratingScore": "还行",
          "ratingTime": "2018-05-29",
          "thumbsUpCount": "0",
          "content": "基础概念讲的全面，但每个点都不够深入"
        },
        {
          "user": "梦而已",
          "ratingScore": "较差",
          "ratingTime": "2017-12-15",
          "thumbsUpCount": "0",
          "content": "额。。。。。概念好多。"
        },
        {
          "user": "0Aileen0",
          "ratingScore": "力荐",
          "ratingTime": "2017-03-17",
          "thumbsUpCount": "1",
          "content": "很不错的书，值得推荐"
        },
        {
          "user": "tremendous",
          "ratingScore": "很差",
          "ratingTime": "2019-08-25",
          "thumbsUpCount": "0",
          "content": "随便翻了下Mafka部分就发现关于Consumer/ConsumerGroup的基本错误。Redis的部分基本都是概念。案例分析选淘宝双十一，有种过于熟悉的感觉。作者像是为了追求大而全，匆忙上架。"
        },
        {
          "user": "尧先生",
          "ratingScore": "很差",
          "ratingTime": "2018-01-30",
          "thumbsUpCount": "1",
          "content": "给你一颗星怕你骄傲，每个章节都是一个入门材料吧。"
        },
        {
          "user": "Zane",
          "ratingScore": "较差",
          "ratingTime": "2018-01-08",
          "thumbsUpCount": "0",
          "content": "只为前两章。"
        }
      ]
    }
  },
  {
    "title": "分布式服务框架：原理与实践",
    "bookUrl": "https://book.douban.com/subject/26702824/",
    "authorInfo": "李林锋 ",
    "pubInfo": " 电子工业出版社 / 2016-1-15 / 65.00元",
    "bookInfo": {
      "img": [
        "https://img3.doubanio.com/view/subject/l/public/s28378000.jpg",
        "https://img3.doubanio.com/view/subject/s/public/s28378000.jpg"
      ],
      "originalName": "",
      "averageRating": " 6.8 ",
      "ratersCount": "147",
      "ratings": [
        "4.1%",
        "36.7%",
        "47.6%",
        "8.8%",
        "2.7%"
      ],
      "bookIntro": "《分布式服务框架：原理与实践》作者具有丰富的分布式服务框架、平台中间件的架构设计和实践经验，主导设计的华为分布式服务框架已经在全球数十个国家成功商用。《分布式服务框架：原理与实践》依托工作实践，从分布式服务框架的架构设计原理到实践经验总结，涵盖了服务化架构演进、订阅发布、路由策略、集群容错和服务治理等多个专题，全方位剖析服务框架的设计原则和原理，结合大量实践案例与读者分享作者对分布式服务框架设计和运维的体会。同时，对基于Docker部署微服务以及基于微服务架构开发、部署和运维业务系统进行了详细介绍。",
      "authorIntro": "李林锋，现任华为PaaS平台架构师，8年JavaNIO通信框架、平台中间件架构设计和开发经验，主导设计和开发的华为分布式服务框架已经在全球数十个国家成功商用。精通Netty、Mina、RPC框架、企业ESB总线、分布式服务框架等技术，公司总裁技术创新奖获得者。",
      "bookToc": "第1章　应用架构演进 1\n        1.1 传统垂直应用架构 2\n        1.1.1 垂直应用架构介绍 2\n        1.1.2 垂直应用架构面临的挑战 4\n        1.2 RPC架构 6\n        1.2.1　RPC框架原理 6\n        1.2.2　最简单的RPC框架实现 8\n        1.2.3　业界主流RPC框架 14\n        1.2.4　RPC框架面临的挑战 17\n        1.3 SOA服务化架构 18\n        1.3.1　面向服务设计的原则 18\n        1.3.2　服务治理 19\n        1.4 微服务架构 21\n        1.4.1　什么是微服务 21\n        1.4.2　微服务架构对比SOA 22\n        1.5　总结 23\n        第2章　分布式服务框架入门 25\n        2.1　分布式服务框架诞生背景 26\n        2.1.1 应用从集中式走向分布式 26\n        2.1.2 亟需服务治理 28\n        2.2 业界分布式服务框架介绍 29\n        2.2.1　阿里Dubbo 30\n        2.2.2　淘宝HSF 33\n        2.2.3　亚马逊Coral Service 35\n        2.3 分布式服务框架设计 36\n        2.3.1　架构原理 36\n        2.3.2　功能特性 37\n        2.3.3　性能特性 39\n        2.3.4　可靠性 39\n        2.3.5　服务治理 40\n        2.4 总结 41\n        第3章　通信框架 42\n        3.1　关键技术点分析 43\n        3.1.1 长连接还是短连接 43\n        3.1.2 BIO还是NIO 43\n        3.1.3 自研还是选择开源NIO框架 46\n        3.2 功能设计 47\n        3.2.1　服务端设计 48\n        3.2.2　客户端设计 50\n        3.3 可靠性设计 53\n        3.3.1　链路有效性检测 54\n        3.3.2　断连重连机制 56\n        3.3.3　消息缓存重发 57\n        3.3.4　资源优雅释放 58\n        3.4 性能设计 59\n        3.4.1　性能差的三宗罪 59\n        3.4.2　通信性能三原则 60\n        3.4.3　高性能之道 61\n        3.5 最佳实践 61\n        3.6 总结 64\n        第4章　序列化与反序列化 65\n        4.1　几个关键概念澄清 66\n        4.1.1 序列化与通信框架的关系 66\n        4.1.2 序列化与通信协议的关系 66\n        4.1.3 是否需要支持多种序列化方式 67\n        4.2 功能设计 67\n        4.2.1　功能丰富度 67\n        4.2.2　跨语言支持 68\n        4.2.3　兼容性 69\n        4.2.4　性能 70\n        4.3 扩展性设计 71\n        4.3.1　内置的序列化/反序列化功能类 71\n        4.3.2　反序列化扩展 72\n        4.3.3　序列化扩展 75\n        4.4 最佳实践 77\n        4.4.1　接口的前向兼容性规范 77\n        4.4.2　高并发下的稳定性 78\n        4.5 总结 78\n        第5章　协议栈 79\n        5.1　关键技术点分析 80\n        5.1.1 是否必须支持多协议 80\n        5.1.2 公有协议还是私有协议 80\n        5.1.3 集成开源还是自研 81\n        5.2 功能设计 82\n        5.2.1　功能描述 82\n        5.2.2　通信模型 82\n        5.2.3　协议消息定义 84\n        5.2.4　协议栈消息序列化支持的字段类型 85\n        5.2.5　协议消息的序列化和反序列化 86\n        5.2.6　链路创建 89\n        5.2.7　链路关闭 90\n        5.3 可靠性设计 90\n        5.3.1　客户端连接超时 90\n        5.3.2　客户端重连机制 91\n        5.3.3　客户端重复握手保护 91\n        5.3.4　消息缓存重发 92\n        5.3.5　心跳机制 92\n        5.4 安全性设计 92\n        5.5 最佳实践—协议的前向兼容性 94\n        5.6 总结 95\n        第6章　服务路由 96\n        6.1　透明化路由 97\n        6.1.1 基于服务注册中心的订阅发布 97\n        6.1.2 消费者缓存服务提供者地址 98\n        6.2 负载均衡 98\n        6.2.1　随机 98\n        6.2.2　轮循 99\n        6.2.3　服务调用时延 99\n        6.2.4　一致性哈希 100\n        6.2.5　粘滞连接 101\n        6.3 本地路由优先策略 102\n        6.3.1　injvm模式 102\n        6.3.2　innative模式 102\n        6.4 路由规则 103\n        6.4.1　条件路由规则 103\n        6.4.2　脚本路由规则 104\n        6.5　路由策略定制 105\n        6.6　配置化路由 106\n        6.7　最佳实践—多机房路由 107\n        6.8 总结 108\n        第７章　集群容错 109\n        7.1　集群容错场景 110\n        7.1.1 通信链路故障 110\n        7.1.2 服务端超时 111\n        7.1.3 服务端调用失败 111\n        7.2 容错策略 112\n        7.2.1　失败自动切换（Failover） 112\n        7.2.2　失败通知（Failback） 113\n        7.2.3　失败缓存（Failcache） 113\n        7.2.4　快速失败（Failfast） 114\n        7.2.5　容错策略扩展 114\n        7.3 总结 115\n        第8章　服务调用 116\n        8.1　几个误区 117\n        8.1.1 NIO就是异步服务 117\n        8.1.2 服务调用天生就是同步的 118\n        8.1.3 异步服务调用性能更高 120\n        8.2 服务调用方式 120\n        8.2.1　同步服务调用 120\n        8.2.2　异步服务调用 121\n        8.2.3　并行服务调用 125\n        8.2.4　泛化调用 129\n        8.3 最佳实践 130\n        8.4 总结 131\n        第９章　服务注册中心 132\n        9.1　几个概念 133\n        9.1.1 服务提供者 133\n        9.1.2 服务消费者 133\n        9.1.3 服务注册中心 133\n        9.2 关键功能特性设计 134\n        9.2.1　支持对等集群 135\n        9.2.2　提供CRUD接口 136\n        9.2.3　安全加固 136\n        9.2.4　订阅发布机制 137\n        9.2.5　可靠性 138\n        9.3　基于ZooKeeper的服务注册中心设计 139\n        9.3.1　服务订阅发布流程设计 139\n        9.3.2　服务健康状态检测 141\n        9.3.3　对等集群防止单点故障 142\n        9.3.4　变更通知机制 144\n        9.4 总结 144\n        第10章　服务发布和引用 145\n        10.1　服务发布设计 146\n        10.1.1　服务发布的几种方式 146\n        10.1.2　本地实现类封装成代理 148\n        10.1.3　服务发布成指定协议 148\n        10.1.4　服务提供者信息注册 149\n        10.2 服务引用设计 150\n        10.2.1　本地接口调用转换成远程服务调用 150\n        10.2.2　服务地址本地缓存 151\n        10.2.3　远程服务调用 151\n        10.3　最佳实践 152\n        10.3.1　对等设计原则 152\n        10.3.2　启动顺序问题 153\n        10.3.3　同步还是异步发布服务 153\n        10.3.4　警惕网络风暴 154\n        10.3.5　配置扩展 154\n        10.4 总结 156\n        第11章　服务灰度发布 157\n        11.1　服务灰度发布流程设计 158\n        11.1.1　灰度环境准备 158\n        11.1.2　灰度规则设置 159\n        11.1.3　灰度规则下发 160\n        11.1.4　灰度路由 161\n        11.1.5　失败回滚 162\n        11.1.6　灰度发布总结 163\n        11.2　总结 163\n        第12章　参数传递 164\n        12.1　内部传参 165\n        12.1.1　业务内部参数传递 165\n        12.1.2　服务框架内部参数传递 168\n        12.2　外部传参 169\n        12.2.1　通信协议支持 169\n        12.2.2　传参接口定义 170\n        12.3　最佳实践 171\n        12.3.1　防止参数互相覆盖 171\n        12.3.2　参数生命周期管理 171\n        12.4　总结 172\n        第13章　服务多版本 173\n        13.1　服务多版本管理设计 174\n        13.1.1　服务版本号管理 174\n        13.1.2　服务提供者 175\n        13.1.3　服务消费者 175\n        13.1.4　基于版本号的服务路由 176\n        13.1.5　服务热升级 177\n        13.2　与OSGi的对比 178\n        13.2.1　模块化开发 179\n        13.2.2　插件热部署和热升级 184\n        13.2.3　不使用OSGi的其他理由 185\n        13.3　总结 185\n        第14章　流量控制 186\n        14.1　静态流控 187\n        14.1.1　传统静态流控设计方案 187\n        14.1.2　传统方案的缺点 188\n        14.1.3　动态配额分配制 188\n        14.1.4　动态配额申请制 190\n        14.2　动态流控 191\n        14.2.1　动态流控因子 192\n        14.2.2　分级流控 192\n        14.3　并发控制 193\n        14.3.1　服务端全局控制 193\n        14.3.2　服务消费者流控 194\n        14.4　连接控制 195\n        14.4.1　服务端连接数流控 195\n        14.4.2　服务消费者连接数流控 195\n        14.5　并发和连接控制算法 195\n        14.6　总结 197\n        第15章　服务降级 198\n        15.1　屏蔽降级 199\n        15.1.1　屏蔽降级的流程 199\n        15.1.2　屏蔽降级的设计实现 200\n        15.2　容错降级 202\n        15.2.1　容错降级的工作原理 202\n        15.2.2　运行时容错降级 204\n        15.3　业务层降级 205\n        15.4　总结 205\n        第16章　服务优先级调度 207\n        16.1　设置服务优先级 208\n        16.2　线程调度器方案 209\n        16.3　Java优先级队列 210\n        16.4　加权优先级队列 211\n        16.5　服务迁入迁出 212\n        16.6　总结 213\n        第17章　服务治理 214\n        17.1　服务治理技术的历史变迁 215\n        17.1.1　SOA Governance 215\n        17.1.2　分布式服务框架服务治理 217\n        17.1.3　AWS云端微服务治理 217\n        17.2　应用服务化后面临的挑战 218\n        17.2.1　跨团队协作问题 219\n        17.2.2　服务的上下线管控 220\n        17.2.3　服务安全 220\n        17.2.4　服务SLA保障 221\n        17.2.5　故障快速定界定位 221\n        17.3　服务治理 222\n        17.3.1　服务治理架构设计 223\n        17.3.2　运行态服务治理功能设计 225\n        17.3.3　线下服务治理 232\n        17.3.4　安全和权限管理 234\n        17.4　总结 237\n        第18章　分布式消息跟踪 239\n        18.1　业务场景分析 240\n        18.1.1　故障的快速定界定位 240\n        18.1.2　调用路径分析 241\n        18.1.3　调用来源和去向分析 242\n        18.2　分布式消息跟踪系统设计 242\n        18.2.1　系统架构 243\n        18.2.2　埋点日志 244\n        18.2.3　采样率 247\n        18.2.4　采集和存储埋点日志 248\n        18.2.5　计算和展示 249\n        18.2.6　调用链扩展 251\n        18.3　总结 251\n        第19章　可靠性设计 253\n        19.1　服务状态检测 254\n        19.1.1　基于服务注册中心状态检测 254\n        19.1.2　链路有效性状态检测机制 255\n        19.2　服务健康度检测 256\n        19.3　服务故障隔离 257\n        19.3.1　进程级故障隔离 257\n        19.3.2　VM级故障隔离 259\n        19.3.3　物理机故障隔离 260\n        19.3.4　机房故障隔离 261\n        19.4　其他可靠性特性 262\n        19.4.1　服务注册中心 262\n        19.4.2　监控中心 262\n        19.4.3　服务提供者 262\n        19.5　总结 263\n        第20章　微服务架构 264\n        20.1　微服务架构产生的历史背景 265\n        20.1.1　研发成本挑战 265\n        20.1.2　运维成本高 267\n        20.1.3　新需求上线周期长 268\n        20.2　微服务架构带来的改变 268\n        20.2.1　应用解耦 268\n        20.2.2　分而治之 270\n        20.2.3　敏捷交付 271\n        20.3　微服务架构解析 271\n        20.3.1　微服务划分原则 272\n        20.3.2　开发微服务 272\n        20.3.3　基于Docker容器部署微服务 274\n        20.3.4　治理和运维微服务 277\n        20.3.5　特点总结 278\n        20.4　总结 279\n        第21章　服务化最佳实践 280\n        21.1　性能和时延问题 281\n        21.1.1　RPC框架高性能设计 281\n        21.1.2　业务最佳实践 285\n        21.2　事务一致性问题 286\n        21.2.1　分布式事务设计方案 287\n        21.2.2　分布式事务优化 288\n        21.3　研发团队协作问题 289\n        21.3.1　共用服务注册中心 290\n        21.3.2　直连提供者 290\n        21.3.3　多团队进度协同 291\n        21.3.4　服务降级和Mock测试 291\n        21.3.5　协同调试问题 292\n        21.3.6　接口前向兼容性 292\n        21.4　总结 292\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 81 条",
      "commentsList": [
        {
          "user": "飞林沙",
          "ratingScore": "还行",
          "ratingTime": "2016-03-22",
          "thumbsUpCount": "2",
          "content": "概要性地把分布式服务框架的每个部分都大概介绍下，没什么干货，可以作为一个索引大致了解，然后逐个攻破。"
        },
        {
          "user": "檀越863",
          "ratingScore": "较差",
          "ratingTime": "2016-02-29",
          "thumbsUpCount": "5",
          "content": "泛泛而谈，跟第一本书一样不负责。。。"
        },
        {
          "user": "Croft",
          "ratingScore": 0.0,
          "ratingTime": "",
          "thumbsUpCount": "2",
          "content": "全面但不深入，适合快速了解分布式框架概貌"
        },
        {
          "user": "惟以不永怀",
          "ratingScore": "推荐",
          "ratingTime": "2017-05-11",
          "thumbsUpCount": "2",
          "content": "一本讲道而不是讲术的书，从一个较高的视角详细描述了设计分布式框架需要关注的各个部分，写的很棒，不明白有些同学为什么打两星三星，一般来说能写原理而不写具体代码的作者，层次都比较高，有些作者是一叶障目，只看到一小块，而有些作者看到却是全局，我认为李林锋应该属于这类人"
        },
        {
          "user": "Joard Spike",
          "ratingScore": "推荐",
          "ratingTime": "2016-07-10",
          "thumbsUpCount": "1",
          "content": "可与《大型网站系统与Java中间件开发实践》，dubbo源码三者一起参照阅读。本身的提纲写得不错，第二章总结得很好！有一点需要明确，作者极力推荐netty作为基石，但企业级不一定需要走TCP，HTTP／JSON也行，依业务和团队而定"
        },
        {
          "user": "casanova80",
          "ratingScore": "较差",
          "ratingTime": "2016-07-06",
          "thumbsUpCount": "0",
          "content": "水分太多"
        },
        {
          "user": "thinker",
          "ratingScore": "推荐",
          "ratingTime": "2016-05-06",
          "thumbsUpCount": "0",
          "content": "做一个纲要式的了解还可以，深入需要其他资料的辅助"
        },
        {
          "user": "somejunbao",
          "ratingScore": 0.0,
          "ratingTime": "",
          "thumbsUpCount": "0",
          "content": "分布式服务框架、网络框架、服务调用、服务治理"
        },
        {
          "user": "杨嘉捷",
          "ratingScore": "还行",
          "ratingTime": "2019-01-28",
          "thumbsUpCount": "0",
          "content": "更多是以Netty为例来讲解这些分布式相关的知识结构"
        },
        {
          "user": "康康",
          "ratingScore": "推荐",
          "ratingTime": "2016-07-14",
          "thumbsUpCount": "0",
          "content": "在分布式框架上讲解的非常系统。"
        }
      ]
    }
  },
  {
    "title": "EnterpriseMicroservices",
    "bookUrl": "https://book.douban.com/subject/30234113/",
    "authorInfo": "Ken Finnigan ",
    "pubInfo": " Manning Publications / 2018-11-5 / USD 49.99",
    "bookInfo": {
      "img": [
        "https://img9.doubanio.com/view/subject/l/public/s29936076.jpg",
        "https://img9.doubanio.com/view/subject/s/public/s29936076.jpg"
      ],
      "originalName": "",
      "averageRating": 0.0,
      "ratersCount": 0,
      "ratings": [],
      "bookIntro": "Enterprise Java Microservices teaches you to design and build JVM-based microservices applications. You'll start by learning how microservices designs compare to traditional Java EE applications. Always practical, author Ken Finnigan introduces big-picture concepts along with the tools and techniques you'll need to implement them. You'll discover ecosystem components like Netflix Hystrix for fault tolerance and master the Just enough Application Server (JeAS) approach. To ensure smooth operations, you'll also examine monitoring, security, testing, and deploying to the cloud.",
      "authorIntro": "Ken Finnigan has worked as an engineer and consultant for nearly 20 years. He currently co-leads the development of WildFly Swarm for Red Hat.",
      "bookToc": "PART 1 MICROSERVICES BASICS\n        Enterprise Java microservices\n        Developing a simple RESTful microservice\n        Just enough Application Server for microservices\n        Microservices testing\n        Cloud native development\n        PART 2 - IMPLEMENTING ENTERPRISE JAVA MICROSERVICES\n        Consuming microservices\n        Discovering microservices for consumption\n        Strategies for fault tolerance and monitoring\n        Securing a microservice\n        Architecting a microservice hybrid\n        Data streaming with Apache Kafka\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 1 条",
      "commentsList": [
        {
          "user": "惟贤勍",
          "ratingScore": "还行",
          "ratingTime": "2020-02-01",
          "thumbsUpCount": "0",
          "content": "纯jee集成微服务的，懂个规范名，大体知道干啥用的，囫囵过了一遍，团队开发基于spring boot+cloud，基本不涉及jee，做个拓展吧"
        }
      ]
    }
  },
  {
    "title": "未来架构：从服务化到云原生",
    "bookUrl": "https://book.douban.com/subject/30477839/",
    "authorInfo": "张亮、吴晟、敖小剑、宋净超 ",
    "pubInfo": " 电子工业出版社 / 2019-3 / 99.00元",
    "bookInfo": {
      "img": [
        "https://img1.doubanio.com/view/subject/l/public/s32264667.jpg",
        "https://img1.doubanio.com/view/subject/s/public/s32264667.jpg"
      ],
      "originalName": "",
      "averageRating": " 6.1 ",
      "ratersCount": "36",
      "ratings": [
        "11.1%",
        "33.3%",
        "38.9%",
        "13.9%",
        "2.8%"
      ],
      "bookIntro": "张亮 京东数科数据研发负责人，Apache ShardingSphere发起人兼PPMC成员。热爱分享，拥抱开源，主张代码优雅化，擅长以Java为主的分布式架构以及以Kubernetes和Mesos为主的云平台的构建。ShardingSphere已进入Apache软件基金会，是京东集团首个进入Apache的开源项目，也是Apache首个分布式数据库中间件。 吴晟 Apache SkyWalking创始人及PPMC成员，Apache ShardingSphere原型作者及PPMC成员，Apache Zipkin贡献者，Apache孵化器导师，CNCF基金会OpenTracing标准化委员会成员，W3C Trace Context规范贡献者。擅长分布式架构、性能监控与诊断、分布式追踪、云原生监控等领域。 敖小剑 具有十七年软件开发经验，资深码农，微服务专...(展开全部)",
      "authorIntro": "张亮 京东数科数据研发负责人，Apache ShardingSphere发起人兼PPMC成员。热爱分享，拥抱开源，主张代码优雅化，擅长以Java为主的分布式架构以及以Kubernetes和Mesos为主的云平台的构建。ShardingSphere已进入Apache软件基金会，是京东集团首个进入Apache的开源项目，也是Apache首个分布式数据库中间件。 吴晟 Apache SkyWalking创始人及PPMC成员，Apache ShardingSphere原型作者及PPMC成员，Apache Zipkin贡献者，Apache孵化器导师，CNCF基金会OpenTracing标准化委员会成员，W3C Trace Context规范贡献者。擅长分布式架构、性能监控与诊断、分布式追踪、云原生监控等领域。 敖小剑 具有十七年软件开发经验，资深码农，微服务专家，Cloud Native 拥护者，敏捷实践者，Service Mesh布道师，ServiceMesher中文社区联合创始人。专注于基础架构建设，对微服务、云计算等相关技术有着深入研究和独到见解。 宋净超 蚂蚁金服云原生布道师，ServiceMesher中文社区联合创始人，Kubernetes社区成员，Istio社区成员，《Cloud Native Go》《Python云原生》《云原生Java》等图书译者。",
      "bookToc": "第1章  云原生  1\n        1.1  互联网架构变迁  2\n        1.1.1  互联网架构的核心问题  2\n        1.1.2  从集中式架构到分布式架构  5\n        1.1.3  从分布式架构到云原生架构  10\n        1.2  什么是云原生  15\n        1.2.1  概述  15\n        1.2.2  云原生与十二要素  16\n        1.2.3  十二要素进阶  23\n        1.2.4  云原生与CNCF  24\n        第2章  远程通信  41\n        2.1  通信方式  41\n        2.1.1  通信协议  42\n        2.1.2  I/O模型  51\n        2.1.3  Java中的I/O  53\n        2.2  序列化  66\n        2.2.1  文本序列化  67\n        2.2.2  二进制Java序列化  68\n        2.2.3  二进制异构语言序列化  71\n        2.3  远程调用  78\n        2.3.1  核心概念  78\n        2.3.2  Java远程方法调用  79\n        2.3.3  异构语言RPC框架gRPC  82\n        第3章  配置  89\n        3.1  本地配置  89\n        3.2  配置集中化  90\n        3.3  配置中心和注册中心  91\n        3.4  读性能  92\n        3.5  变更实时性  93\n        3.6  可用性  94\n        3.7  数据一致性  96\n        第4章  服务治理  97\n        4.1  服务发现  97\n        4.1.1  服务发现概述  97\n        4.1.2  ZooKeeper  100\n        4.1.3  Eureka  109\n        4.2  负载均衡  112\n        4.2.1  服务端负载均衡  112\n        4.2.2  客户端负载均衡  115\n        4.3  限流  118\n        4.3.1  限流算法  119\n        4.3.2  限流实现方案  121\n        4.3.3  限流的维度与粒度  129\n        4.4  熔断  131\n        4.4.1  概述  131\n        4.4.2  熔断器模式  132\n        4.4.3  Hystrix  133\n        第5章  观察分布式服务  135\n        5.1  层次划分  136\n        5.2  核心概念  136\n        5.3  分布式追踪  138\n        5.3.1  概述  138\n        5.3.2  常见的开源解决方案  139\n        5.4  应用性能管理与可观察性平台  140\n        5.5  Apache SkyWalking  142\n        5.5.1  项目定位  142\n        5.5.2  SkyWalking 5核心架构  143\n        5.5.3  SkyWalking 5公开案例  146\n        5.5.4  SkyWalking 6可观察性分析平台  147\n        第6章  侵入式服务治理方案  157\n        6.1  Dubbo  157\n        6.1.1  Dubbo概述  158\n        6.1.2  核心流程  160\n        6.1.3  注册中心  160\n        6.1.4  负载均衡  162\n        6.1.5  远程通信  163\n        6.1.6  限流  164\n        6.1.7  治理中心  165\n        6.1.8  监控中心  165\n        6.1.9  DubboX的扩展  166\n        6.2  Spring Cloud  168\n        6.2.1  概述  168\n        6.2.2  开发脚手架Spring Boot  172\n        6.2.3  服务发现  174\n        6.2.4  负载均衡  176\n        6.2.5  熔断  178\n        6.2.6  远程通信  179\n        第7章  云原生生态的基石Kubernetes  181\n        7.1  Kubernetes架构  182\n        7.2  分层设计理念及架构模型  183\n        7.3  设计哲学  184\n        7.4  Kubernetes中的原语  185\n        7.4.1  Kubernetes中的对象  185\n        7.4.2  对象的期望状态与实际状态  186\n        7.4.3  描述Kubernetes对象  187\n        7.4.4  服务发现与负载均衡  188\n        7.4.5  安全性与权限管理  189\n        7.4.6  Sidecar设计模式  190\n        7.5  应用Kubernetes  190\n        7.6  Kubernetes与云原生生态  192\n        7.6.1  下一代云计算标准  192\n        7.6.2  当前存在的问题  192\n        7.6.3  未来趋势  193\n        第8章  跨语言服务治理方案Service Mesh  195\n        8.1  Service Mesh概述  195\n        8.1.1  Service Mesh的由来  195\n        8.1.2  Service Mesh的定义  196\n        8.1.3  Service Mesh详解  197\n        8.2  Service Mesh演进历程  200\n        8.2.1  远古时代的案例  200\n        8.2.2  微服务时代的现状  201\n        8.2.3  侵入式框架的痛点  202\n        8.2.4  解决问题的思路  206\n        8.2.5  Proxy模式的探索  207\n        8.2.6  Sidecar模式的出现  208\n        8.2.7  第一代Service Mesh  209\n        8.2.8  第二代Service Mesh  210\n        8.3  Service Mesh市场竞争  212\n        8.3.1  Service Mesh的萌芽期  212\n        8.3.2  急转直下的Linkerd  212\n        8.3.3  波澜不惊的Envoy  214\n        8.3.4  背负使命的Istio  214\n        8.3.5  背水一战的Buoyant  215\n        8.3.6  其他参与者  217\n        8.3.7  Service Mesh的国内发展情况  219\n        8.4  Istio  220\n        8.4.1  Istio概述  220\n        8.4.2  架构和核心组件  222\n        第9章  云原生数据架构  232\n        9.1  关系型数据库尚能饭否  232\n        9.1.1  优势  233\n        9.1.2  不足  234\n        9.2  未达预期的NoSQL  235\n        9.2.1  键值数据库  235\n        9.2.2  文档数据库  236\n        9.2.3  列族数据库  236\n        9.3  冉冉升起的NewSQL  237\n        9.3.1  新架构  238\n        9.3.2  透明化分片中间件  238\n        9.3.3  云数据库  239\n        9.4  云原生数据库中间件的核心功能  239\n        9.4.1  数据分片  239\n        9.4.2  分布式事务  258\n        9.4.3  数据库治理  265\n        第10章  分布式数据库中间件生态圈ShardingSphere  267\n        10.1  缘起  267\n        10.1.1  内部应用框架  268\n        10.1.2  开源历程  269\n        10.2  核心功能  271\n        10.2.1  数据分片  272\n        10.2.2  分布式事务  301\n        10.2.3  数据库治理  307\n        10.3  Sharding-JDBC  310\n        10.3.1  概述  310\n        10.3.2  使用说明  311\n        10.4  Sharding-Proxy  316\n        10.4.1  概述  316\n        10.4.2  使用说明  317\n        10.5  Database Mesh  317\n        10.5.1  概述  317\n        10.5.2  Service Mesh回顾  318\n        10.5.3  Database Mesh与Service Mesh的异同  319\n        10.5.4  Sharding-Sidecar  320\n        10.6  未来规划  321\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 18 条",
      "commentsList": [
        {
          "user": "饕盡天下",
          "ratingScore": "力荐",
          "ratingTime": "2019-06-18",
          "thumbsUpCount": "8",
          "content": "介绍的知识点还是很全面，很新的，美中不足的是广度有了，深度没有扩大。至于某些评论说的作者浮躁为了赚钱之类的，我只能说，作为跟作者还算熟络的前同事，年薪几百万的人“浪费”了自己两年左右的业余时间，专心写这么本书，仅仅是为了几万块的稿费，真是误解了作者的苦心。无非就是知识源自社区，回馈社区罢了。看个目录就浮躁了，才是真的该多读读书。"
        },
        {
          "user": "张岩kris",
          "ratingScore": "很差",
          "ratingTime": "2019-04-19",
          "thumbsUpCount": "3",
          "content": "好的技术书看目录就会让你特别激动。这书看目录我就没有读下去的欲望...国内技术风气浮躁，写书各种东拼西凑，缺失匠人精神"
        },
        {
          "user": "Zane",
          "ratingScore": "推荐",
          "ratingTime": "2019-10-02",
          "thumbsUpCount": "2",
          "content": "一本不错的说明书，为读者介绍了云原生各个方面可选用的来源技术方案。"
        },
        {
          "user": "tallongsun",
          "ratingScore": "推荐",
          "ratingTime": "2019-05-04",
          "thumbsUpCount": "0",
          "content": "五一小长假读完了，有收获。几位作者都是大牛，概括了cloud native的一些关键技术。最后一章讲sharding-sphere挺细致的，没细看，又机会做分布式数据库中间件的话，可以再回头看。"
        },
        {
          "user": "hiworld",
          "ratingScore": "较差",
          "ratingTime": "2019-06-12",
          "thumbsUpCount": "1",
          "content": "失望！！！\n抱着有收获的心态买了这本书，到了之后仔细看了一下。\n整体感受是失望！\n1.好几处奇葩翻译。比如disposibility翻译成已处理, agent翻译成探针。作者真的有相关的从业经历吗\n2.整体内容很浮。浮于表面"
        },
        {
          "user": "走过214318",
          "ratingScore": "推荐",
          "ratingTime": "2019-04-13",
          "thumbsUpCount": "0",
          "content": "讲的很宽泛~"
        },
        {
          "user": "d0ngw",
          "ratingScore": "推荐",
          "ratingTime": "2019-05-01",
          "thumbsUpCount": "0",
          "content": "涉及的领域很多，读下来感觉像指南"
        },
        {
          "user": "纯阳子",
          "ratingScore": "力荐",
          "ratingTime": "2019-10-28",
          "thumbsUpCount": "0",
          "content": "写这本书是需要勇气的，因为写这个主题的书很难不挨骂。理由有两点，一是这个题目太大，涉及到很多方面的技术，每一种技术要想说清楚都至少需要一本书，现在要放在一本书里边讲，就面临一个在材料方面如何取舍的问题，一旦选择不好必然会影响可读性。而事实上选择好的机会又微乎其微，不同的读者会有不同的知识图谱，只有当作者选择的内容刚好与读者的知识图谱相契合的时候，读者才会觉得刚刚好，才会有获得感和满足感，这也就意味着作者的任何一种选择都会注定只能满足特定一部分读者。比如作者在第2章《远程通信》里边加了一些通信协议的内容，这部分内容相信是作者根据自己写作的总体思路反复推敲、精挑细选出来的，但是尽管如此，相信只有极少数读者会在这部分内容上叫好。如果一个读者对TCP/IP协议很熟悉，那么（后文见书评正文）"
        },
        {
          "user": "伪文人想摇滚",
          "ratingScore": "还行",
          "ratingTime": "2019-11-04",
          "thumbsUpCount": "0",
          "content": "算是当前分布式系统和clouad native的入门级读物吧,很全面 但是也都是些泛泛之谈.适合初中级开发见见世面,唯一的精华部分应该是shardingSphere框架部分,毕竟是作者贡献的框架"
        },
        {
          "user": "meantobe",
          "ratingScore": "较差",
          "ratingTime": "2019-08-07",
          "thumbsUpCount": "0",
          "content": "为出书而出书，七拼八凑一些介绍性内容。"
        }
      ]
    }
  },
  {
    "title": "Docker——容器与容器云（第2版）",
    "bookUrl": "https://book.douban.com/subject/26894736/",
    "authorInfo": "浙江大学SEL实验室 ",
    "pubInfo": " 人民邮电出版社 / 2016-10 / 89.00元",
    "bookInfo": {
      "img": [
        "https://img3.doubanio.com/view/subject/l/public/s29101822.jpg",
        "https://img3.doubanio.com/view/subject/s/public/s29101822.jpg"
      ],
      "originalName": "",
      "averageRating": " 8.4 ",
      "ratersCount": "95",
      "ratings": [
        "31.6%",
        "49.5%",
        "13.7%",
        "4.2%",
        "1.1%"
      ],
      "bookIntro": "本书根据Docker 1.10版和Kubernetes 1.2版对第1版进行了全面更新，从实践者的角度出发，以Docker和Kubernetes为重点，沿着“基本用法介绍”到“核心原理解读”到“高级实践技巧”的思路，一本书讲透当前主流的容器和容器云技术，有助于读者在实际场景中利用Docker容器和容器云解决问题并启发新的思考。全书包括两部分，第一部分深入解读Docker容器技术，包括Docker架构与设计、核心源码解读和高级实践技巧；第二部分归纳和比较了三类基于Docker的主流容器云项目，包括专注Docker容器编排与部署的容器云、专注应用支撑的容器云以及一切皆容器的Kubernetes，进而详细解读了Kubernetes核心源码的设计与实现，最后介绍了几种典型场景下的Kubernetes最佳实践。",
      "authorIntro": "浙江大学软件工程实验室（Software Engineering Lab，SEL） 云计算团队组建于2011年，组织博士和硕士研究生搭建、分析和钻研开源的云计算技术，包括Docker、Kubernetes、Cloud Foundry、OpenStack、CloudStack、Eucalyptus、Convirt、OpenShift等，积极为开源社区贡献代码，管理和参与线上线下讨论社区，参加国内外云计算技术峰会并发言。以开源社区为技术交流研发平台，浙江大学SEL实验室在几年的时间里成长为一个充满热情、富有能力的云计算研发团队，也在国内外开源云计算社区，尤其是在Docker、Kubernetes和Cloud Foundry社区得到了广泛认可。",
      "bookToc": "第一部分　Docker深入解读\n        第1章　从容器到容器云　　2\n        1.1　云计算平台　　2\n        1.2　容器，新的革命　　3\n        1.3　进化：从容器到容器云　　7\n        第2章　Docker 基础　　8\n        2.1　Docker的安装　　8\n        2.2　Docker操作参数解读　　9\n        2.3　搭建你的第一个Docker应用栈　　16\n        2.3.1　Docker集群部署　　16\n        2.3.2　第一个Hello World　　17\n        2.3.3　开发、测试和发布一体化　　27\n        第3章　Docker核心原理解读　　28\n        3.1　Docker背后的内核知识　　28\n        3.1.1　namespace资源隔离　　28\n        3.1.2　cgroups资源限制　　45\n        3.2　Docker架构概览　　53\n        3.2.1　Docker daemon　　54\n        3.2.2　Docker client　　54\n        3.2.3　镜像管理　　54\n        3.2.4　execdriver、volumedriver、graphdriver　　55\n        3.2.5　network　　55\n        3.3　client和daemon　　56\n        3.3.1　client模式　　56\n        3.3.2　daemon模式　　58\n        3.3.3　从client到daemon　　64\n        3.4　libcontainer　　67\n        3.4.1　libcontainer的工作方式　　69\n        3.4.2　libcontainer实现原理　　70\n        3.4.3　使用runC与libcontainer进行交互　　75\n        3.5　Docker镜像管理　　77\n        3.5.1　什么是Docker镜像　　77\n        3.5.2　Docker镜像关键概念　　80\n        3.5.3　Docker镜像构建操作　　81\n        3.5.4　Docker镜像的分发方法　　84\n        3.6　Docker存储管理　　87\n        3.6.1　Docker镜像元数据管理　　87\n        3.6.2　Docker存储驱动　　89\n        3.7　Docker数据卷　　99\n        3.7.1　数据卷的使用方式　　100\n        3.7.2　数据卷原理解读　　105\n        3.8　Docker网络管理　　108\n        3.8.1　Docker网络基础　　108\n        3.8.2　Docker daemon网络配置原理　　116\n        3.8.3　libcontainer网络配置原理　　119\n        3.8.4　传统的link原理解析　　125\n        3.8.5　新的link介绍　　127\n        3.9　Docker与容器安全　　129\n        3.9.1　Docker的安全机制　　129\n        3.9.2　Docker安全问题　　135\n        3.9.3　Docker安全的解决方案　　139\n        第4章　Docker 高级实践技巧　　151\n        4.1　容器化思维　　151\n        4.1.1　SSH服务器的替代方案　　151\n        4.1.2　Docker内应用日志管理方案　　152\n        4.1.3　容器化思维及更多　　153\n        4.2　Docker高级网络实践　　153\n        4.2.1　玩转Linux networknamespace　　154\n        4.2.2　pipework原理解析　　159\n        4.2.3　pipework跨主机通信　　165\n        4.2.4　OVS划分VLAN　　170\n        4.2.5　OVS隧道模式　　174\n        4.3　Dockerfile最佳实践　　187\n        4.3.1　Dockerfile的使用　　187\n        4.3.2　Dockerfile实践心得　　191\n        4.4　Docker容器的监控手段　　193\n        4.4.1　Docker容器监控维度　　194\n        4.4.2　容器监控命令　　195\n        4.4.3　常用的容器监控工具　　197\n        4.5　容器化应用构建的基础：高可用配置中心　　201\n        4.5.1　etcd经典应用场景　　201\n        4.5.2　etcd实现原理　　206\n        第二部分　Docker云平台解读\n        第5章　构建自己的容器云　　222\n        5.1　再谈云平台的层次架构　　222\n        5.2　从小工到专家　　225\n        第6章　专注编排与部署：三剑客与Fleet　　230\n        6.1　编排小神器Fig/Compose　　230\n        6.1.1　再谈容器编排与部署　　230\n        6.1.2　Compose原理：一探究竟　　233\n        6.2　跨平台宿主环境管理工具Machine　　237\n        6.2.1　Machine与虚拟机软件　　237\n        6.2.2　Machine与IaaS平台　　238\n        6.2.3　Machine小结　　239\n        6.3　集群抽象工具Swarm　　240\n        6.3.1　Swarm简介　　240\n        6.3.2　试用Swarm　　241\n        6.3.3　Swarm集群的多种创建方式　　243\n        6.3.4　Swarm对请求的处理　　245\n        6.3.5　Swarm集群的调度策略　　245\n        6.3.6　Swarm集群高可用（HA）　　246\n        6.3.7　Swarm与Machine　　247\n        6.3.8　Swarm小结　　248\n        6.4　编排之秀Fleet　　248\n        6.4.1　旧问题新角度：Docker distro　　249\n        6.4.2　Fleet的原理剖析　　252\n        第7章　专注应用支撑和运行时：Flynn和Deis　　258\n        7.1　Flynn，一个小而美的两层架构　　258\n        7.1.1　第0层：容器云的基础设施　　259\n        7.1.2　第1层：容器云的功能框架　　259\n        7.1.3　Flynn体系架构与实现原理　　260\n        7.2　谈谈Deis与Flynn　　270\n        7.2.1　应用发布上的比较　　271\n        7.2.2　关于Deis的一些思考　　273\n        第8章　一切皆容器：Kubernetes　　274\n        8.1　Kubernetes是个什么样的项目　　274\n        8.2　Kubernetes的设计解读　　275\n        8.2.1　一个典型案例：Guestbook　　275\n        8.2.2　pod设计解读　　277\n        8.2.3　replication controller设计解读　　288\n        8.2.4　service的设计解读　　294\n        8.2.5　新一代副本控制器replica set　　306\n        8.2.6　Deployment　　307\n        8.2.7　DaemonSet　　312\n        8.2.8　ConfigMap　　312\n        8.2.9　Job　　317\n        8.2.10　Horizontal Pod Autoscaler　　318\n        8.3　Kubernetes核心组件解读　　320\n        8.3.1　Kubernetes的整体架构　　320\n        8.3.2　APIServer　　321\n        8.3.3　scheduler　　328\n        8.3.4　controller manager　　338\n        8.3.5　kubelet　　346\n        8.3.6　kube-proxy　　352\n        8.3.7　核心组件协作流程　　362\n        8.4　Kubernetes存储核心原理　　366\n        8.4.1　volume设计解读　　366\n        8.4.2　volume实现原理分析　　367\n        8.4.3　volume使用案例　　368\n        8.4.4　persistent volume　　371\n        8.5　Kubernetes网络核心原理　　372\n        8.5.1　单pod单IP模型　　373\n        8.5.2　pod和网络容器　　374\n        8.5.3　实现Kubernetes的网络模型　　377\n        8.6　Kubernetes多租户管理与资源控制　　381\n        8.6.1　namespace设计解读　　381\n        8.6.2　Kubernetes用户认证机制　　385\n        8.6.3　Kubernetes用户授权机制　　387\n        8.6.4　Kubernetes多维资源管理机制admission control　　390\n        8.7　Kubernetes高级实践　　402\n        8.7.1　应用健康检查　　402\n        8.7.2　高可用性　　405\n        8.7.3　日志　　408\n        8.7.4　集成DNS　　410\n        8.7.5　容器上下文环境　　412\n        8.8　Kubernetes未来动向　　414\n        8.8.1　Ubernetes　　414\n        8.8.2　petSet　　415\n        8.8.3　performance　　417\n        8.8.4　rescheduler　　417\n        8.8.5　OCI标准　　419\n        8.9　不要停止思考　　419\n        第三部分　附录\n        附录A　Docker的安装　　424\n        附录B　阅读Docker源代码的神兵利器　　432\n        附录C　快速熟悉开源项目　　441\n        附录D　cgroups的测试与使用　　444\n        附录E　cgroups子系统配置参数介绍　　448\n        附录F　Kubernetes的安装　　453\n        后记　　457\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 32 条",
      "commentsList": [
        {
          "user": "Parano",
          "ratingScore": "推荐",
          "ratingTime": "2017-04-07",
          "thumbsUpCount": "1",
          "content": "上次回国带回来的唯一一本书，docker 相关的章节还挺不错的"
        },
        {
          "user": "逐风刀客",
          "ratingScore": "推荐",
          "ratingTime": "2018-01-10",
          "thumbsUpCount": "0",
          "content": "挺不错的，毕竟是市面上少有的kube书了"
        },
        {
          "user": "fkpwolf",
          "ratingScore": "推荐",
          "ratingTime": "2019-02-14",
          "thumbsUpCount": "1",
          "content": "讲的有点深入，缺少点高屋建瓴。后面还有讲 k8s 之外的编排，有点浪费。总的来说不错。"
        },
        {
          "user": "yetingsky",
          "ratingScore": "还行",
          "ratingTime": "2018-11-03",
          "thumbsUpCount": "0",
          "content": "只看了三四章，还行吧"
        },
        {
          "user": "懒得糊涂",
          "ratingScore": "还行",
          "ratingTime": "2018-07-25",
          "thumbsUpCount": "0",
          "content": "本书更侧重对docker的深层次理解，实际的使用案例相对少一些"
        },
        {
          "user": "skeeey",
          "ratingScore": "推荐",
          "ratingTime": "2018-06-23",
          "thumbsUpCount": "0",
          "content": "看了第一部分，还是不错的"
        },
        {
          "user": "狂气之瞳改",
          "ratingScore": "还行",
          "ratingTime": "2017-12-13",
          "thumbsUpCount": "0",
          "content": "不适合入门，太细节、博文风。"
        },
        {
          "user": "feilengcui008",
          "ratingScore": "推荐",
          "ratingTime": "2017-04-21",
          "thumbsUpCount": "0",
          "content": "不错，全面有深度，且有作者自己的思考。"
        },
        {
          "user": "仗剑狂歌",
          "ratingScore": "还行",
          "ratingTime": "2018-03-21",
          "thumbsUpCount": "0",
          "content": "一直没买书 等读到的电子版的时候 2018年了 1.11 好多内容 都过时了"
        },
        {
          "user": "梵高的左耳",
          "ratingScore": "力荐",
          "ratingTime": "2019-05-07",
          "thumbsUpCount": "0",
          "content": "介绍了docker 和常见docker 编排系统。对k8s 的相关原理也做了介绍。很翔实。此书最好在了解k8s 基本使用后在阅读，否则容易出现『只见树木不见森林』"
        }
      ]
    }
  },
  {
    "title": "管理Kubernetes",
    "bookUrl": "https://book.douban.com/subject/34923671/",
    "authorInfo": "Brendan Burns、Craig Tracey ",
    "pubInfo": " 中国电力出版社 / 2019-12-1 / 58元",
    "bookInfo": {
      "img": [
        "https://img3.doubanio.com/view/subject/l/public/s33543103.jpg",
        "https://img3.doubanio.com/view/subject/s/public/s33543103.jpg"
      ],
      "originalName": "",
      "averageRating": 0.0,
      "ratersCount": 0,
      "ratings": [],
      "bookIntro": "",
      "authorIntro": "",
      "bookToc": "前言 .1\n        第1 章 绪论 .7\n        1.1 集群如何运作 .8\n        1.2 调整、保护以及调节集群 .9\n        1.3 出现问题时做出响应 10\n        1.4 通过新功能和自定义的功能扩展系统 .11\n        1.5 小结 12\n        第2 章 Kubernetes 概述 13\n        2.1 容器 13\n        2.2 容器编排 .15\n        2.3 Kubernetes API 16\n        2.4 小结 27\n        第3 章 Kubernetes 的架构 . 29\n        3.1 概念 29\n        3.2 结构 33\n        3.3 组件 35\n        3.4 小结 40\n        第4 章 Kubernetes API 服务器 . 41\n        4.1 可管理性的基本特征 41\n        4.2 API 服务器的组成部分 42\n        4.3 请求管理 .49\n        4.4 API 服务器内部 59\n        4.5 调试API 服务器 .60\n        4.6 小结 62\n        第5 章 调度器 63\n        5.1 概述 63\n        5.2 调度的过程 64\n        5.3 通过标签、亲和性、污点和容忍来控制调度 67\n        5.4 小结 72\n        第6 章 安装Kubernetes 73\n        6.1 kubeadm 73\n        6.2 安装控制平面 76\n        6.3 安装工作节点 83\n        6.4 插件 85\n        6.5 阶段 85\n        6.6 高可用性 .86\n        6.7 升级 86\n        6.8 小结 89\n        第7 章 身份认证与用户管理 91\n        7.1 用户 92\n        7.2 身份认证 .93\n        7.3 kubeconfig 102\n        7.4 服务账号 104\n        7.5 小结 106\n        第8 章 授权 107\n        8.1 REST .107\n        8.2 授权 108\n        8.3 基于角色的访问控制 . 110\n        8.4 小结 116\n        第9 章 准入控制 117\n        9.1 配置 118\n        9.2 常见的控制器 118\n        9.3 动态准入控制器 123\n        9.4 小结 130\n        第10 章 网络 . 131\n        10.1 容器网络接口 .131\n        10.2 kube-proxy 134\n        10.3 服务发现 136\n        10.4 网络策略 138\n        10.5 服务网格 140\n        10.6 小结 .141\n        第11 章 监控Kubernetes . 143\n        11.1 监控目标 143\n        11.2 日志与监控之间的差异145\n        11.3 构建监控栈 146\n        11.4 监控的内容 151\n        11.5 小结 .157\n        第12 章 灾难恢复 . 159\n        12.1 高可用性 159\n        12.2 状态 .160\n        12.3 应用数据 161\n        12.4 工作节点 162\n        12.5 etcd 163\n        12.6 Ark 164\n        12.7 小结 .166\n        第13 章 扩展Kubernetes . 167\n        13.1 Kubernetes 的扩展点 167\n        13.2 集群的守护程序 .168\n        13.3 集群助手 171\n        13.4 延长API 服务器的生命周期 174\n        13.5 向Kubernetes 添加自定义API 177\n        13.6 小结 .181\n        第14 章 总结 . 183\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 1 条",
      "commentsList": [
        {
          "user": "happen",
          "ratingScore": "推荐",
          "ratingTime": "2020-03-28",
          "thumbsUpCount": "0",
          "content": "内容一般，跟书名一样，讲了运维日常需要关注的几个资源和组件，比较浅。"
        }
      ]
    }
  },
  {
    "title": "SpringMicroservicesinAction",
    "bookUrl": "https://book.douban.com/subject/27005082/",
    "authorInfo": "John Carnell ",
    "pubInfo": " Manning Publications / 2017-7-6 / USD 38.47",
    "bookInfo": {
      "img": [
        "https://img3.doubanio.com/view/subject/l/public/s29410382.jpg",
        "https://img3.doubanio.com/view/subject/s/public/s29410382.jpg"
      ],
      "originalName": "",
      "averageRating": " 9.0 ",
      "ratersCount": "24",
      "ratings": [
        "37.5%",
        "54.2%",
        "8.3%",
        "0.0%",
        "0.0%"
      ],
      "bookIntro": "Spring Microservices in Action teaches you how to build microservice-based applications using Java and the Spring platform. You'll learn to do microservice design as you build and deploy your first Spring Cloud application. Throughout the book, carefully selected real-life examples expose microservice-based patterns for configuring, routing, scaling, and deploying your services. You'll see how Spring's intuitive tooling can help augment and refactor existing applications with micro services.",
      "authorIntro": "John Carnell is a Java developer with a Clojure addiction. He's a Senior Cloud Engineer at Interactive Intelligence and a prolific speaker and writer with 20 years of experience in the software development field. John has authored, co-authored, and been a technical reviewer for a number of technology books and industry publications.",
      "bookToc": "1. Welcome to the cloud, Spring\n        2. Building microservices with Spring Boot\n        3. Controlling your configuration with Spring Cloud configuration server\n        4. On service discovery\n        5. When bad things happen: client resiliency patterns with Spring Cloud and Netflix Hystrix\n        6. Service routing with Spring Cloud and Zuul\n        7. Securing your microservices\n        8. Event-driven architecture with Spring Cloud Stream\n        9. Distributed tracing with Spring Cloud Sleuth and Zipkin\n        10. Deploying your microservices\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 9 条",
      "commentsList": [
        {
          "user": "丸子",
          "ratingScore": "推荐",
          "ratingTime": "2017-10-07",
          "thumbsUpCount": "2",
          "content": "spring --> spring boot --> spring cloud，整本书是一个完整的例子。"
        },
        {
          "user": "yangong",
          "ratingScore": "推荐",
          "ratingTime": "2018-09-30",
          "thumbsUpCount": "1",
          "content": "类似综述"
        },
        {
          "user": "alswl",
          "ratingScore": "推荐",
          "ratingTime": "2017-12-28",
          "thumbsUpCount": "0",
          "content": "还不错，堪比 Spring in Action。帮忙快速入门 Spring Cloud。\n作者是个 20 多年 Java 的老工程师，也是多本书作者，经验丰富，但是不够酷。他个人博客 https://springframework.guru/about/ 。"
        },
        {
          "user": "雄爷",
          "ratingScore": "力荐",
          "ratingTime": "2018-06-28",
          "thumbsUpCount": "0",
          "content": "对Spring Cloud的结构和作用介绍的比较清晰。从一般模式和具体实践的角度，把微服务架构和Spring Cloud做了提纲挈领的对应和介绍。可以帮助建立起对微服务的基础认识。"
        },
        {
          "user": "双甘",
          "ratingScore": "推荐",
          "ratingTime": "2017-04-18",
          "thumbsUpCount": "1",
          "content": "该书详细介绍了微服务架构下，spring体系通过集成 Netflix 等公司的开源项目以及 Spring Boot ，帮助 Java 开发人员快速拆分单体应用，并对微服务的全生命流程，如服务发现、服务路由、client 弹性、MQ 进行了封装"
        },
        {
          "user": "realvalkyrie",
          "ratingScore": "力荐",
          "ratingTime": "2018-07-08",
          "thumbsUpCount": "0",
          "content": "讲了不少分布式的痛点，就算你不用spring cloud 也提供了很多极具价值的技术点"
        },
        {
          "user": "[已注销]",
          "ratingScore": "力荐",
          "ratingTime": "2019-02-27",
          "thumbsUpCount": "0",
          "content": "对我来说非常适合的一本书。简单原理介绍，加实践代码。原理图非常赞。"
        },
        {
          "user": "medieval",
          "ratingScore": "推荐",
          "ratingTime": "2019-06-17",
          "thumbsUpCount": "0",
          "content": "还是挺不错的 值得看看"
        },
        {
          "user": "Fat Fish",
          "ratingScore": "推荐",
          "ratingTime": "2018-11-21",
          "thumbsUpCount": "0",
          "content": "理论结合小例子，给出了微服务的一些编程模式，读完有收获"
        }
      ]
    }
  },
  {
    "title": "架构即未来：现代企业可扩展的Web架构、流程和组织(原书第2版)",
    "bookUrl": "https://book.douban.com/subject/26765979/",
    "authorInfo": "Martin L. Abbott、Michael T. Fisher / 陈斌 ",
    "pubInfo": " 机械工业出版社 / 2016-4-15 / 99.00",
    "bookInfo": {
      "img": [
        "https://img3.doubanio.com/view/subject/l/public/s32333950.jpg",
        "https://img3.doubanio.com/view/subject/s/public/s32333950.jpg"
      ],
      "originalName": "",
      "averageRating": " 8.4 ",
      "ratersCount": "214",
      "ratings": [
        "44.4%",
        "39.7%",
        "12.1%",
        "2.3%",
        "1.4%"
      ],
      "bookIntro": "作者： 马丁∙阿伯特（Martin L. Abbott） AKF公司的初创合伙人，曾任Quigo（广告技术初创公司，后来被AOL收购）的首席运营官，负责领导产品策略、产品管理、技术研发和客户服务。他在eBay工作了6年，先后担任技术副总裁、首席技术官和公司高管。 迈克∙费舍尔（Michael T. Fisher ）AKF公司的初创合伙人，曾任Quigo首席技术官，PayPal负责工程和架构的副总裁。他花了7年时间帮助通用电气公司（GE）形成了技术战略，获得过6西格玛黑带的荣誉，还在美军担任过上尉和飞行员。 译者： 陈斌（Chuck Chen）现任易宝CTO。1989年获得吉林大学硕士学位，1992年任新加坡航空公司高级系统分析师；1999年投身于硅谷互联网技术发展浪潮，曾任日立美国系统集成总监，Abacus首席架构师和Nokia美国首席工程师；200...(展开全部)",
      "authorIntro": "作者： 马丁∙阿伯特（Martin L. Abbott） AKF公司的初创合伙人，曾任Quigo（广告技术初创公司，后来被AOL收购）的首席运营官，负责领导产品策略、产品管理、技术研发和客户服务。他在eBay工作了6年，先后担任技术副总裁、首席技术官和公司高管。 迈克∙费舍尔（Michael T. Fisher ）AKF公司的初创合伙人，曾任Quigo首席技术官，PayPal负责工程和架构的副总裁。他花了7年时间帮助通用电气公司（GE）形成了技术战略，获得过6西格玛黑带的荣誉，还在美军担任过上尉和飞行员。 译者： 陈斌（Chuck Chen）现任易宝CTO。1989年获得吉林大学硕士学位，1992年任新加坡航空公司高级系统分析师；1999年投身于硅谷互联网技术发展浪潮，曾任日立美国系统集成总监，Abacus首席架构师和Nokia美国首席工程师；2008年任eBay资深架构师，负责移动应用的架构设计。丰富的海外经历，多年的架构经验，深谙移动互联网对传统行业的影响；2014年再次投身易宝，提出大、平、移、商的战略方针，全力推动移动互联网技术，引领行业变革。",
      "bookToc": "目录\n        本书赞誉\n        中文版序一\n        中文版序二\n        中文版序三\n        中文版序四\n        译者序\n        序\n        前言\n        作者简介\n        第一部分　可扩展性组织的人员配置\n        第1章　人员和领导力对扩展性的影响 …… 2\n        1.1　案例方法 …… 3\n        1.2　为什么要讨论人 …… 3\n        1.3　为什么组织很重要 …… 5\n        1.4　为什么管理和领导如此重要 …… 12\n        1.5　结论 …… 15\n        第2章　可扩展性技术组织的角色 …… 17\n        2.1　失败的影响 …… 17\n        2.2　定义角色 …… 19\n        2.3　执行人员的责任 …… 22\n        2.4　独立贡献者的责任 …… 28\n        2.5　RASCI工具 …… 35\n        2.6　结论 …… 39\n        第3章　组织的设置 …… 41\n        3.1　组织对可扩展性的影响 …… 41\n        3.2　团队规模 …… 45\n        3.3　组织结构 …… 54\n        3.4　结论 …… 77\n        第4章　领导力秘籍 …… 80\n        4.1　什么是领导力 …… 82\n        4.2　领导力概念模型 …… 84\n        4.3　自知之明 …… 86\n        4.4　身先士卒 …… 89\n        4.5　谦虚谨慎 …… 91\n        4.6　以人为本，使命为先 …… 92\n        4.7　决策英明，以德服人 …… 93\n        4.8　用人不疑 …… 95\n        4.9　与股东价值保持一致 …… 96\n        4.10　变革型领导 …… 97\n        4.11　愿景 …… 98\n        4.12　使命 …… 102\n        4.13　目标 …… 104\n        4.14　总结 …… 106\n        4.15　成功的因果路线图 …… 111\n        4.16　结论 …… 113\n        第5章　管理秘籍 …… 116\n        5.1　什么是管理 …… 118\n        5.2　项目和任务管理 …… 120\n        5.3　团队建设：球队类比 …… 124\n        5.4　优化团队：花园类比 …… 126\n        5.5　度量、指标和目标评估 …… 131\n        5.6　目标树 …… 135\n        5.7　为成功铺路 …… 137\n        5.8　结论 …… 138\n        第6章　关系、思维和商业案例 …… 141\n        6.1　业务与技术之间的鸿沟 …… 141\n        6.2　击败IT思维模式 …… 145\n        6.3　为扩展性加大投入的业务理由 …… 147\n        6.4　结论 …… 152\n        第二部分　构建可扩展的过程\n        第7章　过程是可扩展的关键 …… 154\n        7.1　过程的目的 …… 155\n        7.2　正确的时间和正确的过程 …… 160\n        7.3　当好的过程变坏的时候 …… 164\n        7.4　结论 …… 166\n        第8章　管理故障和问题 …… 169\n        8.1　什么是故障 …… 170\n        8.2　什么是问题 …… 171\n        8.3　事故管理的组成部分 …… 172\n        8.4　问题管理的组成部分 …… 176\n        8.5　解决事故和问题管理之间的矛盾 …… 177\n        8.6　事故和问题的生命周期 …… 178\n        8.7　施行每日事故例会制 …… 179\n        8.8　施行季度事故总结制度 …… 181\n        8.9　事后处理 …… 182\n        8.10　融会贯通 …… 185\n        8.11　结论 …… 186\n        第9章　危机管理和升级 …… 189\n        9.1　什么是危机 …… 191\n        9.2　为什么要区分危机和其他的事故 …… 192\n        9.3　危机如何改变公司 …… 193\n        9.4　混乱中的秩序 …… 195\n        9.5　通信与控制 …… 200\n        9.6　作战室 …… 201\n        9.7　升级 …… 203\n        9.8　情况通报 …… 204\n        9.9　危机事后处理与沟通 …… 205\n        9.10　结论 …… 207\n        第10章　生产环境的变更管理 …… 210\n        10.1　什么是变更 …… 211\n        10.2　变更识别 …… 212\n        10.3　变更管理 …… 214\n        10.4　变更控制会议 …… 228\n        10.5　过程的持续改进 …… 229\n        10.6　结论 …… 230\n        第11章　确定应用发展的预留空间 …… 233\n        11.1　目的 …… 234\n        11.2　结构 …… 235\n        11.3　理想使用率 …… 240\n        11.4　使用电子表格的快速示例 …… 244\n        11.5　结论 …… 246\n        第12章　确立架构原则 …… 248\n        12.1　目标和原则 …… 248\n        12.2　架构选择 …… 251\n        12.3　AKF采用的最普遍的架构原则 …… 255\n        12.4　结论 …… 266\n        第13章　联合架构设计和架构审查委员会 …… 267\n        13.1　修复组织的功能障碍 …… 267\n        13.2　跨部门的扩展性设计 …… 268\n        13.3　JAD的准入和退出标准 …… 271\n        13.4　从JAD到ARB …… 274\n        13.5　举行会议 …… 276\n        13.6　ARB的准入和退出标准 …… 278\n        13.7　结论 …… 281\n        第14章　敏捷架构设计 …… 284\n        14.1　敏捷组织中的架构 …… 286\n        14.2　架构的所有权 …… 287\n        14.3　有限的资源 …… 288\n        14.4　标准 …… 290\n        14.5　敏捷组织中的ARB …… 293\n        14.6　结论 …… 294\n        第15章　聚焦核心竞争力：自建与外购 …… 296\n        15.1　自建与外购及可扩展性 …… 296\n        15.2　聚焦成本 …… 297\n        15.3　聚焦策略 …… 298\n        15.4　一切自建的现象 …… 299\n        15.5　合并成本与策略方法 …… 300\n        15.6　该组件是否会形成战略性的差异化竞争优势 …… 301\n        15.7　我们是这个组件或资产的最佳所有者吗 …… 302\n        15.8　这个组件的竞争力是什么 …… 303\n        15.9　我们能有效地构建这个组件吗 …… 303\n        15.10　最佳的购买决策 …… 304\n        15.11　自建失败剖析 …… 306\n        15.12　结论 …… 308\n        第16章　确定风险 …… 310\n        16.1　风险管理的重要性 …… 310\n        16.2　测量风险 …… 313\n        16.3　管理风险 …… 322\n        16.4　结论 …… 325\n        第17章　性能与压力测试 …… 328\n        17.1　执行性能测试 …… 328\n        17.2　不要过度强调压力测试 …… 338\n        17.3　可扩展性的性能和压力测试 …… 346\n        17.4　结论 …… 348\n        第18章　障碍条件与回滚 …… 351\n        18.1　障碍条件 …… 352\n        18.2　回滚能力 …… 358\n        18.3　服务降级：设计禁用 …… 362\n        18.4　结论 …… 364\n        第三部分　可扩展的架构方案\n        第19章　构建故障隔离的架构 …… 368\n        19.1　故障隔离架构 …… 369\n        19.2　故障隔离的好处 …… 371\n        19.3　如何进行故障隔离 …… 380\n        19.4　何时实施故障隔离 …… 383\n        19.5　如何测试故障隔离 …… 386\n        19.6　结论 …… 387\n        第20章　AKF扩展立方体介绍 …… 389\n        20.1　AKF扩展立方体 …… 389\n        20.2　扩展立方体的X轴 …… 391\n        20.3　扩展立方体的Y轴 …… 393\n        20.4　扩展立方体的Z轴 …… 396\n        20.5　融会贯通 …… 397\n        20.6　何时以及何处使用扩展立方体 …… 400\n        20.7　结论 …… 401\n        第21章　为扩展分割应用 …… 404\n        21.1　AKF应用扩展立方体 …… 404\n        21.2　AKF应用扩展立方体的X轴 …… 406\n        21.3　AKF应用扩展立方体的Y轴 …… 409\n        21.4　AKF应用扩展立方体的Z轴 …… 412\n        21.5　融会贯通 …… 414\n        21.6　应用立方体实例 …… 418\n        21.7　结论 …… 423\n        第22章　为扩展分割数据库 …… 426\n        22.1　在数据库上应用AKF扩展立方体 …… 426\n        22.2　AKF数据库扩展立方体的X轴 …… 428\n        22.3　AKF数据库扩展立方体的Y轴 …… 434\n        22.4　AKF数据库扩展立方体的Z轴 …… 436\n        22.5　融会贯通 …… 439\n        22.6　数据库扩展立方体使用案例 …… 443\n        22.7　结论 …… 450\n        第23章　为扩展而缓存 …… 452\n        23.1　定义缓存 …… 453\n        23.2　对象缓存 …… 457\n        23.3　应用缓存 …… 461\n        23.4　内容传送网络 …… 467\n        23.5　结论 …… 469\n        第24章　为扩展而异步 …… 472\n        24.1　对同步的共识 …… 472\n        24.2　同步与异步调用 …… 474\n        24.3　定义状态 …… 482\n        24.4　结论 …… 488\n        第四部分　其他的问题和挑战\n        第25章　海量数据 …… 492\n        25.1　数据的成本 …… 493\n        25.2　数据的成本价值困局 …… 496\n        25.3　数据产生利润 …… 498\n        25.4　处理大量的数据 …… 502\n        25.5　结论 …… 514\n        第26章　云计算的突飞猛进 …… 517\n        26.1　历史和定义 …… 518\n        26.2　云的特性与架构 …… 522\n        26.3　云和网格之间的差异 …… 528\n        26.4　云计算的优势和劣势 …… 530\n        26.5　云适用于什么样的公司 …… 540\n        26.6　决策过程 …… 543\n        26.7　结论 …… 546\n        第27章　云计算准备就绪 …… 550\n        27.1　云端的扩展立方体 …… 550\n        27.2　克服挑战 …… 553\n        27.3　Intuit案例研究 …… 559\n        27.4　结论 …… 561\n        第28章　应用监控 …… 564\n        28.1　为什么我们没有及早发现问题 …… 564\n        28.2　监控框架 …… 566\n        28.3　衡量监控的价值 …… 575\n        28.4　监控和过程 …… 576\n        28.5　结论 …… 578\n        第29章　规划数据中心 …… 581\n        29.1　数据中心的成本和约束 …… 581\n        29.2　位置、位置、位置 …… 584\n        29.3　数据中心和增量增长 …… 588\n        29.4　什么时候考虑采用IaaS …… 591\n        29.5　魔法三规则 …… 595\n        29.6　多活数据中心的考虑 …… 602\n        29.7　结论 …… 604\n        第30章　纵观全局 …… 608\n        30.1　现在该做什么 …… 610\n        30.2　可扩展性的其他资源 …… 612\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 65 条",
      "commentsList": [
        {
          "user": "pansin",
          "ratingScore": "推荐",
          "ratingTime": "2017-01-04",
          "thumbsUpCount": "3",
          "content": "看第一二部份简直是一种折磨，大谈管理，意识、思想、目标、组织架构，技术人员谈管理总是隔靴搔痒，不伦不类，虽是真知灼见，未免夜郎自大，三四部分渐入佳境，AKF扩展矩阵XYZ扩展理论颇有见地，解决扩展性的架构设计理念、方法源自实践，值得研读。近700页的大部头消减为350页恰到好处。"
        },
        {
          "user": "白色的蓝",
          "ratingScore": "力荐",
          "ratingTime": "2017-05-07",
          "thumbsUpCount": "1",
          "content": "教科书般阐述人，管理，过程，组织架构再到技术架构设计对高可用系统和产品的影响。"
        },
        {
          "user": "光州王弱水",
          "ratingScore": "力荐",
          "ratingTime": "2016-11-20",
          "thumbsUpCount": "1",
          "content": "配合软件工程，简直酸爽"
        },
        {
          "user": "Vicking",
          "ratingScore": "还行",
          "ratingTime": "2016-10-20",
          "thumbsUpCount": "1",
          "content": "对于小白阅读者不知道该如何打分，至少举例还是很生动，不懂技术的产品经理不是好产品，扫一眼，了解个大概"
        },
        {
          "user": "shizhao",
          "ratingScore": "推荐",
          "ratingTime": "2020-02-13",
          "thumbsUpCount": "0",
          "content": "书里好多地方似乎把流程不知为何翻译做了过程？"
        },
        {
          "user": "Windie  Chai",
          "ratingScore": "力荐",
          "ratingTime": "2019-06-05",
          "thumbsUpCount": "0",
          "content": "六年前读过第一版，今年再读厚度翻倍的第二版，又有许多新的收获。\n成长和蜕变的不仅是这本书，还有这位读者。"
        },
        {
          "user": "char",
          "ratingScore": "还行",
          "ratingTime": "2020-03-25",
          "thumbsUpCount": "0",
          "content": "Day 84 不能接受后几章技术的写法和前面流程、组织的写法一致。冗长 #百日早起学习挑战#"
        },
        {
          "user": "为中华崛起接盘",
          "ratingScore": "推荐",
          "ratingTime": "2016-12-11",
          "thumbsUpCount": "0",
          "content": "翻了翻，一公里远一米深"
        },
        {
          "user": "mase",
          "ratingScore": "推荐",
          "ratingTime": "2016-07-14",
          "thumbsUpCount": "0",
          "content": "多读读还得有收获的，全面性绝对有的，AKF扩展立方体有意思，中文译名太高调了，其实是讲架构扩展性的"
        },
        {
          "user": "北在南方",
          "ratingScore": "力荐",
          "ratingTime": "2017-11-19",
          "thumbsUpCount": "1",
          "content": "强烈推荐，尤其是做 运维 经理 总监级别的人。"
        }
      ]
    }
  },
  {
    "title": "微服务架构与实践",
    "bookUrl": "https://book.douban.com/subject/26693152/",
    "authorInfo": "王磊 ",
    "pubInfo": " 电子工业出版社 / 2015-11-1 / 65.00",
    "bookInfo": {
      "img": [
        "https://img1.doubanio.com/view/subject/l/public/s29053519.jpg",
        "https://img1.doubanio.com/view/subject/s/public/s29053519.jpg"
      ],
      "originalName": "",
      "averageRating": " 5.0 ",
      "ratersCount": "126",
      "ratings": [
        "7.9%",
        "10.3%",
        "35.7%",
        "31.0%",
        "15.1%"
      ],
      "bookIntro": "随着RESTful、云计算、DevOps、持续交付等概念的深入人心，微服务架构逐渐成为系统架构的一个代名词。本书首先从理论出发，介绍了微服务架构的概念、诞生背景、本质特征以及优缺点；然后基于实践，探讨了如何从零开始构建第一个微服务，包括Hello World API、Docker 映像构建与部署、日志聚合、监控告警、持续交付流水线等；最后，在进阶部分讨论了微服务的轻量级通信、消费者驱动的契约测试，并通过一个真实的案例描述了如何使用微服务架构改造遗留系统。全书内容丰富，条理清晰，通俗易懂，是一本理论结合实践的微服务架构的实用书籍。 本书不仅适合架构师、开发人员、测试人员以及运维人员阅读，也适合正在尝试使用微服务架构解耦历史遗留系统的团队或者个人参考，希望本书能在实际工作中对读者有所帮助。",
      "authorIntro": "ThoughtWorks的首席咨询师王磊是国内较早倡导和实践微服务的先行者。王磊是开源软件的爱好者和贡献者，社区活动的参与者，《Ruby Gems开发实战》（Practical RubyGems）一书的译者，GDCR西安的组织者。他于2012年加入ThoughtWorks，为国内外诸多客户提供项目交付和咨询服务；在加入ThoughtWorks之前，曾就职过多家知名外企，具有丰富的敏捷项目实战经验。目前致力于微服务架构、高可用的Web应用以及DevOps的研究与实践。",
      "bookToc": "第1部分 基础篇\n        第1章 单块架构及其面临的挑战  3\n        1.1 三层应用架构  4\n        1.1.1 三层应用架构的发展  4\n        1.1.2 什么是三层架构  5\n        1.1.3 三层架构的优势  6\n        1.2 单块架构  6\n        1.2.1 什么是单块架构  6\n        1.2.2 单块架构的优势  7\n        1.2.3 单块架构面临的挑战  8\n        1.3 小结  12\n        第2章 微服务架构综述  13\n        2.1 什么是微服务架构  13\n        2.1.1 多微才够微  14\n        2.1.2 单一职责  17\n        2.1.3 轻量级通信  17\n        2.1.4 独立性  19\n        2.1.5 进程隔离  20\n        2.2 微服务的诞生背景  22\n        2.2.1 互联网行业的快速发展  23\n        2.2.2 敏捷、精益方法论的深入人心 23\n        2.2.3 单块架构系统面临的挑战  23\n        2.2.4 容器虚拟化技术  23\n        2.3 微服务架构与 SOA  24\n        2.3.1 SOA概述  24\n        2.3.2 微服务与 SOA  25\n        2.4 微服务的本质  26\n        2.4.1 服务作为组件  27\n        2.4.2 围绕业务组织团队  28\n        2.4.3 关注产品而非项目  29\n        2.4.4 技术多样性  31\n        2.4.5 业务数据独立  32\n        2.4.6 基础设施自动化  33\n        2.4.7 演进式架构  33\n        2.5 微服务不是银弹  34\n        2.5.1 分布式系统的复杂度  35\n        2.5.2 运维成本  36\n        2.5.3 部署自动化  36\n        2.5.4 DevOps与组织架构  37\n        2.5.5 服务间的依赖测试  37\n        2.5.6 服务间的依赖管理  37\n        2.6 小结  38\n        第2部分 实践篇\n        第3章 构建第一个服务  41\n        3.1 场景分析  41\n        3.2 任务拆分  43\n        第4章 Hello World API  45\n        4.1 API实现  45\n        4.1.1 开发语言 ——Ruby  45\n        4.1.2 Web框架——Grape  46\n        4.1.3 API的具体实现  47\n        4.2 代码测试与静态检查  50\n        4.2.1 代码测试  50\n        4.2.2 测试覆盖率统计  53\n        4.2.3 静态检查  54\n        4.2.4 代码复杂度检查  57\n        第5章 构建 Docker映像  61\n        5.1 定义 Dockerfile  61\n        5.2 配置 Docker主机  63\n        5.3 构建 Docker映像  64\n        5.4 运行 Docker容器  64\n        5.5 发布 Docker映像  65\n        5.6 小结  69\n        第6章 部署 Docker映像  71\n        6.1基础设施 AWS  71\n        6.2基础设施自动化  73\n        6.3 部署 Docker映像  80\n        6.4自动化部署  81\n        6.5 小结  84\n        第7章 持续交付流水线  85\n        7.1 持续集成环境  85\n        7.2 提交阶段  87\n        7.3 验证阶段  91\n        7.4 构建阶段  91\n        7.5 发布阶段  94\n        7.6 小结  96\n        第8章 日志聚合  97\n        8.1 日志聚合工具简介  97\n        8.2 Splunk的核心  99\n        8.3 安装 Splunk索引器  100\n        8.4 安装 Splunk转发器  101\n        8.5 日志查找  102\n        8.6 告警设置  103\n        8.7 小结  104\n        第9章 监控与告警  105\n        9.1 Nagios简介  105\n        9.2 Nagios的工作原理  107\n        9.3 Nagios安装  108\n        9.4 Nagios的配置  109\n        9.5 监控 products-service  111\n        9.6 告警  113\n        9.7 小结  114\n        第10章 功能迭代  115\n        10.1 定义模型  116\n        10.2 持久化模型  117\n        10.3 定义表现形式  119\n        10.4 实现 API  122\n        10.5 服务描述文件  125\n        10.6 小结  127\n        第3部分 进阶篇\n        第11章 微服务与持续交付  131\n        11.1 持续交付的核心  132\n        11.2 微服务架构与持续交付  133\n        11.2.1 开发  133\n        11.2.2 测试  137\n        11.2.3 持续集成  139\n        11.2.4 构建  139\n        11.2.5 部署  140\n        11.2.6 运维  143\n        11.3 小结  144\n        第12章 微服务与轻量级通信机制  145\n        12.1 同步通信与异步通信  145\n        12.1.1 概述  145\n        12.1.2 同步通信与异步通信的选择 146\n        12.2 远程调用 RPC  147\n        12.2.1 远程过程调用的核心  147\n        12.2.2 远程方法调用  148\n        12.2.3 远程过程调用的弊端  148\n        12.3 REST  149\n        12.3.1 概述  149\n        12.3.2 REST的核心  150\n        12.3.3 REST的优势  152\n        12.3.4 REST的不足  152\n        12.3.5 本节小结  155\n        12.4 HAL  155\n        12.4.1 概述  155\n        12.4.2 HAL的核心  156\n        12.4.3 HAL浏览器  160\n        12.5 消息队列  161\n        12.5.1 核心部分  162\n        12.5.2 访问方式  163\n        12.5.3 消息队列的优缺点  164\n        12.6 后台任务处理系统  165\n        12.6.1 核心部分  165\n        12.6.2 服务回调  166\n        12.6.3 一个例子  167\n        12.6.4 后台任务与微服务  169\n        12.7 小结  170\n        第13章 微服务与测试  171\n        13.1 微服务的结构  171\n        13.2 微服务的测试策略  173\n        13.3 微服务的单元测试  175\n        13.3.1 单元测试综述  175\n        13.3.2 单元测试的内容  176\n        13.4 微服务的集成测试  179\n        13.4.1 集成测试综述  179\n        13.4.2 集成测试的实施方法  179\n        13.4.3 集成测试的内容  180\n        13.5 基于消费者驱动的契约测试  181\n        13.5.1 集成测试存在的弊端  181\n        13.5.2 什么是契约  183\n        13.5.3 什么是契约测试  184\n        13.5.4 契约测试的方法  185\n        13.5.5 Pact实现契约测试  187\n        13.5.6 一个例子  192\n        13.5.7 本节小结  205\n        13.6 微服务的组件测试  205\n        13.6.1 组件测试概述  205\n        13.6.2 组件测试的方法  206\n        13.6.3 本节小结  207\n        13.7 微服务的端到端测试  208\n        13.7.1 端到端测试概述  208\n        13.7.2 端到端测试的内容  208\n        13.7.3 本节小结  209\n        13.8 小结  210\n        第14章 使用微服务架构改造遗留系统  211\n        14.1 背景与挑战  211\n        14.2 改造策略  212\n        14.2.1 昀小修改  212\n        14.2.2 功能剥离  212\n        14.2.3 数据解耦  213\n        14.2.4 数据同步  213\n        14.2.5 迭代替换  214\n        14.3 快速开发实践  215\n        14.3.1 快速开发模板  215\n        14.3.2 代码生成工具  217\n        14.3.3 持续集成模板  217\n        14.3.4 一键部署工具  217\n        14.4 微服务架构下的新系统  218\n        14.5 小结  220\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 68 条",
      "commentsList": [
        {
          "user": "lnj",
          "ratingScore": "较差",
          "ratingTime": "2016-02-03",
          "thumbsUpCount": "6",
          "content": "整体的结构组织并不合理，想看的东西一笔带过，基础知识不断复述。最后用了比较大的篇幅将自己的契约测试框架，给人一种推销的感觉。"
        },
        {
          "user": "飞林沙",
          "ratingScore": "较差",
          "ratingTime": "2016-01-14",
          "thumbsUpCount": "5",
          "content": "过于简单基础，真正涉及微服务的部分反而不多，反而在一些软件工程的基础知识上啰嗦了太久。"
        },
        {
          "user": "iCoolSea",
          "ratingScore": "很差",
          "ratingTime": "2016-01-25",
          "thumbsUpCount": "8",
          "content": "这么写书第二次见，人品有问题，推荐的人也是。"
        },
        {
          "user": "icyleaf",
          "ratingScore": "很差",
          "ratingTime": "2016-06-30",
          "thumbsUpCount": "3",
          "content": "本着 TW 的牌子想看学习一下，结果发现里面内容真是水的可怕…真心不如耐下心来看 docker weekly 邮件"
        },
        {
          "user": "北在南方",
          "ratingScore": "还行",
          "ratingTime": "2016-07-06",
          "thumbsUpCount": "2",
          "content": "给个3星吧，看了聊聊架构之后 推荐公司图书馆 购买的，买来看了目录之后，觉得书名 改为 《docker 入门》更合适，不推荐购买。"
        },
        {
          "user": "王鑫",
          "ratingScore": "较差",
          "ratingTime": "2016-06-01",
          "thumbsUpCount": "2",
          "content": "微服务是将整个系统拆分成为相对独立的业务模块；\n知道这句话，就了解了本书微服务的所有东西；\n用单块架构和微服务做比较，没有可比较性，目前项目基本是SOA，用SOA比较，更适合些。\n书中介绍的持续交付，不是微服务独有的，适用于搜有项目。\n想了解微服务，不建议购买；\n想了解软件工程，可以看看"
        },
        {
          "user": "iambowen",
          "ratingScore": "推荐",
          "ratingTime": "2016-05-29",
          "thumbsUpCount": "1",
          "content": "前同事的作品，前面的对微服务的总结还不错，后面的实践部分比较粗。"
        },
        {
          "user": "盒棍",
          "ratingScore": "还行",
          "ratingTime": "2017-01-25",
          "thumbsUpCount": "1",
          "content": "贵。失望。"
        },
        {
          "user": "惟以不永怀",
          "ratingScore": "很差",
          "ratingTime": "2017-04-05",
          "thumbsUpCount": "1",
          "content": "写序的那帮人，你们从头到尾翻过么，就这能落个毛地，业务如何编排？跟踪链如何追踪？各微服务间的数据如何关联？业务调用的事务性如何解决？怎么确定微服务边界？划分原则是什么？什么可操作的实践都没说，就是维基百科的描述堆砌。这也能出书，不是能力问题，完全是态度问题，一段话反复说，一段代码反复贴，坑货，浪费了我不少时间！"
        },
        {
          "user": "康康",
          "ratingScore": "较差",
          "ratingTime": "2016-05-19",
          "thumbsUpCount": "0",
          "content": "比较零散"
        }
      ]
    }
  },
  {
    "title": "Docker——容器与容器云（第2版）",
    "bookUrl": "https://book.douban.com/subject/26894736/",
    "authorInfo": "浙江大学SEL实验室 ",
    "pubInfo": " 人民邮电出版社 / 2016-10 / 89.00元",
    "bookInfo": {
      "img": [
        "https://img3.doubanio.com/view/subject/l/public/s29101822.jpg",
        "https://img3.doubanio.com/view/subject/s/public/s29101822.jpg"
      ],
      "originalName": "",
      "averageRating": " 8.4 ",
      "ratersCount": "95",
      "ratings": [
        "31.6%",
        "49.5%",
        "13.7%",
        "4.2%",
        "1.1%"
      ],
      "bookIntro": "本书根据Docker 1.10版和Kubernetes 1.2版对第1版进行了全面更新，从实践者的角度出发，以Docker和Kubernetes为重点，沿着“基本用法介绍”到“核心原理解读”到“高级实践技巧”的思路，一本书讲透当前主流的容器和容器云技术，有助于读者在实际场景中利用Docker容器和容器云解决问题并启发新的思考。全书包括两部分，第一部分深入解读Docker容器技术，包括Docker架构与设计、核心源码解读和高级实践技巧；第二部分归纳和比较了三类基于Docker的主流容器云项目，包括专注Docker容器编排与部署的容器云、专注应用支撑的容器云以及一切皆容器的Kubernetes，进而详细解读了Kubernetes核心源码的设计与实现，最后介绍了几种典型场景下的Kubernetes最佳实践。",
      "authorIntro": "浙江大学软件工程实验室（Software Engineering Lab，SEL） 云计算团队组建于2011年，组织博士和硕士研究生搭建、分析和钻研开源的云计算技术，包括Docker、Kubernetes、Cloud Foundry、OpenStack、CloudStack、Eucalyptus、Convirt、OpenShift等，积极为开源社区贡献代码，管理和参与线上线下讨论社区，参加国内外云计算技术峰会并发言。以开源社区为技术交流研发平台，浙江大学SEL实验室在几年的时间里成长为一个充满热情、富有能力的云计算研发团队，也在国内外开源云计算社区，尤其是在Docker、Kubernetes和Cloud Foundry社区得到了广泛认可。",
      "bookToc": "第一部分　Docker深入解读\n        第1章　从容器到容器云　　2\n        1.1　云计算平台　　2\n        1.2　容器，新的革命　　3\n        1.3　进化：从容器到容器云　　7\n        第2章　Docker 基础　　8\n        2.1　Docker的安装　　8\n        2.2　Docker操作参数解读　　9\n        2.3　搭建你的第一个Docker应用栈　　16\n        2.3.1　Docker集群部署　　16\n        2.3.2　第一个Hello World　　17\n        2.3.3　开发、测试和发布一体化　　27\n        第3章　Docker核心原理解读　　28\n        3.1　Docker背后的内核知识　　28\n        3.1.1　namespace资源隔离　　28\n        3.1.2　cgroups资源限制　　45\n        3.2　Docker架构概览　　53\n        3.2.1　Docker daemon　　54\n        3.2.2　Docker client　　54\n        3.2.3　镜像管理　　54\n        3.2.4　execdriver、volumedriver、graphdriver　　55\n        3.2.5　network　　55\n        3.3　client和daemon　　56\n        3.3.1　client模式　　56\n        3.3.2　daemon模式　　58\n        3.3.3　从client到daemon　　64\n        3.4　libcontainer　　67\n        3.4.1　libcontainer的工作方式　　69\n        3.4.2　libcontainer实现原理　　70\n        3.4.3　使用runC与libcontainer进行交互　　75\n        3.5　Docker镜像管理　　77\n        3.5.1　什么是Docker镜像　　77\n        3.5.2　Docker镜像关键概念　　80\n        3.5.3　Docker镜像构建操作　　81\n        3.5.4　Docker镜像的分发方法　　84\n        3.6　Docker存储管理　　87\n        3.6.1　Docker镜像元数据管理　　87\n        3.6.2　Docker存储驱动　　89\n        3.7　Docker数据卷　　99\n        3.7.1　数据卷的使用方式　　100\n        3.7.2　数据卷原理解读　　105\n        3.8　Docker网络管理　　108\n        3.8.1　Docker网络基础　　108\n        3.8.2　Docker daemon网络配置原理　　116\n        3.8.3　libcontainer网络配置原理　　119\n        3.8.4　传统的link原理解析　　125\n        3.8.5　新的link介绍　　127\n        3.9　Docker与容器安全　　129\n        3.9.1　Docker的安全机制　　129\n        3.9.2　Docker安全问题　　135\n        3.9.3　Docker安全的解决方案　　139\n        第4章　Docker 高级实践技巧　　151\n        4.1　容器化思维　　151\n        4.1.1　SSH服务器的替代方案　　151\n        4.1.2　Docker内应用日志管理方案　　152\n        4.1.3　容器化思维及更多　　153\n        4.2　Docker高级网络实践　　153\n        4.2.1　玩转Linux networknamespace　　154\n        4.2.2　pipework原理解析　　159\n        4.2.3　pipework跨主机通信　　165\n        4.2.4　OVS划分VLAN　　170\n        4.2.5　OVS隧道模式　　174\n        4.3　Dockerfile最佳实践　　187\n        4.3.1　Dockerfile的使用　　187\n        4.3.2　Dockerfile实践心得　　191\n        4.4　Docker容器的监控手段　　193\n        4.4.1　Docker容器监控维度　　194\n        4.4.2　容器监控命令　　195\n        4.4.3　常用的容器监控工具　　197\n        4.5　容器化应用构建的基础：高可用配置中心　　201\n        4.5.1　etcd经典应用场景　　201\n        4.5.2　etcd实现原理　　206\n        第二部分　Docker云平台解读\n        第5章　构建自己的容器云　　222\n        5.1　再谈云平台的层次架构　　222\n        5.2　从小工到专家　　225\n        第6章　专注编排与部署：三剑客与Fleet　　230\n        6.1　编排小神器Fig/Compose　　230\n        6.1.1　再谈容器编排与部署　　230\n        6.1.2　Compose原理：一探究竟　　233\n        6.2　跨平台宿主环境管理工具Machine　　237\n        6.2.1　Machine与虚拟机软件　　237\n        6.2.2　Machine与IaaS平台　　238\n        6.2.3　Machine小结　　239\n        6.3　集群抽象工具Swarm　　240\n        6.3.1　Swarm简介　　240\n        6.3.2　试用Swarm　　241\n        6.3.3　Swarm集群的多种创建方式　　243\n        6.3.4　Swarm对请求的处理　　245\n        6.3.5　Swarm集群的调度策略　　245\n        6.3.6　Swarm集群高可用（HA）　　246\n        6.3.7　Swarm与Machine　　247\n        6.3.8　Swarm小结　　248\n        6.4　编排之秀Fleet　　248\n        6.4.1　旧问题新角度：Docker distro　　249\n        6.4.2　Fleet的原理剖析　　252\n        第7章　专注应用支撑和运行时：Flynn和Deis　　258\n        7.1　Flynn，一个小而美的两层架构　　258\n        7.1.1　第0层：容器云的基础设施　　259\n        7.1.2　第1层：容器云的功能框架　　259\n        7.1.3　Flynn体系架构与实现原理　　260\n        7.2　谈谈Deis与Flynn　　270\n        7.2.1　应用发布上的比较　　271\n        7.2.2　关于Deis的一些思考　　273\n        第8章　一切皆容器：Kubernetes　　274\n        8.1　Kubernetes是个什么样的项目　　274\n        8.2　Kubernetes的设计解读　　275\n        8.2.1　一个典型案例：Guestbook　　275\n        8.2.2　pod设计解读　　277\n        8.2.3　replication controller设计解读　　288\n        8.2.4　service的设计解读　　294\n        8.2.5　新一代副本控制器replica set　　306\n        8.2.6　Deployment　　307\n        8.2.7　DaemonSet　　312\n        8.2.8　ConfigMap　　312\n        8.2.9　Job　　317\n        8.2.10　Horizontal Pod Autoscaler　　318\n        8.3　Kubernetes核心组件解读　　320\n        8.3.1　Kubernetes的整体架构　　320\n        8.3.2　APIServer　　321\n        8.3.3　scheduler　　328\n        8.3.4　controller manager　　338\n        8.3.5　kubelet　　346\n        8.3.6　kube-proxy　　352\n        8.3.7　核心组件协作流程　　362\n        8.4　Kubernetes存储核心原理　　366\n        8.4.1　volume设计解读　　366\n        8.4.2　volume实现原理分析　　367\n        8.4.3　volume使用案例　　368\n        8.4.4　persistent volume　　371\n        8.5　Kubernetes网络核心原理　　372\n        8.5.1　单pod单IP模型　　373\n        8.5.2　pod和网络容器　　374\n        8.5.3　实现Kubernetes的网络模型　　377\n        8.6　Kubernetes多租户管理与资源控制　　381\n        8.6.1　namespace设计解读　　381\n        8.6.2　Kubernetes用户认证机制　　385\n        8.6.3　Kubernetes用户授权机制　　387\n        8.6.4　Kubernetes多维资源管理机制admission control　　390\n        8.7　Kubernetes高级实践　　402\n        8.7.1　应用健康检查　　402\n        8.7.2　高可用性　　405\n        8.7.3　日志　　408\n        8.7.4　集成DNS　　410\n        8.7.5　容器上下文环境　　412\n        8.8　Kubernetes未来动向　　414\n        8.8.1　Ubernetes　　414\n        8.8.2　petSet　　415\n        8.8.3　performance　　417\n        8.8.4　rescheduler　　417\n        8.8.5　OCI标准　　419\n        8.9　不要停止思考　　419\n        第三部分　附录\n        附录A　Docker的安装　　424\n        附录B　阅读Docker源代码的神兵利器　　432\n        附录C　快速熟悉开源项目　　441\n        附录D　cgroups的测试与使用　　444\n        附录E　cgroups子系统配置参数介绍　　448\n        附录F　Kubernetes的安装　　453\n        后记　　457\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 32 条",
      "commentsList": [
        {
          "user": "Parano",
          "ratingScore": "推荐",
          "ratingTime": "2017-04-07",
          "thumbsUpCount": "1",
          "content": "上次回国带回来的唯一一本书，docker 相关的章节还挺不错的"
        },
        {
          "user": "逐风刀客",
          "ratingScore": "推荐",
          "ratingTime": "2018-01-10",
          "thumbsUpCount": "0",
          "content": "挺不错的，毕竟是市面上少有的kube书了"
        },
        {
          "user": "fkpwolf",
          "ratingScore": "推荐",
          "ratingTime": "2019-02-14",
          "thumbsUpCount": "1",
          "content": "讲的有点深入，缺少点高屋建瓴。后面还有讲 k8s 之外的编排，有点浪费。总的来说不错。"
        },
        {
          "user": "yetingsky",
          "ratingScore": "还行",
          "ratingTime": "2018-11-03",
          "thumbsUpCount": "0",
          "content": "只看了三四章，还行吧"
        },
        {
          "user": "懒得糊涂",
          "ratingScore": "还行",
          "ratingTime": "2018-07-25",
          "thumbsUpCount": "0",
          "content": "本书更侧重对docker的深层次理解，实际的使用案例相对少一些"
        },
        {
          "user": "skeeey",
          "ratingScore": "推荐",
          "ratingTime": "2018-06-23",
          "thumbsUpCount": "0",
          "content": "看了第一部分，还是不错的"
        },
        {
          "user": "狂气之瞳改",
          "ratingScore": "还行",
          "ratingTime": "2017-12-13",
          "thumbsUpCount": "0",
          "content": "不适合入门，太细节、博文风。"
        },
        {
          "user": "feilengcui008",
          "ratingScore": "推荐",
          "ratingTime": "2017-04-21",
          "thumbsUpCount": "0",
          "content": "不错，全面有深度，且有作者自己的思考。"
        },
        {
          "user": "仗剑狂歌",
          "ratingScore": "还行",
          "ratingTime": "2018-03-21",
          "thumbsUpCount": "0",
          "content": "一直没买书 等读到的电子版的时候 2018年了 1.11 好多内容 都过时了"
        },
        {
          "user": "梵高的左耳",
          "ratingScore": "力荐",
          "ratingTime": "2019-05-07",
          "thumbsUpCount": "0",
          "content": "介绍了docker 和常见docker 编排系统。对k8s 的相关原理也做了介绍。很翔实。此书最好在了解k8s 基本使用后在阅读，否则容易出现『只见树木不见森林』"
        }
      ]
    }
  },
  {
    "title": "管理Kubernetes",
    "bookUrl": "https://book.douban.com/subject/34923671/",
    "authorInfo": "Brendan Burns、Craig Tracey ",
    "pubInfo": " 中国电力出版社 / 2019-12-1 / 58元",
    "bookInfo": {
      "img": [
        "https://img3.doubanio.com/view/subject/l/public/s33543103.jpg",
        "https://img3.doubanio.com/view/subject/s/public/s33543103.jpg"
      ],
      "originalName": "",
      "averageRating": 0.0,
      "ratersCount": 0,
      "ratings": [],
      "bookIntro": "",
      "authorIntro": "",
      "bookToc": "前言 .1\n        第1 章 绪论 .7\n        1.1 集群如何运作 .8\n        1.2 调整、保护以及调节集群 .9\n        1.3 出现问题时做出响应 10\n        1.4 通过新功能和自定义的功能扩展系统 .11\n        1.5 小结 12\n        第2 章 Kubernetes 概述 13\n        2.1 容器 13\n        2.2 容器编排 .15\n        2.3 Kubernetes API 16\n        2.4 小结 27\n        第3 章 Kubernetes 的架构 . 29\n        3.1 概念 29\n        3.2 结构 33\n        3.3 组件 35\n        3.4 小结 40\n        第4 章 Kubernetes API 服务器 . 41\n        4.1 可管理性的基本特征 41\n        4.2 API 服务器的组成部分 42\n        4.3 请求管理 .49\n        4.4 API 服务器内部 59\n        4.5 调试API 服务器 .60\n        4.6 小结 62\n        第5 章 调度器 63\n        5.1 概述 63\n        5.2 调度的过程 64\n        5.3 通过标签、亲和性、污点和容忍来控制调度 67\n        5.4 小结 72\n        第6 章 安装Kubernetes 73\n        6.1 kubeadm 73\n        6.2 安装控制平面 76\n        6.3 安装工作节点 83\n        6.4 插件 85\n        6.5 阶段 85\n        6.6 高可用性 .86\n        6.7 升级 86\n        6.8 小结 89\n        第7 章 身份认证与用户管理 91\n        7.1 用户 92\n        7.2 身份认证 .93\n        7.3 kubeconfig 102\n        7.4 服务账号 104\n        7.5 小结 106\n        第8 章 授权 107\n        8.1 REST .107\n        8.2 授权 108\n        8.3 基于角色的访问控制 . 110\n        8.4 小结 116\n        第9 章 准入控制 117\n        9.1 配置 118\n        9.2 常见的控制器 118\n        9.3 动态准入控制器 123\n        9.4 小结 130\n        第10 章 网络 . 131\n        10.1 容器网络接口 .131\n        10.2 kube-proxy 134\n        10.3 服务发现 136\n        10.4 网络策略 138\n        10.5 服务网格 140\n        10.6 小结 .141\n        第11 章 监控Kubernetes . 143\n        11.1 监控目标 143\n        11.2 日志与监控之间的差异145\n        11.3 构建监控栈 146\n        11.4 监控的内容 151\n        11.5 小结 .157\n        第12 章 灾难恢复 . 159\n        12.1 高可用性 159\n        12.2 状态 .160\n        12.3 应用数据 161\n        12.4 工作节点 162\n        12.5 etcd 163\n        12.6 Ark 164\n        12.7 小结 .166\n        第13 章 扩展Kubernetes . 167\n        13.1 Kubernetes 的扩展点 167\n        13.2 集群的守护程序 .168\n        13.3 集群助手 171\n        13.4 延长API 服务器的生命周期 174\n        13.5 向Kubernetes 添加自定义API 177\n        13.6 小结 .181\n        第14 章 总结 . 183\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 1 条",
      "commentsList": [
        {
          "user": "happen",
          "ratingScore": "推荐",
          "ratingTime": "2020-03-28",
          "thumbsUpCount": "0",
          "content": "内容一般，跟书名一样，讲了运维日常需要关注的几个资源和组件，比较浅。"
        }
      ]
    }
  },
  {
    "title": "SpringMicroservicesinAction",
    "bookUrl": "https://book.douban.com/subject/27005082/",
    "authorInfo": "John Carnell ",
    "pubInfo": " Manning Publications / 2017-7-6 / USD 38.47",
    "bookInfo": {
      "img": [
        "https://img3.doubanio.com/view/subject/l/public/s29410382.jpg",
        "https://img3.doubanio.com/view/subject/s/public/s29410382.jpg"
      ],
      "originalName": "",
      "averageRating": " 9.0 ",
      "ratersCount": "24",
      "ratings": [
        "37.5%",
        "54.2%",
        "8.3%",
        "0.0%",
        "0.0%"
      ],
      "bookIntro": "Spring Microservices in Action teaches you how to build microservice-based applications using Java and the Spring platform. You'll learn to do microservice design as you build and deploy your first Spring Cloud application. Throughout the book, carefully selected real-life examples expose microservice-based patterns for configuring, routing, scaling, and deploying your services. You'll see how Spring's intuitive tooling can help augment and refactor existing applications with micro services.",
      "authorIntro": "John Carnell is a Java developer with a Clojure addiction. He's a Senior Cloud Engineer at Interactive Intelligence and a prolific speaker and writer with 20 years of experience in the software development field. John has authored, co-authored, and been a technical reviewer for a number of technology books and industry publications.",
      "bookToc": "1. Welcome to the cloud, Spring\n        2. Building microservices with Spring Boot\n        3. Controlling your configuration with Spring Cloud configuration server\n        4. On service discovery\n        5. When bad things happen: client resiliency patterns with Spring Cloud and Netflix Hystrix\n        6. Service routing with Spring Cloud and Zuul\n        7. Securing your microservices\n        8. Event-driven architecture with Spring Cloud Stream\n        9. Distributed tracing with Spring Cloud Sleuth and Zipkin\n        10. Deploying your microservices\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 9 条",
      "commentsList": [
        {
          "user": "丸子",
          "ratingScore": "推荐",
          "ratingTime": "2017-10-07",
          "thumbsUpCount": "2",
          "content": "spring --> spring boot --> spring cloud，整本书是一个完整的例子。"
        },
        {
          "user": "yangong",
          "ratingScore": "推荐",
          "ratingTime": "2018-09-30",
          "thumbsUpCount": "1",
          "content": "类似综述"
        },
        {
          "user": "alswl",
          "ratingScore": "推荐",
          "ratingTime": "2017-12-28",
          "thumbsUpCount": "0",
          "content": "还不错，堪比 Spring in Action。帮忙快速入门 Spring Cloud。\n作者是个 20 多年 Java 的老工程师，也是多本书作者，经验丰富，但是不够酷。他个人博客 https://springframework.guru/about/ 。"
        },
        {
          "user": "雄爷",
          "ratingScore": "力荐",
          "ratingTime": "2018-06-28",
          "thumbsUpCount": "0",
          "content": "对Spring Cloud的结构和作用介绍的比较清晰。从一般模式和具体实践的角度，把微服务架构和Spring Cloud做了提纲挈领的对应和介绍。可以帮助建立起对微服务的基础认识。"
        },
        {
          "user": "双甘",
          "ratingScore": "推荐",
          "ratingTime": "2017-04-18",
          "thumbsUpCount": "1",
          "content": "该书详细介绍了微服务架构下，spring体系通过集成 Netflix 等公司的开源项目以及 Spring Boot ，帮助 Java 开发人员快速拆分单体应用，并对微服务的全生命流程，如服务发现、服务路由、client 弹性、MQ 进行了封装"
        },
        {
          "user": "realvalkyrie",
          "ratingScore": "力荐",
          "ratingTime": "2018-07-08",
          "thumbsUpCount": "0",
          "content": "讲了不少分布式的痛点，就算你不用spring cloud 也提供了很多极具价值的技术点"
        },
        {
          "user": "[已注销]",
          "ratingScore": "力荐",
          "ratingTime": "2019-02-27",
          "thumbsUpCount": "0",
          "content": "对我来说非常适合的一本书。简单原理介绍，加实践代码。原理图非常赞。"
        },
        {
          "user": "medieval",
          "ratingScore": "推荐",
          "ratingTime": "2019-06-17",
          "thumbsUpCount": "0",
          "content": "还是挺不错的 值得看看"
        },
        {
          "user": "Fat Fish",
          "ratingScore": "推荐",
          "ratingTime": "2018-11-21",
          "thumbsUpCount": "0",
          "content": "理论结合小例子，给出了微服务的一些编程模式，读完有收获"
        }
      ]
    }
  },
  {
    "title": "架构即未来：现代企业可扩展的Web架构、流程和组织(原书第2版)",
    "bookUrl": "https://book.douban.com/subject/26765979/",
    "authorInfo": "Martin L. Abbott、Michael T. Fisher / 陈斌 ",
    "pubInfo": " 机械工业出版社 / 2016-4-15 / 99.00",
    "bookInfo": {
      "img": [
        "https://img3.doubanio.com/view/subject/l/public/s32333950.jpg",
        "https://img3.doubanio.com/view/subject/s/public/s32333950.jpg"
      ],
      "originalName": "",
      "averageRating": " 8.4 ",
      "ratersCount": "214",
      "ratings": [
        "44.4%",
        "39.7%",
        "12.1%",
        "2.3%",
        "1.4%"
      ],
      "bookIntro": "作者： 马丁∙阿伯特（Martin L. Abbott） AKF公司的初创合伙人，曾任Quigo（广告技术初创公司，后来被AOL收购）的首席运营官，负责领导产品策略、产品管理、技术研发和客户服务。他在eBay工作了6年，先后担任技术副总裁、首席技术官和公司高管。 迈克∙费舍尔（Michael T. Fisher ）AKF公司的初创合伙人，曾任Quigo首席技术官，PayPal负责工程和架构的副总裁。他花了7年时间帮助通用电气公司（GE）形成了技术战略，获得过6西格玛黑带的荣誉，还在美军担任过上尉和飞行员。 译者： 陈斌（Chuck Chen）现任易宝CTO。1989年获得吉林大学硕士学位，1992年任新加坡航空公司高级系统分析师；1999年投身于硅谷互联网技术发展浪潮，曾任日立美国系统集成总监，Abacus首席架构师和Nokia美国首席工程师；200...(展开全部)",
      "authorIntro": "作者： 马丁∙阿伯特（Martin L. Abbott） AKF公司的初创合伙人，曾任Quigo（广告技术初创公司，后来被AOL收购）的首席运营官，负责领导产品策略、产品管理、技术研发和客户服务。他在eBay工作了6年，先后担任技术副总裁、首席技术官和公司高管。 迈克∙费舍尔（Michael T. Fisher ）AKF公司的初创合伙人，曾任Quigo首席技术官，PayPal负责工程和架构的副总裁。他花了7年时间帮助通用电气公司（GE）形成了技术战略，获得过6西格玛黑带的荣誉，还在美军担任过上尉和飞行员。 译者： 陈斌（Chuck Chen）现任易宝CTO。1989年获得吉林大学硕士学位，1992年任新加坡航空公司高级系统分析师；1999年投身于硅谷互联网技术发展浪潮，曾任日立美国系统集成总监，Abacus首席架构师和Nokia美国首席工程师；2008年任eBay资深架构师，负责移动应用的架构设计。丰富的海外经历，多年的架构经验，深谙移动互联网对传统行业的影响；2014年再次投身易宝，提出大、平、移、商的战略方针，全力推动移动互联网技术，引领行业变革。",
      "bookToc": "目录\n        本书赞誉\n        中文版序一\n        中文版序二\n        中文版序三\n        中文版序四\n        译者序\n        序\n        前言\n        作者简介\n        第一部分　可扩展性组织的人员配置\n        第1章　人员和领导力对扩展性的影响 …… 2\n        1.1　案例方法 …… 3\n        1.2　为什么要讨论人 …… 3\n        1.3　为什么组织很重要 …… 5\n        1.4　为什么管理和领导如此重要 …… 12\n        1.5　结论 …… 15\n        第2章　可扩展性技术组织的角色 …… 17\n        2.1　失败的影响 …… 17\n        2.2　定义角色 …… 19\n        2.3　执行人员的责任 …… 22\n        2.4　独立贡献者的责任 …… 28\n        2.5　RASCI工具 …… 35\n        2.6　结论 …… 39\n        第3章　组织的设置 …… 41\n        3.1　组织对可扩展性的影响 …… 41\n        3.2　团队规模 …… 45\n        3.3　组织结构 …… 54\n        3.4　结论 …… 77\n        第4章　领导力秘籍 …… 80\n        4.1　什么是领导力 …… 82\n        4.2　领导力概念模型 …… 84\n        4.3　自知之明 …… 86\n        4.4　身先士卒 …… 89\n        4.5　谦虚谨慎 …… 91\n        4.6　以人为本，使命为先 …… 92\n        4.7　决策英明，以德服人 …… 93\n        4.8　用人不疑 …… 95\n        4.9　与股东价值保持一致 …… 96\n        4.10　变革型领导 …… 97\n        4.11　愿景 …… 98\n        4.12　使命 …… 102\n        4.13　目标 …… 104\n        4.14　总结 …… 106\n        4.15　成功的因果路线图 …… 111\n        4.16　结论 …… 113\n        第5章　管理秘籍 …… 116\n        5.1　什么是管理 …… 118\n        5.2　项目和任务管理 …… 120\n        5.3　团队建设：球队类比 …… 124\n        5.4　优化团队：花园类比 …… 126\n        5.5　度量、指标和目标评估 …… 131\n        5.6　目标树 …… 135\n        5.7　为成功铺路 …… 137\n        5.8　结论 …… 138\n        第6章　关系、思维和商业案例 …… 141\n        6.1　业务与技术之间的鸿沟 …… 141\n        6.2　击败IT思维模式 …… 145\n        6.3　为扩展性加大投入的业务理由 …… 147\n        6.4　结论 …… 152\n        第二部分　构建可扩展的过程\n        第7章　过程是可扩展的关键 …… 154\n        7.1　过程的目的 …… 155\n        7.2　正确的时间和正确的过程 …… 160\n        7.3　当好的过程变坏的时候 …… 164\n        7.4　结论 …… 166\n        第8章　管理故障和问题 …… 169\n        8.1　什么是故障 …… 170\n        8.2　什么是问题 …… 171\n        8.3　事故管理的组成部分 …… 172\n        8.4　问题管理的组成部分 …… 176\n        8.5　解决事故和问题管理之间的矛盾 …… 177\n        8.6　事故和问题的生命周期 …… 178\n        8.7　施行每日事故例会制 …… 179\n        8.8　施行季度事故总结制度 …… 181\n        8.9　事后处理 …… 182\n        8.10　融会贯通 …… 185\n        8.11　结论 …… 186\n        第9章　危机管理和升级 …… 189\n        9.1　什么是危机 …… 191\n        9.2　为什么要区分危机和其他的事故 …… 192\n        9.3　危机如何改变公司 …… 193\n        9.4　混乱中的秩序 …… 195\n        9.5　通信与控制 …… 200\n        9.6　作战室 …… 201\n        9.7　升级 …… 203\n        9.8　情况通报 …… 204\n        9.9　危机事后处理与沟通 …… 205\n        9.10　结论 …… 207\n        第10章　生产环境的变更管理 …… 210\n        10.1　什么是变更 …… 211\n        10.2　变更识别 …… 212\n        10.3　变更管理 …… 214\n        10.4　变更控制会议 …… 228\n        10.5　过程的持续改进 …… 229\n        10.6　结论 …… 230\n        第11章　确定应用发展的预留空间 …… 233\n        11.1　目的 …… 234\n        11.2　结构 …… 235\n        11.3　理想使用率 …… 240\n        11.4　使用电子表格的快速示例 …… 244\n        11.5　结论 …… 246\n        第12章　确立架构原则 …… 248\n        12.1　目标和原则 …… 248\n        12.2　架构选择 …… 251\n        12.3　AKF采用的最普遍的架构原则 …… 255\n        12.4　结论 …… 266\n        第13章　联合架构设计和架构审查委员会 …… 267\n        13.1　修复组织的功能障碍 …… 267\n        13.2　跨部门的扩展性设计 …… 268\n        13.3　JAD的准入和退出标准 …… 271\n        13.4　从JAD到ARB …… 274\n        13.5　举行会议 …… 276\n        13.6　ARB的准入和退出标准 …… 278\n        13.7　结论 …… 281\n        第14章　敏捷架构设计 …… 284\n        14.1　敏捷组织中的架构 …… 286\n        14.2　架构的所有权 …… 287\n        14.3　有限的资源 …… 288\n        14.4　标准 …… 290\n        14.5　敏捷组织中的ARB …… 293\n        14.6　结论 …… 294\n        第15章　聚焦核心竞争力：自建与外购 …… 296\n        15.1　自建与外购及可扩展性 …… 296\n        15.2　聚焦成本 …… 297\n        15.3　聚焦策略 …… 298\n        15.4　一切自建的现象 …… 299\n        15.5　合并成本与策略方法 …… 300\n        15.6　该组件是否会形成战略性的差异化竞争优势 …… 301\n        15.7　我们是这个组件或资产的最佳所有者吗 …… 302\n        15.8　这个组件的竞争力是什么 …… 303\n        15.9　我们能有效地构建这个组件吗 …… 303\n        15.10　最佳的购买决策 …… 304\n        15.11　自建失败剖析 …… 306\n        15.12　结论 …… 308\n        第16章　确定风险 …… 310\n        16.1　风险管理的重要性 …… 310\n        16.2　测量风险 …… 313\n        16.3　管理风险 …… 322\n        16.4　结论 …… 325\n        第17章　性能与压力测试 …… 328\n        17.1　执行性能测试 …… 328\n        17.2　不要过度强调压力测试 …… 338\n        17.3　可扩展性的性能和压力测试 …… 346\n        17.4　结论 …… 348\n        第18章　障碍条件与回滚 …… 351\n        18.1　障碍条件 …… 352\n        18.2　回滚能力 …… 358\n        18.3　服务降级：设计禁用 …… 362\n        18.4　结论 …… 364\n        第三部分　可扩展的架构方案\n        第19章　构建故障隔离的架构 …… 368\n        19.1　故障隔离架构 …… 369\n        19.2　故障隔离的好处 …… 371\n        19.3　如何进行故障隔离 …… 380\n        19.4　何时实施故障隔离 …… 383\n        19.5　如何测试故障隔离 …… 386\n        19.6　结论 …… 387\n        第20章　AKF扩展立方体介绍 …… 389\n        20.1　AKF扩展立方体 …… 389\n        20.2　扩展立方体的X轴 …… 391\n        20.3　扩展立方体的Y轴 …… 393\n        20.4　扩展立方体的Z轴 …… 396\n        20.5　融会贯通 …… 397\n        20.6　何时以及何处使用扩展立方体 …… 400\n        20.7　结论 …… 401\n        第21章　为扩展分割应用 …… 404\n        21.1　AKF应用扩展立方体 …… 404\n        21.2　AKF应用扩展立方体的X轴 …… 406\n        21.3　AKF应用扩展立方体的Y轴 …… 409\n        21.4　AKF应用扩展立方体的Z轴 …… 412\n        21.5　融会贯通 …… 414\n        21.6　应用立方体实例 …… 418\n        21.7　结论 …… 423\n        第22章　为扩展分割数据库 …… 426\n        22.1　在数据库上应用AKF扩展立方体 …… 426\n        22.2　AKF数据库扩展立方体的X轴 …… 428\n        22.3　AKF数据库扩展立方体的Y轴 …… 434\n        22.4　AKF数据库扩展立方体的Z轴 …… 436\n        22.5　融会贯通 …… 439\n        22.6　数据库扩展立方体使用案例 …… 443\n        22.7　结论 …… 450\n        第23章　为扩展而缓存 …… 452\n        23.1　定义缓存 …… 453\n        23.2　对象缓存 …… 457\n        23.3　应用缓存 …… 461\n        23.4　内容传送网络 …… 467\n        23.5　结论 …… 469\n        第24章　为扩展而异步 …… 472\n        24.1　对同步的共识 …… 472\n        24.2　同步与异步调用 …… 474\n        24.3　定义状态 …… 482\n        24.4　结论 …… 488\n        第四部分　其他的问题和挑战\n        第25章　海量数据 …… 492\n        25.1　数据的成本 …… 493\n        25.2　数据的成本价值困局 …… 496\n        25.3　数据产生利润 …… 498\n        25.4　处理大量的数据 …… 502\n        25.5　结论 …… 514\n        第26章　云计算的突飞猛进 …… 517\n        26.1　历史和定义 …… 518\n        26.2　云的特性与架构 …… 522\n        26.3　云和网格之间的差异 …… 528\n        26.4　云计算的优势和劣势 …… 530\n        26.5　云适用于什么样的公司 …… 540\n        26.6　决策过程 …… 543\n        26.7　结论 …… 546\n        第27章　云计算准备就绪 …… 550\n        27.1　云端的扩展立方体 …… 550\n        27.2　克服挑战 …… 553\n        27.3　Intuit案例研究 …… 559\n        27.4　结论 …… 561\n        第28章　应用监控 …… 564\n        28.1　为什么我们没有及早发现问题 …… 564\n        28.2　监控框架 …… 566\n        28.3　衡量监控的价值 …… 575\n        28.4　监控和过程 …… 576\n        28.5　结论 …… 578\n        第29章　规划数据中心 …… 581\n        29.1　数据中心的成本和约束 …… 581\n        29.2　位置、位置、位置 …… 584\n        29.3　数据中心和增量增长 …… 588\n        29.4　什么时候考虑采用IaaS …… 591\n        29.5　魔法三规则 …… 595\n        29.6　多活数据中心的考虑 …… 602\n        29.7　结论 …… 604\n        第30章　纵观全局 …… 608\n        30.1　现在该做什么 …… 610\n        30.2　可扩展性的其他资源 …… 612\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 65 条",
      "commentsList": [
        {
          "user": "pansin",
          "ratingScore": "推荐",
          "ratingTime": "2017-01-04",
          "thumbsUpCount": "3",
          "content": "看第一二部份简直是一种折磨，大谈管理，意识、思想、目标、组织架构，技术人员谈管理总是隔靴搔痒，不伦不类，虽是真知灼见，未免夜郎自大，三四部分渐入佳境，AKF扩展矩阵XYZ扩展理论颇有见地，解决扩展性的架构设计理念、方法源自实践，值得研读。近700页的大部头消减为350页恰到好处。"
        },
        {
          "user": "白色的蓝",
          "ratingScore": "力荐",
          "ratingTime": "2017-05-07",
          "thumbsUpCount": "1",
          "content": "教科书般阐述人，管理，过程，组织架构再到技术架构设计对高可用系统和产品的影响。"
        },
        {
          "user": "光州王弱水",
          "ratingScore": "力荐",
          "ratingTime": "2016-11-20",
          "thumbsUpCount": "1",
          "content": "配合软件工程，简直酸爽"
        },
        {
          "user": "Vicking",
          "ratingScore": "还行",
          "ratingTime": "2016-10-20",
          "thumbsUpCount": "1",
          "content": "对于小白阅读者不知道该如何打分，至少举例还是很生动，不懂技术的产品经理不是好产品，扫一眼，了解个大概"
        },
        {
          "user": "shizhao",
          "ratingScore": "推荐",
          "ratingTime": "2020-02-13",
          "thumbsUpCount": "0",
          "content": "书里好多地方似乎把流程不知为何翻译做了过程？"
        },
        {
          "user": "Windie  Chai",
          "ratingScore": "力荐",
          "ratingTime": "2019-06-05",
          "thumbsUpCount": "0",
          "content": "六年前读过第一版，今年再读厚度翻倍的第二版，又有许多新的收获。\n成长和蜕变的不仅是这本书，还有这位读者。"
        },
        {
          "user": "char",
          "ratingScore": "还行",
          "ratingTime": "2020-03-25",
          "thumbsUpCount": "0",
          "content": "Day 84 不能接受后几章技术的写法和前面流程、组织的写法一致。冗长 #百日早起学习挑战#"
        },
        {
          "user": "为中华崛起接盘",
          "ratingScore": "推荐",
          "ratingTime": "2016-12-11",
          "thumbsUpCount": "0",
          "content": "翻了翻，一公里远一米深"
        },
        {
          "user": "mase",
          "ratingScore": "推荐",
          "ratingTime": "2016-07-14",
          "thumbsUpCount": "0",
          "content": "多读读还得有收获的，全面性绝对有的，AKF扩展立方体有意思，中文译名太高调了，其实是讲架构扩展性的"
        },
        {
          "user": "北在南方",
          "ratingScore": "力荐",
          "ratingTime": "2017-11-19",
          "thumbsUpCount": "1",
          "content": "强烈推荐，尤其是做 运维 经理 总监级别的人。"
        }
      ]
    }
  },
  {
    "title": "微服务架构与实践",
    "bookUrl": "https://book.douban.com/subject/26693152/",
    "authorInfo": "王磊 ",
    "pubInfo": " 电子工业出版社 / 2015-11-1 / 65.00",
    "bookInfo": {
      "img": [
        "https://img1.doubanio.com/view/subject/l/public/s29053519.jpg",
        "https://img1.doubanio.com/view/subject/s/public/s29053519.jpg"
      ],
      "originalName": "",
      "averageRating": " 5.0 ",
      "ratersCount": "126",
      "ratings": [
        "7.9%",
        "10.3%",
        "35.7%",
        "31.0%",
        "15.1%"
      ],
      "bookIntro": "随着RESTful、云计算、DevOps、持续交付等概念的深入人心，微服务架构逐渐成为系统架构的一个代名词。本书首先从理论出发，介绍了微服务架构的概念、诞生背景、本质特征以及优缺点；然后基于实践，探讨了如何从零开始构建第一个微服务，包括Hello World API、Docker 映像构建与部署、日志聚合、监控告警、持续交付流水线等；最后，在进阶部分讨论了微服务的轻量级通信、消费者驱动的契约测试，并通过一个真实的案例描述了如何使用微服务架构改造遗留系统。全书内容丰富，条理清晰，通俗易懂，是一本理论结合实践的微服务架构的实用书籍。 本书不仅适合架构师、开发人员、测试人员以及运维人员阅读，也适合正在尝试使用微服务架构解耦历史遗留系统的团队或者个人参考，希望本书能在实际工作中对读者有所帮助。",
      "authorIntro": "ThoughtWorks的首席咨询师王磊是国内较早倡导和实践微服务的先行者。王磊是开源软件的爱好者和贡献者，社区活动的参与者，《Ruby Gems开发实战》（Practical RubyGems）一书的译者，GDCR西安的组织者。他于2012年加入ThoughtWorks，为国内外诸多客户提供项目交付和咨询服务；在加入ThoughtWorks之前，曾就职过多家知名外企，具有丰富的敏捷项目实战经验。目前致力于微服务架构、高可用的Web应用以及DevOps的研究与实践。",
      "bookToc": "第1部分 基础篇\n        第1章 单块架构及其面临的挑战  3\n        1.1 三层应用架构  4\n        1.1.1 三层应用架构的发展  4\n        1.1.2 什么是三层架构  5\n        1.1.3 三层架构的优势  6\n        1.2 单块架构  6\n        1.2.1 什么是单块架构  6\n        1.2.2 单块架构的优势  7\n        1.2.3 单块架构面临的挑战  8\n        1.3 小结  12\n        第2章 微服务架构综述  13\n        2.1 什么是微服务架构  13\n        2.1.1 多微才够微  14\n        2.1.2 单一职责  17\n        2.1.3 轻量级通信  17\n        2.1.4 独立性  19\n        2.1.5 进程隔离  20\n        2.2 微服务的诞生背景  22\n        2.2.1 互联网行业的快速发展  23\n        2.2.2 敏捷、精益方法论的深入人心 23\n        2.2.3 单块架构系统面临的挑战  23\n        2.2.4 容器虚拟化技术  23\n        2.3 微服务架构与 SOA  24\n        2.3.1 SOA概述  24\n        2.3.2 微服务与 SOA  25\n        2.4 微服务的本质  26\n        2.4.1 服务作为组件  27\n        2.4.2 围绕业务组织团队  28\n        2.4.3 关注产品而非项目  29\n        2.4.4 技术多样性  31\n        2.4.5 业务数据独立  32\n        2.4.6 基础设施自动化  33\n        2.4.7 演进式架构  33\n        2.5 微服务不是银弹  34\n        2.5.1 分布式系统的复杂度  35\n        2.5.2 运维成本  36\n        2.5.3 部署自动化  36\n        2.5.4 DevOps与组织架构  37\n        2.5.5 服务间的依赖测试  37\n        2.5.6 服务间的依赖管理  37\n        2.6 小结  38\n        第2部分 实践篇\n        第3章 构建第一个服务  41\n        3.1 场景分析  41\n        3.2 任务拆分  43\n        第4章 Hello World API  45\n        4.1 API实现  45\n        4.1.1 开发语言 ——Ruby  45\n        4.1.2 Web框架——Grape  46\n        4.1.3 API的具体实现  47\n        4.2 代码测试与静态检查  50\n        4.2.1 代码测试  50\n        4.2.2 测试覆盖率统计  53\n        4.2.3 静态检查  54\n        4.2.4 代码复杂度检查  57\n        第5章 构建 Docker映像  61\n        5.1 定义 Dockerfile  61\n        5.2 配置 Docker主机  63\n        5.3 构建 Docker映像  64\n        5.4 运行 Docker容器  64\n        5.5 发布 Docker映像  65\n        5.6 小结  69\n        第6章 部署 Docker映像  71\n        6.1基础设施 AWS  71\n        6.2基础设施自动化  73\n        6.3 部署 Docker映像  80\n        6.4自动化部署  81\n        6.5 小结  84\n        第7章 持续交付流水线  85\n        7.1 持续集成环境  85\n        7.2 提交阶段  87\n        7.3 验证阶段  91\n        7.4 构建阶段  91\n        7.5 发布阶段  94\n        7.6 小结  96\n        第8章 日志聚合  97\n        8.1 日志聚合工具简介  97\n        8.2 Splunk的核心  99\n        8.3 安装 Splunk索引器  100\n        8.4 安装 Splunk转发器  101\n        8.5 日志查找  102\n        8.6 告警设置  103\n        8.7 小结  104\n        第9章 监控与告警  105\n        9.1 Nagios简介  105\n        9.2 Nagios的工作原理  107\n        9.3 Nagios安装  108\n        9.4 Nagios的配置  109\n        9.5 监控 products-service  111\n        9.6 告警  113\n        9.7 小结  114\n        第10章 功能迭代  115\n        10.1 定义模型  116\n        10.2 持久化模型  117\n        10.3 定义表现形式  119\n        10.4 实现 API  122\n        10.5 服务描述文件  125\n        10.6 小结  127\n        第3部分 进阶篇\n        第11章 微服务与持续交付  131\n        11.1 持续交付的核心  132\n        11.2 微服务架构与持续交付  133\n        11.2.1 开发  133\n        11.2.2 测试  137\n        11.2.3 持续集成  139\n        11.2.4 构建  139\n        11.2.5 部署  140\n        11.2.6 运维  143\n        11.3 小结  144\n        第12章 微服务与轻量级通信机制  145\n        12.1 同步通信与异步通信  145\n        12.1.1 概述  145\n        12.1.2 同步通信与异步通信的选择 146\n        12.2 远程调用 RPC  147\n        12.2.1 远程过程调用的核心  147\n        12.2.2 远程方法调用  148\n        12.2.3 远程过程调用的弊端  148\n        12.3 REST  149\n        12.3.1 概述  149\n        12.3.2 REST的核心  150\n        12.3.3 REST的优势  152\n        12.3.4 REST的不足  152\n        12.3.5 本节小结  155\n        12.4 HAL  155\n        12.4.1 概述  155\n        12.4.2 HAL的核心  156\n        12.4.3 HAL浏览器  160\n        12.5 消息队列  161\n        12.5.1 核心部分  162\n        12.5.2 访问方式  163\n        12.5.3 消息队列的优缺点  164\n        12.6 后台任务处理系统  165\n        12.6.1 核心部分  165\n        12.6.2 服务回调  166\n        12.6.3 一个例子  167\n        12.6.4 后台任务与微服务  169\n        12.7 小结  170\n        第13章 微服务与测试  171\n        13.1 微服务的结构  171\n        13.2 微服务的测试策略  173\n        13.3 微服务的单元测试  175\n        13.3.1 单元测试综述  175\n        13.3.2 单元测试的内容  176\n        13.4 微服务的集成测试  179\n        13.4.1 集成测试综述  179\n        13.4.2 集成测试的实施方法  179\n        13.4.3 集成测试的内容  180\n        13.5 基于消费者驱动的契约测试  181\n        13.5.1 集成测试存在的弊端  181\n        13.5.2 什么是契约  183\n        13.5.3 什么是契约测试  184\n        13.5.4 契约测试的方法  185\n        13.5.5 Pact实现契约测试  187\n        13.5.6 一个例子  192\n        13.5.7 本节小结  205\n        13.6 微服务的组件测试  205\n        13.6.1 组件测试概述  205\n        13.6.2 组件测试的方法  206\n        13.6.3 本节小结  207\n        13.7 微服务的端到端测试  208\n        13.7.1 端到端测试概述  208\n        13.7.2 端到端测试的内容  208\n        13.7.3 本节小结  209\n        13.8 小结  210\n        第14章 使用微服务架构改造遗留系统  211\n        14.1 背景与挑战  211\n        14.2 改造策略  212\n        14.2.1 昀小修改  212\n        14.2.2 功能剥离  212\n        14.2.3 数据解耦  213\n        14.2.4 数据同步  213\n        14.2.5 迭代替换  214\n        14.3 快速开发实践  215\n        14.3.1 快速开发模板  215\n        14.3.2 代码生成工具  217\n        14.3.3 持续集成模板  217\n        14.3.4 一键部署工具  217\n        14.4 微服务架构下的新系统  218\n        14.5 小结  220\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 68 条",
      "commentsList": [
        {
          "user": "lnj",
          "ratingScore": "较差",
          "ratingTime": "2016-02-03",
          "thumbsUpCount": "6",
          "content": "整体的结构组织并不合理，想看的东西一笔带过，基础知识不断复述。最后用了比较大的篇幅将自己的契约测试框架，给人一种推销的感觉。"
        },
        {
          "user": "飞林沙",
          "ratingScore": "较差",
          "ratingTime": "2016-01-14",
          "thumbsUpCount": "5",
          "content": "过于简单基础，真正涉及微服务的部分反而不多，反而在一些软件工程的基础知识上啰嗦了太久。"
        },
        {
          "user": "iCoolSea",
          "ratingScore": "很差",
          "ratingTime": "2016-01-25",
          "thumbsUpCount": "8",
          "content": "这么写书第二次见，人品有问题，推荐的人也是。"
        },
        {
          "user": "icyleaf",
          "ratingScore": "很差",
          "ratingTime": "2016-06-30",
          "thumbsUpCount": "3",
          "content": "本着 TW 的牌子想看学习一下，结果发现里面内容真是水的可怕…真心不如耐下心来看 docker weekly 邮件"
        },
        {
          "user": "北在南方",
          "ratingScore": "还行",
          "ratingTime": "2016-07-06",
          "thumbsUpCount": "2",
          "content": "给个3星吧，看了聊聊架构之后 推荐公司图书馆 购买的，买来看了目录之后，觉得书名 改为 《docker 入门》更合适，不推荐购买。"
        },
        {
          "user": "王鑫",
          "ratingScore": "较差",
          "ratingTime": "2016-06-01",
          "thumbsUpCount": "2",
          "content": "微服务是将整个系统拆分成为相对独立的业务模块；\n知道这句话，就了解了本书微服务的所有东西；\n用单块架构和微服务做比较，没有可比较性，目前项目基本是SOA，用SOA比较，更适合些。\n书中介绍的持续交付，不是微服务独有的，适用于搜有项目。\n想了解微服务，不建议购买；\n想了解软件工程，可以看看"
        },
        {
          "user": "iambowen",
          "ratingScore": "推荐",
          "ratingTime": "2016-05-29",
          "thumbsUpCount": "1",
          "content": "前同事的作品，前面的对微服务的总结还不错，后面的实践部分比较粗。"
        },
        {
          "user": "盒棍",
          "ratingScore": "还行",
          "ratingTime": "2017-01-25",
          "thumbsUpCount": "1",
          "content": "贵。失望。"
        },
        {
          "user": "惟以不永怀",
          "ratingScore": "很差",
          "ratingTime": "2017-04-05",
          "thumbsUpCount": "1",
          "content": "写序的那帮人，你们从头到尾翻过么，就这能落个毛地，业务如何编排？跟踪链如何追踪？各微服务间的数据如何关联？业务调用的事务性如何解决？怎么确定微服务边界？划分原则是什么？什么可操作的实践都没说，就是维基百科的描述堆砌。这也能出书，不是能力问题，完全是态度问题，一段话反复说，一段代码反复贴，坑货，浪费了我不少时间！"
        },
        {
          "user": "康康",
          "ratingScore": "较差",
          "ratingTime": "2016-05-19",
          "thumbsUpCount": "0",
          "content": "比较零散"
        }
      ]
    }
  },
  {
    "title": "KubernetesinAction中文版",
    "bookUrl": "https://book.douban.com/subject/30418855/",
    "authorInfo": "【美】Marko Luksa / 七牛容器云团队 ",
    "pubInfo": " 电子工业出版社 / 2019-1 / 148",
    "bookInfo": {
      "img": [
        "https://img9.doubanio.com/view/subject/l/public/s29965036.jpg",
        "https://img9.doubanio.com/view/subject/s/public/s29965036.jpg"
      ],
      "originalName": "",
      "averageRating": " 9.2 ",
      "ratersCount": "112",
      "ratings": [
        "68.8%",
        "25.0%",
        "5.4%",
        "0.9%",
        "0.0%"
      ],
      "bookIntro": "Marko Luksa是一位拥有20年以上专业开发经验的软件工程师，经手项目小到简单的Web应用，大到ERP系统、框架和中间件软件，应有尽有。在为Red Hat工作期间，他从Google App Engine API实现的开发起步, 这些API将基于Red Hat的JBoss中间件产品，之后他一直在为CDI/Weld、Infinispan/JBoss DataGrid等项目贡献力量。2014后, 他加入Red Hat的Cloud Enablement团队，负责 Kubernetes和相关技术开发的更新，保障公司的中间件软件能将Kubernetes与OpenShift特性的潜能用到极致。 译者简介 七牛容器云 （KIRK）团队，是负责七牛云基于自身公有云业务在容器方面的多年实践经验，针对企业应用快速部署、便捷运维打造的容器云计算平台。提供持续集成、弹性...(展开全部)",
      "authorIntro": "Marko Luksa是一位拥有20年以上专业开发经验的软件工程师，经手项目小到简单的Web应用，大到ERP系统、框架和中间件软件，应有尽有。在为Red Hat工作期间，他从Google App Engine API实现的开发起步, 这些API将基于Red Hat的JBoss中间件产品，之后他一直在为CDI/Weld、Infinispan/JBoss DataGrid等项目贡献力量。2014后, 他加入Red Hat的Cloud Enablement团队，负责 Kubernetes和相关技术开发的更新，保障公司的中间件软件能将Kubernetes与OpenShift特性的潜能用到极致。 译者简介 七牛容器云 （KIRK）团队，是负责七牛云基于自身公有云业务在容器方面的多年实践经验，针对企业应用快速部署、便捷运维打造的容器云计算平台。提供持续集成、弹性伸缩、应用市场等功能特性，使企业专注于业务逻辑开发，缩短业务上线周期，优化资源利用率，提高服务响应效率的一支技术团队。",
      "bookToc": "1  Kubernetes 介绍  1\n        1.1  Kubernetes 系统的需求  2\n        1.1.1  从单体应用到微服务  2\n        1.1.2  为应用程序提供一个一致的环境  5\n        1.1.3  迈向持续交付 ：DevOps 和无运维  6\n        1.2  介绍容器技术  7\n        1.2.1  什么是容器  7\n        1.2.2  Docker 容器平台介绍  11\n        1.2.3  rkt——一个 Docker 的替代方案  14\n        1.3  Kubernetes 介绍  15\n        1.3.1  初衷  15\n        1.3.2  深入浅出地了解 Kubernetes  15\n        1.3.3  Kubernetes 集群架构  17\n        1.3.4  在 Kubernetes 中运行应用  18\n        1.3.5  使用 Kubernetes 的好处  20\n        1.4  本章小结  22\n        2  开始使用 Kubernetes 和 Docker  23\n        2.1  创建、运行及共享容器镜像  23\n        2.1.1  安装 Docker 并运行 Hello World 容器  24\n        2.1.2  创建一个简单的 Node.js 应用  26\n        2.1.3  为镜像创建 Dockerfile  27\n        2.1.4  构建容器镜像  27\n        2.1.5  运行容器镜像  30\n        2.1.6  探索运行容器的内部  31\n        2.1.7  停止和删除容器  32\n        2.1.8  向镜像仓库推送镜像  33\n        2.2  配置 Kubernetes 集群  34\n        2.2.1  用 Minikube 运行一个本地单节点 Kubernetes 集群  34\n        2.2.2  使用 Google Kubernetes Engine 托管 Kubernetes 集群  36\n        2.2.3  为 kubectl 配置别名和命令行补齐  39\n        2.3  在 Kubernetes 上运行第一个应用  40\n        2.3.1  部署 Node.js 应用  40\n        2.3.2  访问 Web 应用  43\n        2.3.3  系统的逻辑部分  45\n        2.3.4  水平伸缩应用  46\n        2.3.5  查看应用运行在哪个节点上  49\n        2.3.6  介绍 Kubernetes dashboard  50\n        2.4  本章小结  51\n        3  pod ：运行于 Kubernetes 中的容器  53\n        3.1  介绍 pod  53\n        3.1.1  为何需要 pod  54\n        3.1.2  了解 pod  55\n        3.1.3  通过 pod 合理管理容器  56\n        3.2  以 YAML 或 JSON 描述文件创建 pod  58\n        3.2.1  检查现有 pod 的 YAML 描述文件  59\n        3.2.2  为 pod 创建一个简单的 YAML 描述文件  61\n        3.2.3  使用 kubectl create 来创建 pod  63\n        3.2.4  查看应用程序日志  64\n        3.2.5  向 pod 发送请求  65\n        3.3  使用标签组织 pod  66\n        3.3.1  介绍标签  66\n        3.3.2  创建 pod 时指定标签  67\n        3.3.3  修改现有 pod 的标签  68\n        3.4  通过标签选择器列出 pod 子集  69\n        3.4.1  使用标签选择器列出 pod  69\n        3.4.2  在标签选择器中使用多个条件  71\n        3.5  使用标签和选择器来约束 pod 调度  71\n        3.5.1  使用标签分类工作节点  72\n        3.5.2  将 pod 调度到特定节点  72\n        3.5.3  调度到一个特定节点  73\n        3.6  注解 pod  73\n        3.6.1  查找对象的注解  74\n        3.6.2  添加和修改注解  74\n        3.7  使用命名空间对资源进行分组  75\n        3.7.1  了解对命名空间的需求  75\n        3.7.2  发现其他命名空间及其 pod  75\n        3.7.3  创建一个命名空间  76\n        3.7.4  管理其他命名空间中的对象  77\n        3.7.5  命名空间提供的隔离  78\n        3.8  停止和移除 pod  78\n        3.8.1  按名称删除 pod  78\n        3.8.2  使用标签选择器删除 pod  79\n        3.8.3  通过删除整个命名空间来删除 pod  80\n        3.8.4  删除命名空间中的所有 pod，但保留命名空间  80\n        3.8.5  删除命名空间中的（几乎）所有资源  80\n        3.9  本章小结  81\n        4  副本机制和其他控制器 ：部署托管的 pod  83\n        4.1  保持 pod 健康  84\n        4.1.1  介绍存活探针  84\n        4.1.2  创建基于 HTTP 的存活探针  85\n        4.1.3  使用存活探针  86\n        4.1.4  配置存活探针的附加属性  87\n        4.1.5  创建有效的存活探针  88\n        4.2  了解 ReplicationController  89\n        4.2.1  ReplicationController 的操作  90\n        4.2.2  创建一个 ReplicationController  92\n        4.2.3  使用 ReplicationController  94\n        4.2.4  将 pod 移入或移出 ReplicationController 的作用域  97\n        4.2.5  修改 pod 模板  100\n        4.2.6  水平缩放 pod  101\n        4.2.7  删除一个 ReplicationController  103\n        4.3  使用 ReplicaSet 而不是 ReplicationController  104\n        4.3.1  比较 ReplicaSet 和 ReplicationController  104\n        4.3.2  定义 ReplicaSet  105\n        4.3.3  创建和检查 ReplicaSet  106\n        4.3.4  使用 ReplicaSet 的更富表达力的标签选择器  106\n        4.3.5  ReplicaSet 小结  107\n        4.4  使用 DaemonSet 在每个节点上运行一个 pod  107\n        4.4.1  使用 DaemonSet 在每个节点上运行一个 pod  108\n        4.4.2  使用 DaemonSet 只在特定的节点上运行 pod  109\n        4.5  运行执行单个任务的 pod  112\n        4.5.1  介绍 Job 资源  112\n        4.5.2  定义 Job 资源  113\n        4.5.3  看 Job 运行一个 pod  114\n        4.5.4  在 Job 中运行多个 pod 实例  114\n        4.5.5  限制 Job pod 完成任务的时间  116\n        4.6  安排 Job 定期运行或在将来运行一次  116\n        4.6.1  创建一个 CronJob  116\n        4.6.2  了解计划任务的运行方式  118\n        4.7  本章小结  118\n        5  服务 ：让客户端发现 pod 并与之通信  121\n        5.1  介绍服务  122\n        5.1.1  创建服务  123\n        5.1.2  服务发现  129\n        5.2  连接集群外部的服务  132\n        5.2.1  介绍服务 endpoint  133\n        5.2.2  手动配置服务的 endpoint  133\n        5.2.3  为外部服务创建别名  135\n        5.3  将服务暴露给外部客户端  136\n        5.3.1  使用 NodePort 类型的服务  137\n        5.3.2  通过负载均衡器将服务暴露出来  140\n        5.3.3  了解外部连接的特性  142\n        5.4  通过 Ingress 暴露服务  143\n        5.4.1  创建 Ingress 资源  145\n        5.4.2  通过 Ingress 访问服务  146\n        5.4.3  通过相同的 Ingress 暴露多个服务  147\n        5.4.4  配置 Ingress 处理 TLS 传输  149\n        5.5  pod 就绪后发出信号  150\n        5.5.1  介绍就绪探针  151\n        5.5.2  向 pod 添加就绪探针  152\n        5.5.3  了解就绪探针的实际作用  154\n        5.6  使用 headless 服务来发现独立的 pod  155\n        5.6.1  创建 headless 服务  156\n        5.6.2  通过 DNS 发现 pod  156\n        5.6.3  发现所有的 pod——包括未就绪的 pod  157\n        5.7  排除服务故障  158\n        5.8  本章小结  159\n        6  卷 ：将磁盘挂载到容器  161\n        6.1  介绍卷  162\n        6.1.1  卷的应用示例  162\n        6.1.2  介绍可用的卷类型  164\n        6.2  通过卷在容器之间共享数据  165\n        6.2.1  使用 emptyDir 卷  165\n        6.2.2  使用 Git 仓库作为存储卷  168\n        6.3  访问工作节点文件系统上的文件  171\n        6.3.1  介绍 hostPath 卷  171\n        6.3.2  检查使用 hostPath 卷的系统 pod  172\n        6.4  使用持久化存储  173\n        6.4.1  使用 GCE 持久磁盘作为 pod 存储卷  174\n        6.4.2  通过底层持久化存储使用其他类型的卷  177\n        6.5  从底层存储技术解耦 pod  179\n        6.5.1  介绍持久卷和持久卷声明  179\n        6.5.2  创建持久卷  180\n        6.5.3  通过创建持久卷声明来获取持久卷  182\n        6.5.4  在 pod 中使用持久卷声明  184\n        6.5.5  了解使用持久卷和持久卷声明的好处  185\n        6.5.6  回收持久卷  186\n        6.6  持久卷的动态卷配置  187\n        6.6.1  通过 StorageClass 资源定义可用存储类型  188\n        6.6.2  请求持久卷声明中的存储类  188\n        6.6.3  不指定存储类的动态配置  190\n        6.7  本章小结  193\n        7  ConfigMap 和 Secret ：配置应用程序  195\n        7.1  配置容器化应用程序  195\n        7.2  向容器传递命令行参数  196\n        7.2.1  在 Docker 中定义命令与参数  196\n        7.2.2  在 Kubernetes 中覆盖命令和参数  199\n        7.3  为容器设置环境变量  200\n        7.3.1  在容器定义中指定环境变量  201\n        7.3.2  在环境变量值中引用其他环境变量  201\n        7.3.3  了解硬编码环境变量的不足之处  202\n        7.4  利用 ConfigMap 解耦配置  202\n        7.4.1  ConfigMap 介绍  202\n        7.4.2  创建 ConfigMap  203\n        7.4.3  给容器传递 ConfigMap 条目作为环境变量  206\n        7.4.4  一次性传递 ConfigMap 的所有条目作为环境变量  208\n        7.4.5  传递 ConfigMap 条目作为命令行参数  209\n        7.4.6  使用 configMap 卷将条目暴露为文件  210\n        7.4.7  更新应用配置且不重启应用程序  216\n        7.5  使用 Secret 给容器传递敏感数据  218\n        7.5.1  介绍 Secret  218\n        7.5.2  默认令牌 Secret 介绍  218\n        7.5.3  创建 Secret  220\n        7.5.4  对比 ConfigMap 与 Secret  221\n        7.5.5  在 pod 中使用 Secret  222\n        7.6  本章小结  228\n        8  从应用访问 pod 元数据以及其他资源  229\n        8.1  通过 Downward API 传递元数据  229\n        8.1.1  了解可用的元数据  230\n        8.1.2  通过环境变量暴露元数据  231\n        8.1.3  通过 downwardAPI 卷来传递元数据  234\n        8.2  与 Kubernetes API 服务器交互  237\n        8.2.1  探究 Kubernetes REST API  238\n        8.2.2  从 pod 内部与 API 服务器进行交互  242\n        8.2.3  通过 ambassador 容器简化与 API 服务器的交互  248\n        8.2.4  使用客户端库与 API 服务器交互  251\n        8.3  本章小结  253\n        9  Deployment: 声明式地升级应用  255\n        9.1  更新运行在 pod 内的应用程序  256\n        9.1.1  删除旧版本 pod，使用新版本 pod 替换  257\n        9.1.2  先创建新 pod 再删除旧版本 pod  257\n        9.2  使用 ReplicationController 实现自动的滚动升级  259\n        9.2.1  运行第一个版本的应用  259\n        9.2.2  使用 kubectl 来执行滚动式升级  261\n        9.2.3  为什么 kubectl rolling-update 已经过时  265\n        9.3  使用 Deployment 声明式地升级应用  266\n        9.3.1  创建一个 Deployment  267\n        9.3.2  升级 Deployment  269\n        9.3.3  回滚 Deployment  273\n        9.3.4  控制滚动升级速率  276\n        9.3.5  暂停滚动升级  278\n        9.3.6  阻止出错版本的滚动升级  279\n        9.4  本章小结  284\n        10  StatefulSet ：部署有状态的多副本应用  285\n        10.1  复制有状态 pod  285\n        10.1.1  运行每个实例都有单独存储的多副本  286\n        10.1.2  每个 pod 都提供稳定的标识  287\n        10.2  了解 Statefulset  289\n        10.2.1  对比 Statefulset 和 ReplicaSet  289\n        10.2.2  提供稳定的网络标识  290\n        10.2.3  为每个有状态实例提供稳定的专属存储  292\n        10.2.4  Statefulset 的保障  294\n        10.3  使用 Statefulset  295\n        10.3.1  创建应用和容器镜像  295\n        10.3.2  通过 Statefulset 部署应用  296\n        10.3.3  使用你的 pod  301\n        10.4  在 Statefulset 中发现伙伴节点  305\n        10.4.1  通过 DNS 实现伙伴间彼此发现  306\n        10.4.2  更新 Statefulset  308\n        10.4.3  尝试集群数据存储  309\n        10.5  了解 Statefulset 如何处理节点失效  310\n        10.5.1  模拟一个节点的网络断开  310\n        10.5.2  手动删除 pod  312\n        10.6  本章小结  313\n        11  了解 Kubernetes 机理  315\n        11.1  了解架构  315\n        11.1.1  Kubernetes 组件的分布式特性  316\n        11.1.2  Kubernetes 如何使用 etcd  318\n        11.1.3  API 服务器做了什么  322\n        11.1.4  API 服务器如何通知客户端资源变更  324\n        11.1.5  了解调度器  325\n        11.1.6  介绍控制器管理器中运行的控制器  327\n        11.1.7  Kubelet 做了什么  331\n        11.1.8  Kubernetes Service Proxy 的作用  332\n        11.1.9  介绍 Kubernetes 插件  333\n        11.1.10  总结概览  335\n        11.2  控制器如何协作  335\n        11.2.1  了解涉及哪些组件  335\n        11.2.2  事件链  336\n        11.2.3  观察集群事件  337\n        11.3  了解运行中的 pod 是什么  339\n        11.4  跨 pod 网络  340\n        11.4.1  网络应该是什么样的  340\n        11.4.2  深入了解网络工作原理  341\n        11.4.3  引入容器网络接口  343\n        11.5  服务是如何实现的  344\n        11.5.1  引入 kube-proxy  344\n        11.5.2  kube-proxy 如何使用 iptables  344\n        11.6  运行高可用集群  346\n        11.6.1  让你的应用变得高可用  346\n        11.6.2  让 Kubernetes 控制平面变得高可用  347\n        11.7  本章小结  350\n        12  Kubernetes API 服务器的安全防护  351\n        12.1  了解认证机制  351\n        12.1.1  用户和组  352\n        12.1.2  ServiceAccount 介绍  353\n        12.1.3  创建 ServiceAccount  354\n        12.1.4  将 ServiceAccount 分配给 pod  356\n        12.2  通过基于角色的权限控制加强集群安全  358\n        12.2.1  介绍 RBAC 授权插件  359\n        12.2.2  介绍 RBAC 资源  360\n        12.2.3  使用 Role 和 RoleBinding  363\n        12.2.4  使用 ClusterRole 和 ClusterRoleBinding  367\n        12.2.5  了解默认的 ClusterRole 和 ClusterRoleBinding  376\n        12.2.6  理性地授予授权权限  379\n        12.3  本章小结  379\n        13  保障集群内节点和网络安全  381\n        13.1  在 pod 中使用宿主节点的 Linux 命名空间  381\n        13.1.1  在 pod 中使用宿主节点的网络命名空间  382\n        13.1.2  绑定宿主节点上的端口而不使用宿主节点的网络命名空间  383\n        13.1.3  使用宿主节点的 PID 与 IPC 命名空间  385\n        13.2  配置节点的安全上下文  386\n        13.2.1  使用指定用户运行容器  387\n        13.2.2  阻止容器以 root 用户运行  388\n        13.2.3  使用特权模式运行 pod  389\n        13.2.4  为容器单独添加内核功能  390\n        13.2.5  在容器中禁用内核功能  391\n        13.2.6  阻止对容器根文件系统的写入  392\n        13.2.7  容器使用不同用户运行时共享存储卷  394\n        13.3  限制 pod 使用安全相关的特性  396\n        13.3.1  PodSecurityPolicy 资源介绍  396\n        13.3.2  了解 runAsUser、 fsGroup 和 supplementalGroup 策略  398\n        13.3.3  配置允许、默认添加、禁止使用的内核功能  400\n        13.3.4  限制 pod 可以使用的存储卷类型  402\n        13.3.5  对不同的用户与组分配不同的 PodSecurityPolicy  402\n        13.4  隔离 pod 的网络  406\n        13.4.1  在一个命名空间中启用网络隔离  406\n        13.4.2  允许同一命名空间中的部分 pod 访问一个服务端 pod  407\n        13.4.3  在不同 Kubernetes 命名空间之间进行网络隔离  408\n        13.4.4  使用 CIDR 隔离网络  409\n        13.4.5  限制 pod 的对外访问流量  409\n        13.5  本章小结  410\n        14  计算资源管理  411\n        14.1  为 pod 中的容器申请资源  411\n        14.1.1  创建包含资源 requests 的 pod  412\n        14.1.2  资源 requests 如何影响调度  413\n        14.1.3  CPU requests 如何影响 CPU 时间分配  418\n        14.1.4  定义和申请自定义资源  418\n        14.2  限制容器的可用资源  419\n        14.2.1  设置容器可使用资源量的硬限制  419\n        14.2.2  超过 limits  421\n        14.2.3  容器中的应用如何看待 limits  422\n        14.3  了解 pod QoS 等级  423\n        14.3.1  定义 pod 的 QoS 等级  424\n        14.3.2  内存不足时哪个进程会被杀死  426\n        14.4  为命名空间中的 pod 设置默认的 requests 和 limits  427\n        14.4.1  LimitRange 资源简介  428\n        14.4.2  LimitRange 对象的创建  428\n        14.4.3  强制进行限制  430\n        14.4.4  应用资源 requests 和 limits 的默认值  430\n        14.5  限制命名空间中的可用资源总量  431\n        14.5.1  ResourceQuota 资源介绍  431\n        14.5.2  为持久化存储指定配额  434\n        14.5.3  限制可创建对象的个数  434\n        14.5.4  为特定的 pod 状态或者 QoS 等级指定配额  435\n        14.6  监控 pod 的资源使用量  436\n        14.6.1  收集、获取实际资源使用情况  437\n        14.6.2  保存并分析历史资源的使用统计信息  439\n        14.7  本章小结  442\n        15  自动横向伸缩 pod 与集群节点  443\n        15.1  pod 的横向自动伸缩  444\n        15.1.1  了解自动伸缩过程  444\n        15.1.2  基于 CPU 使用率进行自动伸缩  447\n        15.1.3  基于内存使用进行自动伸缩  453\n        15.1.4  基于其他自定义度量进行自动伸缩  453\n        15.1.5  确定哪些度量适合用于自动伸缩  456\n        15.1.6  缩容到 0 个副本  456\n        15.2  pod 的纵向自动伸缩  456\n        15.2.1  自动配置资源请求  457\n        15.2.2  修改运行中 pod 的资源请求  457\n        15.3  集群节点的横向伸缩  457\n        15.3.1  Cluster Autoscaler 介绍  457\n        15.3.2  启用 Cluster Autoscaler  459\n        15.3.3  限制集群缩容时的服务干扰  460\n        15.4  本章小结  461\n        16  高级调度  463\n        16.1  使用污点和容忍度阻止节点调度到特定节点  463\n        16.1.1  介绍污点和容忍度  464\n        16.1.2  在节点上添加自定义污点  466\n        16.1.3  在 pod 上添加污点容忍度  467\n        16.1.4  了解污点和污点容忍度的使用场景  467\n        16.2  使用节点亲缘性将 pod 调度到特定节点上  469\n        16.2.1  指定强制性节点亲缘性规则  470\n        16.2.2  调度 pod 时优先考虑某些节点  472\n        16.3  使用 pod 亲缘性与非亲缘性对 pod 进行协同部署  475\n        16.3.1  使用 pod 间亲缘性将多个 pod 部署在同一个节点上  475\n        16.3.2  将 pod 部署在同一机柜、可用性区域或者地理地域  478\n        16.3.3  表达 pod 亲缘性优先级取代强制性要求  479\n        16.3.4  利用 pod 的非亲缘性分开调度 pod  481\n        16.4  本章小结  483\n        17  开发应用的最佳实践  485\n        17.1  集中一切资源  486\n        17.2  了解 pod 的生命周期  487\n        17.2.1  应用必须预料到会被杀死或者重新调度  487\n        17.2.2  重新调度死亡的或者部分死亡的 pod  490\n        17.2.3  以固定顺序启动 pod  491\n        17.2.4  增加生命周期钩子  493\n        17.2.5  了解 pod 的关闭  497\n        17.3  确保所有的客户端请求都得到了妥善处理  500\n        17.3.1  在 pod 启动时避免客户端连接断开  500\n        17.3.2  在 pod 关闭时避免客户端连接断开  501\n        17.4  让应用在 Kubernetes 中方便运行和管理  505\n        17.4.1  构建可管理的容器镜像  505\n        17.4.2  合理地给镜像打标签，正确地使用 ImagePullPolicy  506\n        17.4.3  使用多维度而不是单维度的标签  506\n        17.4.4  通过注解描述每个资源  506\n        17.4.5  给进程终止提供更多的信息  507\n        17.4.6  处理应用日志  508\n        17.5  开发和测试的最佳实践  510\n        17.5.1  开发过程中在 Kubernetes 之外运行应用  510\n        17.5.2  在开发过程中使用 Minikube  512\n        17.5.3  发布版本和自动部署资源清单  513\n        17.5.4  使用 Ksonnet 作为编写 YAML/JSON manifest文件的额外选择  513\n        17.5.5  利用持续集成和持续交付  514\n        17.6  本章小结  515\n        18  Kubernetes 应用扩展  517\n        18.1  定义自定义 API 对象  517\n        18.1.1  CustomResourceDefinitions 介绍  518\n        18.1.2  使用自定义控制器自动定制资源  522\n        18.1.3  验证自定义对象  526\n        18.1.4  为自定义对象提供自定义 API 服务器  527\n        18.2  使用 Kubernetes 服务目录扩展 Kubernetes  528\n        18.2.1  服务目录介绍  529\n        18.2.2  服务目录 API 服务器与控制器管理器介绍  530\n        18.2.3  Service 代理和 OpenServiceBroker API  530\n        18.2.4  提供服务与使用服务  533\n        18.2.5  解除绑定与取消配置  535\n        18.2.6  服务目录给我们带来了什么  535\n        18.3  基于 Kubernetes 搭建的平台  536\n        18.3.1  红帽 OpenShift 容器平台  536\n        18.3.2  Deis Workflow 与 Helm  539\n        18.4  本章小结  541\n        A  在多个集群中使用 kubectl  543\n        B  使用 kubeadm 配置多节点集群  549\n        C  使用其他容器运行时  563\n        D  Cluster Federation  567\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 42 条",
      "commentsList": [
        {
          "user": "Jay",
          "ratingScore": "力荐",
          "ratingTime": "2019-07-21",
          "thumbsUpCount": "2",
          "content": "给整书的评分，但第11章真的是，张钦尧你是用google翻译的吧。。"
        },
        {
          "user": "polar9527",
          "ratingScore": "较差",
          "ratingTime": "2019-05-27",
          "thumbsUpCount": "4",
          "content": "给中译本的评分，就说一下第11章吧，张钦尧你是在完成公司派给你的任务吧。一个团队每人分一个章节翻译，能保证质量吗？纯粹就是想利用这本书给公司制造点曝光度。"
        },
        {
          "user": "惟以不永怀",
          "ratingScore": "力荐",
          "ratingTime": "2019-12-07",
          "thumbsUpCount": "1",
          "content": "了解kubernetes全景图的绝佳入门图书，只有对kubernetes有深刻理解的人才能写出这么深入浅出的书，看完更加体会到使用yaml文件进行状态描述的系统设计思想的优点。建议大家看完这本书后再看看极客时间上的《深入剖析Kubernetes》，功力可再精进一层~"
        },
        {
          "user": "莱斯基",
          "ratingScore": "力荐",
          "ratingTime": "2019-09-17",
          "thumbsUpCount": "1",
          "content": "以前觉得 k8s 挺复杂的，读完之后才发现比我想象的要简单很多，也要复杂很多🤯。此书从各个 k8s 组件入手，从功能讲到控制流，再通过实践用法讲到注意事项，难怪大佬说读这一本足矣，确实是一本不多见的涵盖广阔提纲挈领的好书。"
        },
        {
          "user": "hoiyd",
          "ratingScore": "力荐",
          "ratingTime": "2019-05-23",
          "thumbsUpCount": "1",
          "content": "有错别字，不同章节的翻译质量也不同。不过总的来说是一本K8S的好书，解开了我很多许久的疑惑。"
        },
        {
          "user": "carl的修行",
          "ratingScore": "力荐",
          "ratingTime": "2019-07-27",
          "thumbsUpCount": "1",
          "content": "从开发者角度来写，看完会对整个k8s有个整体完整的认识"
        },
        {
          "user": "松仓",
          "ratingScore": "推荐",
          "ratingTime": "2019-07-20",
          "thumbsUpCount": "1",
          "content": "配的流程图很清晰，内容编排合理，通读一遍算了大致有点概念了"
        },
        {
          "user": "wangxu",
          "ratingScore": "力荐",
          "ratingTime": "2019-01-28",
          "thumbsUpCount": "1",
          "content": "从零开始首选，翻译的也不错"
        },
        {
          "user": "iCoolSea",
          "ratingScore": "力荐",
          "ratingTime": "2019-12-26",
          "thumbsUpCount": "0",
          "content": "相当流畅👍"
        },
        {
          "user": "Olivia",
          "ratingScore": "推荐",
          "ratingTime": "2019-12-04",
          "thumbsUpCount": "0",
          "content": "概念厘清，跳坑预警。"
        }
      ]
    }
  },
  {
    "title": "Kubernetes权威指南:从Docker到Kubernetes实践全接触（纪念版）",
    "bookUrl": "https://book.douban.com/subject/27112874/",
    "authorInfo": "闫健勇、龚正、吴治辉、王伟、崔秀龙、崔晓宁、刘晓红 ",
    "pubInfo": " 电子工业出版社 / 2017-9 / 119.00",
    "bookInfo": {
      "img": [
        "https://img1.doubanio.com/view/subject/l/public/s29515827.jpg",
        "https://img1.doubanio.com/view/subject/s/public/s29515827.jpg"
      ],
      "originalName": "",
      "averageRating": " 7.3 ",
      "ratersCount": "47",
      "ratings": [
        "29.8%",
        "42.6%",
        "21.3%",
        "4.3%",
        "2.1%"
      ],
      "bookIntro": "",
      "authorIntro": "",
      "bookToc": "第1章  Kubernetes入门\t1\n        1.1  Kubernetes是什么\t1\n        1.2  为什么要用Kubernetes\t4\n        1.3  从一个简单的例子开始\t5\n        1.3.1  环境准备\t6\n        1.3.2  启动MySQL服务\t6\n        1.3.3  启动Tomcat应用\t9\n        1.3.4  通过浏览器访问网页\t10\n        1.4  Kubernetes基本概念和术语\t12\n        1.4.1  Master\t12\n        1.4.2  Node\t12\n        1.4.3  Pod\t15\n        1.4.4  Label（标签）\t18\n        1.4.5  Replication Controller\t22\n        1.4.6  Deployment\t26\n        1.4.7  Horizontal Pod Autoscaler\t28\n        1.4.8  StatefulSet\t29\n        1.4.9  Service（服务）\t30\n        1.4.10  Volume（存储卷）\t37\n        1.4.11  Persistent Volume\t41\n        1.4.12  Namespace（命名空间）\t42\n        1.4.13  Annotation（注解）\t43\n        1.4.14  小结\t44\n        第2章  Kubernetes实践指南\t45\n        2.1  Kubernetes安装与配置\t45\n        2.1.1  系统要求\t45\n        2.1.2  使用kubeadm工具快速安装Kubernetes集群\t46\n        2.1.3  以二进制文件方式安装Kubernetes集群\t51\n        2.1.4  Kubernetes集群的安全设置\t59\n        2.1.5  Kubernetes集群的网络配置\t64\n        2.1.6  内网中的Kubernetes相关配置\t64\n        2.1.7  Kubernetes的版本升级\t65\n        2.1.8  Kubernetes核心服务配置详解\t66\n        2.2  kubectl命令行工具用法详解\t86\n        2.2.1  kubectl用法概述\t86\n        2.2.2  kubectl子命令详解\t88\n        2.2.3  kubectl参数列表\t90\n        2.2.4  kubectl输出格式\t90\n        2.2.5  kubectl操作示例\t92\n        2.3  深入掌握Pod\t93\n        2.3.1  Pod定义详解\t93\n        2.3.2  Pod的基本用法\t98\n        2.3.3  静态Pod\t103\n        2.3.4  Pod容器共享Volume\t104\n        2.3.5  Pod的配置管理\t106\n        2.3.6  在容器内获取Pod信息（Downward API）\t119\n        2.3.7  Pod生命周期和重启策略\t124\n        2.3.8  Pod健康检查\t125\n        2.3.9  玩转Pod调度\t127\n        2.3.10  Init Container（初始化容器）\t149\n        2.3.11  Pod的升级和回滚\t152\n        2.3.12  Pod的扩容和缩容\t166\n        2.3.13  使用StatefulSet搭建MongoDB集群\t171\n        2.4  深入掌握Service\t180\n        2.4.1  Service定义详解\t181\n        2.4.2  Service基本用法\t182\n        2.4.3  Headless Service\t187\n        2.4.4  集群外部访问Pod或Service\t192\n        2.4.5  DNS服务搭建指南\t196\n        2.4.6  自定义DNS和上游DNS服务器\t204\n        2.4.7  Ingress：HTTP 7层路由机制\t208\n        第3章  Kubernetes核心原理\t226\n        3.1  Kubernetes API Server 原理分析\t226\n        3.1.1  Kubernetes API Server概述\t226\n        3.1.2  独特的Kubernetes Proxy API接口\t229\n        3.1.3  集群功能模块之间的通信\t230\n        3.2  Controller Manager 原理分析\t231\n        3.2.1  Replication Controller\t232\n        3.2.2  Node Controller\t234\n        3.2.3  ResourceQuota Controller\t235\n        3.2.4  Namespace Controller\t237\n        3.2.5  Service Controller与Endpoint Controller\t237\n        3.3  Scheduler原理分析\t238\n        3.4  kubelet运行机制分析\t242\n        3.4.1  节点管理\t242\n        3.4.2  Pod管理\t243\n        3.4.3  容器健康检查\t244\n        3.4.4  cAdvisor资源监控\t245\n        3.5  kube-proxy 运行机制分析\t247\n        3.6  深入分析集群安全机制\t251\n        3.6.1  API Server认证管理（Authentication）\t251\n        3.6.2  API Server授权管理（Authorization）\t253\n        3.6.3  Admission Control（准入控制）\t272\n        3.6.4  Service Account\t274\n        3.6.5  Secret私密凭据\t279\n        3.7  网络原理\t282\n        3.7.1  Kubernetes网络模型\t282\n        3.7.2  Docker的网络基础\t284\n        3.7.3  Docker的网络实现\t296\n        3.7.4  Kubernetes的网络实现\t304\n        3.7.5  Pod和Service网络实战\t308\n        3.7.6  CNI网络模型\t321\n        3.7.7  Kubernetes网络策略\t331\n        3.7.8  开源的网络组件\t333\n        3.8  共享存储原理\t363\n        3.8.1  共享存储机制概述\t363\n        3.8.2  PV详解\t364\n        3.8.3  PVC详解\t368\n        3.8.4  PV和PVC的生命周期\t370\n        3.8.5  StorageClass详解\t373\n        3.8.6  动态存储管理实战：GlusterFS\t376\n        第4章  Kubernetes开发指南\t388\n        4.1  REST简述\t388\n        4.2  Kubernetes API详解\t390\n        4.2.1  Kubernetes API概述\t390\n        4.2.2  API版本\t395\n        4.2.3  API Groups（API组）\t395\n        4.2.4  API方法说明\t397\n        4.2.5  API响应说明\t398\n        4.3  使用Java程序访问Kubernetes API\t400\n        4.3.1  Jersey\t401\n        4.3.2  Fabric8\t412\n        4.3.3  使用说明\t413\n        第5章  Kubernetes运维指南\t434\n        5.1  Kubernetes集群管理指南\t434\n        5.1.1  Node的管理\t434\n        5.1.2  更新资源对象的Label\t436\n        5.1.3  Namespace：集群环境共享与隔离\t437\n        5.1.4  Kubernetes资源管理\t441\n        5.1.5  资源紧缺时的Pod驱逐机制\t475\n        5.1.6  Pod Disruption Budget（主动驱逐保护）\t483\n        5.1.7  Kubernetes集群的高可用部署方案\t485\n        5.1.8  Kubernetes集群监控\t496\n        5.1.9  集群统一日志管理\t513\n        5.1.10  Kubernetes审计日志（Audit Log）\t522\n        5.1.11  使用Web UI（Dashboard）管理集群\t523\n        5.1.12  Helm：Kubernetes应用包管理工具\t527\n        5.2  Trouble Shooting指导\t538\n        5.2.1  查看系统Event事件\t538\n        5.2.2  查看容器日志\t540\n        5.2.3  查看Kubernetes服务日志\t541\n        5.2.4  常见问题\t542\n        5.2.5  寻求帮助\t546\n        5.3  Kubernetes开发中的新功能\t546\n        5.3.1  Pod Preset（运行时参数注入策略）\t546\n        5.3.2  Cluster Federation（集群联邦）\t553\n        5.3.3  容器运行时接口（Container Runtime Interface-CRI）\t557\n        5.3.4  对GPU的支持\t561\n        5.3.5  Kubernetes的演进路线（Roadmap）和开发模式\t565\n        第6章  Kubernetes源码导读\t568\n        6.1  Kubernetes源码结构和编译步骤\t568\n        6.2  kube-apiserver进程源码分析\t572\n        6.2.1  进程启动过程\t572\n        6.2.2  关键代码分析\t574\n        6.2.3  设计总结\t589\n        6.3  kube-controller-manager进程源码分析\t592\n        6.3.1  进程启动过程\t592\n        6.3.2  关键代码分析\t595\n        6.3.3  设计总结\t603\n        6.4  kube-scheduler进程源码分析\t605\n        6.4.1  进程启动过程\t605\n        6.4.2  关键代码分析\t610\n        6.4.3  设计总结\t617\n        6.5  kubelet进程源码分析\t619\n        6.5.1  进程启动过程\t619\n        6.5.2  关键代码分析\t624\n        6.5.3  设计总结\t647\n        6.6  kube-proxy进程源码分析\t648\n        6.6.1  进程启动过程\t648\n        6.6.2  关键代码分析\t650\n        6.6.3  设计总结\t665\n        6.7  kubectl进程源码分析\t666\n        6.7.1  kubectl create命令\t667\n        6.7.2  rolling-update命令\t671\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 15 条",
      "commentsList": [
        {
          "user": "映天蓝",
          "ratingScore": "还行",
          "ratingTime": "2017-12-17",
          "thumbsUpCount": "0",
          "content": "从概念到每个模块部分的讲解都细致，后面还有一个难得的源码分析。不好的部分主要是，整个结构不成体系，各章节的衔接并不顺畅，命令和api罗列过多，占去过多篇幅，另外，由于kubernetes发展太快，里面有些部分已经稍显落伍，但这也不能怪作者，可以配合infoq上的kubernetes手册使用，最后，本书对于刚入门的人来讲稍厚。"
        },
        {
          "user": "Ziv",
          "ratingScore": "还行",
          "ratingTime": "2019-03-12",
          "thumbsUpCount": "0",
          "content": "有点儿大杂烩，不少内容也过时了。"
        },
        {
          "user": "abyzsin",
          "ratingScore": "推荐",
          "ratingTime": "2018-12-09",
          "thumbsUpCount": "0",
          "content": "对k8s略窥门径，除了介绍的k8s版本比较旧（1.6，目前已经是1.13）以外，其实内容还是比较不错的，期待未来能有更新版。"
        },
        {
          "user": "stany",
          "ratingScore": "推荐",
          "ratingTime": "2019-12-29",
          "thumbsUpCount": "0",
          "content": "推荐第四版"
        },
        {
          "user": "仗剑狂歌",
          "ratingScore": "力荐",
          "ratingTime": "2018-03-05",
          "thumbsUpCount": "0",
          "content": "2017年11月份买，2018年3月5日才走马观花，一目十行的看完，这样单纯的看完有啥意义，关键是实践和掌握啊。"
        },
        {
          "user": "皱月名",
          "ratingScore": "推荐",
          "ratingTime": "2018-06-13",
          "thumbsUpCount": "0",
          "content": "还可以"
        },
        {
          "user": "懒牛随想",
          "ratingScore": "力荐",
          "ratingTime": "2018-11-17",
          "thumbsUpCount": "0",
          "content": "中国人写的书，厚厚的一本，还不是堆代码，太难得了"
        },
        {
          "user": "张同学",
          "ratingScore": "还行",
          "ratingTime": "2019-01-10",
          "thumbsUpCount": "0",
          "content": "内容不成体系，很多时候只是告诉你怎么做，而不会从上到下讲为什么这么做；\n太多无用的内容，比如把所有命令的所有参数都列出来，这些去看man好不好；\n源码导读部分占用太多篇幅，对不需要的人来说就是累赘，完全可以单独成书；\n太多人一起攒的书，风格和内容读起来不是很一致；\n两年三版，这个频率有点为了出版而出版的感觉。"
        },
        {
          "user": "CG",
          "ratingScore": "较差",
          "ratingTime": "2019-03-23",
          "thumbsUpCount": "0",
          "content": "罗列一些功能和信息，没多少原理或者逻辑，基本看完也不知道这书要给谁看"
        },
        {
          "user": "yang",
          "ratingScore": "很差",
          "ratingTime": "2018-11-25",
          "thumbsUpCount": "0",
          "content": "基本都是翻译过来的,参数还一个一个翻译,基本属于骗钱"
        }
      ]
    }
  },
  {
    "title": "微服务架构实战:基于SpringBoot、SpringCloud、Docker",
    "bookUrl": "https://book.douban.com/subject/30417709/",
    "authorInfo": "郑天民 ",
    "pubInfo": " 人民邮电出版社 / 2018-12 / 59.80",
    "bookInfo": {
      "img": [
        "https://img1.doubanio.com/view/subject/l/public/s29963738.jpg",
        "https://img1.doubanio.com/view/subject/s/public/s29963738.jpg"
      ],
      "originalName": "",
      "averageRating": 0.0,
      "ratersCount": 0,
      "ratings": [],
      "bookIntro": "本书主要包含微服务架构实现过程中所应具备的技术体系和工程实践，围绕实现微服务架构的基础组件和关键要素，我们将讨论使用Spring Boot构建服务、服务治理、负载均衡、服务容错、API网关、配置中心、事件驱动、服务安全、服务监控、服务测试和Docker与服务部署等核心主题，并基于这些核心主题给出具体的案例分析。",
      "authorIntro": "郑天民，网名天涯兰，日本足利工业大学信息工程学硕士。10年软件行业从业经验，在医疗、安防和电商行业都有所涉及，前后担任系统分析架构师、部门经理、技术总监等职务，对架构设计和技术管理有丰富的经验和深入的理解。主持过十余个面向研发人员的技术和管理类培训课程，著有《系统架构设计：程序员向架构师转型之路》、《向技术管理者转型：软件开发人员跨越行业、技术、管理的转型思维与实践》、《微服务设计原理与架构》等书籍。",
      "bookToc": "第1章 微服务架构设计 1\n        1.1 直面微服务架构 1\n        1.1.1 分布式系统与微服务架构 1\n        1.1.2 微服务架构的优势与挑战 3\n        1.1.3 实施微服务架构 5\n        1.2 服务建模方法 6\n        1.2.1 服务的模型 6\n        1.2.2 服务的边界 7\n        1.2.3 服务的数据 7\n        1.3 服务拆分与集成 8\n        1.3.1 服务拆分 8\n        1.3.2 服务集成 9\n        1.4 微服务架构的基础组件和关键要素 10\n        1.4.1 微服务架构的基础组件 11\n        1.4.2 微服务架构的关键元素 11\n        1.5 实现微服务架构 13\n        1.5.1 微服务架构技术体系 13\n        1.5.2 微服务架构实现技术选型 14\n        1.6 案例分析 17\n        1.7 全书架构 18\n        1.8 本章小结 19\n        第2章 使用Spring Boot构建服务 21\n        2.1 引入Spring Boot 21\n        2.2 基于Spring Boot的第一个服务 23\n        2.2.1 环境准备 23\n        2.2.2 实现RESTful服务 24\n        2.3 Spring Boot常见功能 28\n        2.3.1 集成Spring Data 28\n        2.3.2 集成消息中间件 37\n        2.3.3 系统监控 39\n        2.4 Spring Boot基本原理 44\n        2.5 本章小结 46\n        第3章 Spring Cloud Netflix Eureka与服务治理 47\n        3.1 服务治理解决方案 48\n        3.1.1 服务治理的需求和模型 48\n        3.1.2 服务治理的基本方案 49\n        3.2 构建Eureka服务 52\n        3.2.1 构建单个Eureka服务器 52\n        3.2.2 构建Eureka服务器集群 55\n        3.3 使用Eureka注册和发现服务 57\n        3.3.1 通过配置实现服务注册 58\n        3.3.2 获取服务注册信息 59\n        3.4 Eureka基本架构 61\n        3.4.1 Eureka服务注册和发现架构 61\n        3.4.2 Eureka高可用架构 64\n        3.4.3 Eureka区域亲和性 65\n        3.5 本章小结 66\n        第4章 Spring Cloud Netflix Ribbon与负载均衡 67\n        4.1 负载均衡 68\n        4.1.1 负载均衡的类型 68\n        4.1.2 负载均衡的算法 70\n        4.2 使用Ribbon实现客户端负载均衡 71\n        4.2.1 Spring Cloud Netflix Ribbon简介 71\n        4.2.2 使用DiscoveryClient查找服务 72\n        4.2.3 通过RestTemplate调用服务 74\n        4.3 Ribbon基本架构 78\n        4.3.1 Ribbon核心机制 79\n        4.3.2 Ribbon负载均衡策略 81\n        4.3.3 @LoadBalanced注解与RestTemplate 82\n        4.3.4 @RibbonClient注解与自定义负载均衡策略 83\n        4.4 本章小结 85\n        第5章 Spring Cloud Netflix Hystrix与服务容错 86\n        5.1 服务消费者容错思想和模式 87\n        5.1.1 服务消费者容错的需求 87\n        5.1.2 服务隔离 88\n        5.1.3 服务熔断 90\n        5.1.4 服务回退 91\n        5.2 使用Hystrix实现服务容错 91\n        5.2.1 引入Hystrix 92\n        5.2.2 使用Hystrix实现服务隔离 93\n        5.2.3 使用Hystrix实现服务熔断 96\n        5.2.4 使用Hystrix实现服务回退 99\n        5.3 Hystrix基本原理 101\n        5.3.1 服务隔离 101\n        5.3.2 服务熔断 103\n        5.3.3 Hystrix配置项 105\n        5.4 本章小结 109\n        第6章 Spring Cloud Netflix Zuul与API网关 110\n        6.1 服务网关的设计理念 111\n        6.1.1 服务网关的作用 111\n        6.1.2 服务网关的结构和功能 112\n        6.2 使用Zuul构建服务网关 113\n        6.2.1 构建Zuul服务器 113\n        6.2.2 配置Zuul服务路由 115\n        6.3 Zuul基本架构 120\n        6.3.1 ZuulFilter组件架构 120\n        6.3.2 使用Zuul过滤器 124\n        6.4 本章小结 129\n        第7章 Spring Cloud Config与配置中心 130\n        7.1 分布式配置中心方案 131\n        7.1.1 分布式配置模型 131\n        7.1.2 配置中心实现工具 133\n        7.2 构建配置中心服务器 134\n        7.2.1 引入Spring Cloud Config 134\n        7.2.2 实现基于本地文件系统的配置方案 135\n        7.2.3 实现基于Git的配置方案 139\n        7.3 使用配置服务 140\n        7.3.1 访问配置项 141\n        7.3.2 配置数据安全性 145\n        7.4 Spring Cloud Config特性 148\n        7.4.1 Spring Cloud Config对比Zookeeper 148\n        7.4.2 Spring Cloud Config高可用 149\n        7.5 本章小结 150\n        第8章 Spring Cloud Stream与事件驱动 151\n        8.1 事件驱动架构与模型 152\n        8.1.1 基本事件驱动架构与实现机制 152\n        8.1.2 事件驱动与领域模型 155\n        8.2 引入Spring Cloud Stream 157\n        8.2.1 Spring Cloud Stream基本架构 157\n        8.2.2 Spring Cloud Stream与Spring Integration 159\n        8.2.3 Spring Cloud Stream与消息中间件 162\n        8.3 实现消息发布者 165\n        8.3.1 消息发送场景与实现流程 165\n        8.3.2 在服务中添加消息发布者 166\n        8.4 实现消息消费者 170\n        8.4.1 消息消费场景与实现流程 170\n        8.4.2 在服务中添加消息消费者 172\n        8.5 本章小结 177\n        第9章 Spring Cloud Security与服务安全 178\n        9.1 服务访问安全性与OAuth协议 178\n        9.1.1 微服务架构中的安全性设计 179\n        9.1.2 OAuth协议 180\n        9.2 构建OAuth认证服务器 184\n        9.2.1 引入Spring Cloud Security 185\n        9.2.2 初始化用户与客户端 186\n        9.2.3 生成Token 191\n        9.3 使用OAuth保护服务访问 195\n        9.3.1 集成OAuth认证服务 195\n        9.3.2 创建服务访问策略 196\n        9.3.3 使用OAuth2RestTemplate传播Token 201\n        9.4 本章小结 206\n        第10章 Spring Cloud Sleuth与服务监控 207\n        10.1 服务监控与Spring Cloud Sleuth 207\n        10.1.1 服务监控基本原理 207\n        10.1.2 引入Spring Cloud Sleuth 209\n        10.2 整合Spring Cloud Sleuth与Zipkin 215\n        10.2.1 Zipkin基本结构 215\n        10.2.2 引入Zipkin 216\n        10.2.3 使用Zipkin跟踪服务调用链路 218\n        10.2.4 使用Zipkin实现自定义跟踪 226\n        10.3 本章小结 228\n        第11章 Spring Test与服务测试 230\n        11.1 微服务测试的方法 231\n        11.1.1 单元测试 231\n        11.1.2 集成测试 233\n        11.1.3 端到端测试 233\n        11.2 测试Spring Boot应用程序 234\n        11.2.1 初始化测试环境 234\n        11.2.2 执行单元测试 237\n        11.3 使用Mock和注解实施集成测试 241\n        11.3.1 使用@JsonTest注解测试JSON数据 242\n        11.3.2 使用@DataJpaTest注解测试Repository层 244\n        11.3.3 使用Mock测试Service层 248\n        11.3.4 使用Mock和@WebMvcTest注解测试Controller层 252\n        11.4 消费者驱动的契约测试 254\n        11.4.1 面向契约的端对端测试 254\n        11.4.2 实现面向契约的端对端测试 257\n        11.5 本章小结 266\n        第12章 Docker与服务部署 267\n        12.1 Docker与微服务架构 267\n        12.1.1 Docker的优势 268\n        12.1.2 Docker组件与命令 268\n        12.2 使用Dockerfile构建服务镜像 272\n        12.2.1 Dockerfile命令 272\n        12.2.2 使用Dockerfile命令构建镜像 273\n        12.3 使用Docker Compose编排服务 276\n        12.3.1 Docker Compose组件与命令 276\n        12.3.2 使用Docker Compose 279\n        12.3.3 Docker Compose案例分析 281\n        12.4 本章小结 283\n        参考文献 284\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 1 条",
      "commentsList": [
        {
          "user": "已注销",
          "ratingScore": "推荐",
          "ratingTime": "2019-08-25",
          "thumbsUpCount": "0",
          "content": "这本书应该是有门栏的，这里面有些知识点是默认读者了解的。偏重理论，并不太像市面上直接放代码那种非常细，也非常啰嗦的书籍。总体来说很受用。"
        }
      ]
    }
  },
  {
    "title": "微服务那些事儿",
    "bookUrl": "https://book.douban.com/subject/27048246/",
    "authorInfo": "纪晓峰 ",
    "pubInfo": " 电子工业出版社 / 2017-4 / 65.00",
    "bookInfo": {
      "img": [
        "https://img3.doubanio.com/view/subject/l/public/s29454153.jpg",
        "https://img3.doubanio.com/view/subject/s/public/s29454153.jpg"
      ],
      "originalName": "",
      "averageRating": " 6.3 ",
      "ratersCount": "24",
      "ratings": [
        "12.5%",
        "8.3%",
        "45.8%",
        "33.3%",
        "0.0%"
      ],
      "bookIntro": "本书以幽默风趣的语言生动地讲述了微服务，将微服务相关的理论知识、技术实现和项目实践一网打尽。全书共分为三大部分：*部分为“微服务解惑篇”，让读者对微服务有一个清晰的认识，消除对微服务的种种疑惑，同时对用户十分关注的如何拆分、如何使用等问题做了很全面的讲解；第二部分为“技术实现篇”，通过对当前世界*为流行的微服务框架Spring Boot Spring Cloud的常用组件的详细解读以及其他相关技术、工具的介绍，来帮助读者了解整体架构及其中各个组件的原理，结合代码帮助读者快速构建项目，搭建一个比较完整的微服务框架；第三部分为“项目实战篇”，通过案例来展示不同业务系统在微服务使用过程中如何梳理业务、如何拆分、如何使用微服务重构等。",
      "authorIntro": "纪晓峰，现任某公司架构师，曾经在AC担任微服务领域的咨询师，长期供职于HP，具有丰富的架构设计和开发经验，先后参与多个微服务项目。网名“叫我哲学家”，喜欢看书，钻研技术，领悟其中原理，习惯于独立思考，形成独到的见解。",
      "bookToc": "目 录\n        第一部分 微服务解惑篇\n        第1章 微服务架构 2\n        1.1 不微你就OUT了 2\n        1.2 产生背景 3\n        1.2.1 时代的召唤 3\n        1.2.2 容器神助攻 4\n        1.2.3 微服务的进击 4\n        1.3 微服务的标签 5\n        1.3.1 单一职责 6\n        1.3.2 微 6\n        1.3.3 面向服务 7\n        1.3.4 自治 8\n        1.3.5 易扩展 9\n        1.3.6 流程化 10\n        1.4 实力碾压 11\n        1.4.1 组件化 11\n        1.4.2 快速 13\n        1.4.3 可复用 13\n        1.4.4 机动灵活 13\n        1.5 不要奶我 14\n        1.5.1 不足 14\n        1.5.2 挑战 15\n        1.5.3 小结 16\n        1.6 本章小结 17\n        第2章 为何选择微服务 18\n        2.1 传统架构的病 18\n        2.1.1 中年危机 18\n        2.1.2 宝宝心里苦 19\n        2.2 微服务有药 21\n        2.2.1 讳疾忌医 21\n        2.2.2 朋友听说过安利么 22\n        2.2.3 沙盘演练看效果 22\n        2.3 微服务的价值 23\n        2.3.1 资源价值 24\n        2.3.2 业务价值 24\n        2.3.3 技术价值 24\n        2.3.4 用户价值 25\n        2.3.5 未来价值 25\n        2.3.6 小结 26\n        2.4 定个小目标 26\n        2.4.1 持续交付 26\n        2.4.2 业务敏捷 26\n        2.4.3 独立演进 27\n        2.4.4 高可用 27\n        2.4.5 高性能 27\n        2.4.6 站在云端 28\n        2.5 别人家的公司 28\n        2.6 来不及解释快上车 29\n        第3章 我拆我拆我拆拆拆 30\n        3.1 拆还是不拆 30\n        3.2 如何拆 32\n        3.2.1 庖丁解牛 32\n        3.2.2 数据模型和业务模型 33\n        3.2.3 金字塔结构图 33\n        3.2.4 关键指标 33\n        3.3 粒度 35\n        3.3.1 五笔字根 36\n        3.3.2 被遗忘的字典师傅 37\n        3.3.3 小结 37\n        3.4 边界 37\n        3.5 本章小结 38\n        第4章 如何使用微服务 39\n        4.1 如何规划 39\n        4.2 微服务重构 42\n        4.2.1 影响因素 42\n        4.2.2 重构原则 43\n        4.2.3 重构方法 44\n        4.3 本章小结 45\n        第5章 微服务的朋友圈 46\n        5.1 好朋友容器 46\n        5.1.1 容器的来历 46\n        5.1.2 容器的好处 47\n        5.1.3 小结 49\n        5.2 天生一对DevOps 49\n        5.2.1 DevOps是什么 49\n        5.2.2 为什么采用DevOps 50\n        5.2.3 小结 51\n        5.3 SOA是谁 51\n        5.3.1 接着忽悠 52\n        5.3.2 SOA是个什么鬼 52\n        5.3.3 小结 53\n        第二部分 技术实现篇\n        第6章 Spring Boot 56\n        6.1 介绍 56\n        6.2 特点 57\n        6.3 Spring Boot和微服务之间的关系 57\n        6.4 如何使用 58\n        6.5 可定制化 61\n        6.6 本章小结 64\n        第7章 Spring Cloud 65\n        7.1 Spring Cloud优势 66\n        7.2 Spring Cloud特点 67\n        7.3 Spring Cloud之服务管理 68\n        7.4 注册中心Eureka 69\n        7.4.1 什么是注册中心 69\n        7.4.2 为什么要有注册中心 69\n        7.4.3 Eureka来历 70\n        7.4.4 Eureka机制 71\n        7.4.5 如何使用 72\n        7.5 网关Zuul 77\n        7.5.1 Zuul 78\n        7.5.2 反向代理 78\n        7.5.3 如何使用 79\n        7.6 客户端负载均衡Ribbon 84\n        7.6.1 负载均衡 85\n        7.6.2 如何使用 85\n        7.6.3 补充说明 91\n        7.7 断路器Hystrix 92\n        7.7.1 如何隔离 93\n        7.7.2 电路熔断器模式 93\n        7.7.3 回滚降级 94\n        7.7.4 如何使用 95\n        7.7.5 交通疏导 101\n        7.7.6 小结 101\n        7.8 分布式配置中心Spring Cloud Config 101\n        7.8.1 为什么要有配置 102\n        7.8.2 集中配置的好处 103\n        7.8.3 配置方式的演进 103\n        7.8.4 如何使用 104\n        7.9 服务之间调用Feign 114\n        7.9.1 Feign如何使用 114\n        7.9.2 补充说明 118\n        7.10 服务追踪 119\n        7.10.1 Spring Cloud Sleuth介绍 119\n        7.10.2 Sleuth如何使用 120\n        7.10.3 日志聚合Zipkin 122\n        7.10.4 小结 127\n        7.11 Spring Cloud和Dubbo的比较 127\n        7.11.1 生的伟大 127\n        7.11.2 死的憋屈 127\n        7.11.3 没比较没伤害 128\n        7.11.4 现状 128\n        7.12 Spring Cloud与Spring Boot的关系 129\n        7.13 本章小结 130\n        第8章 其他相关技术和工具 131\n        8.1 数据库开发持续集成工具Liquibase 131\n        8.1.1 特性 132\n        8.1.2 使用 136\n        8.2 Swagger 144\n        8.2.1 为什么使用Swagger 144\n        8.2.2 如何使用 145\n        8.2.3 小结 149\n        8.3 权限spring security 150\n        8.4 微服务架构的通信方式 152\n        8.4.1 同步 153\n        8.4.2 异步 156\n        8.5 服务编排 160\n        8.6 管理工具JIRA 162\n        第9章 测试相关 166\n        9.1 单元测试 166\n        9.1.1 Mockito如何使用 168\n        9.1.2 Mock 与InjectMocks的区别 171\n        9.2 接口测试 173\n        9.3 代码质量管理工具Sonar 174\n        9.3.1 特点 174\n        9.3.2 使用 175\n        第三部分 项目实战篇\n        第10章 三个典型系统案例 188\n        10.1 企业运营支撑系统 188\n        10.1.1 背景 188\n        10.1.2 现状 188\n        10.1.3 原因调查 189\n        10.1.4 解决方案 190\n        10.2 车队管理系统 193\n        10.2.1 背景 193\n        10.2.2 技术架构 193\n        10.2.3 服务如何拆分 194\n        10.3 财务管理系统 195\n        10.3.1 背景 195\n        10.3.2 现状 195\n        10.3.3 原因调查 196\n        10.3.4 解决方案 196\n        10.4 本章小结 197\n        第11章 开发管理 198\n        11.1 管理原则 198\n        11.2 日常管理 198\n        11.3 代码质量管理 199\n        11.4 工作方式 199\n        11.5 BA的职责 199\n        11.6 SA的职责 200\n        11.7 DEV的工作原则 201\n        11.8 本章小结 201\n        后记 202\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 16 条",
      "commentsList": [
        {
          "user": "九三",
          "ratingScore": "力荐",
          "ratingTime": "2019-08-01",
          "thumbsUpCount": "0",
          "content": "当前项目组就是微服务架构，之前云里雾里的，看了这本书，解决了很多常识性问题。例如微服务，容器，反向代理等等。"
        },
        {
          "user": "文刀旋子",
          "ratingScore": 0.0,
          "ratingTime": "",
          "thumbsUpCount": "0",
          "content": "入门级，借可以一读，买就算了吧，直接看官方吧"
        },
        {
          "user": "零下八度",
          "ratingScore": "还行",
          "ratingTime": "2017-06-01",
          "thumbsUpCount": "0",
          "content": "普及类"
        },
        {
          "user": "Tr.Zoey",
          "ratingScore": "还行",
          "ratingTime": "2018-03-29",
          "thumbsUpCount": "0",
          "content": "冗余内容过多，许多详细的技术点既然只是点到为止，还不如直接删去，做更精简的介绍就好。"
        },
        {
          "user": "Nobu黄祁",
          "ratingScore": "较差",
          "ratingTime": "2018-09-17",
          "thumbsUpCount": "0",
          "content": "浮光掠影"
        },
        {
          "user": "strever",
          "ratingScore": "还行",
          "ratingTime": "2018-10-29",
          "thumbsUpCount": "0",
          "content": "都是工具的介绍，可以画个思维导图，这书就算学完了"
        },
        {
          "user": "DX3906",
          "ratingScore": "较差",
          "ratingTime": "2018-03-13",
          "thumbsUpCount": "0",
          "content": "两小时看完了"
        },
        {
          "user": "&nbsp;",
          "ratingScore": "还行",
          "ratingTime": "2019-05-05",
          "thumbsUpCount": "0",
          "content": "总体来说，入门书籍，快速翻阅，留个印象。更适合让非技术人员阅读了解微服务概念。技术人员对微服务架构的各个组件有初步认识。"
        },
        {
          "user": "沉寂之舟",
          "ratingScore": "推荐",
          "ratingTime": "2017-08-05",
          "thumbsUpCount": "0",
          "content": "很接地气的书,通俗易懂的讲解.另外还很\"贴心\"的给了spring cloud几大组件的小demo.感觉最后几个例子太单薄了点,如果能深入展开就更好了."
        },
        {
          "user": "萧暮",
          "ratingScore": "还行",
          "ratingTime": "2018-11-13",
          "thumbsUpCount": "0",
          "content": "微服务入门科普读物，建议阅读时间小于2小时。"
        }
      ]
    }
  },
  {
    "title": "数据密集型应用系统设计",
    "bookUrl": "https://book.douban.com/subject/30329536/",
    "authorInfo": "Martin Kleppmann / 赵军平、李三平、吕云松、耿煜 ",
    "pubInfo": " 中国电力出版社 / 2018-9-1 / 128",
    "bookInfo": {
      "img": [
        "https://img3.doubanio.com/view/subject/l/public/s29872642.jpg",
        "https://img3.doubanio.com/view/subject/s/public/s29872642.jpg"
      ],
      "originalName": "",
      "averageRating": " 9.6 ",
      "ratersCount": "369",
      "ratings": [
        "86.7%",
        "11.9%",
        "1.1%",
        "0.3%",
        "0.0%"
      ],
      "bookIntro": "",
      "authorIntro": "",
      "bookToc": "前言 .....................................................1\n        第一部分 数据系统基础\n        第1章 可靠、可扩展与可维护的应用系统 ................... 11\n        认识数据系统 ...........................................12\n        可靠性 ..................................................14\n        可扩展性 ................................................18\n        可维护性 ................................................25\n        小结 .....................................................28\n        第2章 数据模型与查询语言 ............................... 33\n        关系模型与文档模型 .......................................34\n        数据查询语言 ...........................................46\n        图状数据模型 ......................................52\n        小结 ...................................................65\n        第3章 数据存储与检索 .................................. 71\n        数据库核心：数据结构 ...................................72\n        事务处理与分析处理 ...................................89\n        列式存储 .........................................94\n        小结 ..............................................101\n        第4章 数据编码与演化 .............................. 109\n        数据编码格式 .................................... 110\n        数据流模式 ......................................124\n        小结 .............................................134\n        第二部分 分布式数据系统\n        第5章 数据复制 ................................. 145\n        主节点与从节点 ..................................146\n        复制滞后问题 ......................................154\n        多主节点复制 .......................................160\n        无主节点复制 .....................................168\n        小结 ..............................................181\n        第6章 数据分区 ............................... 189\n        数据分区与数据复制 .................................190\n        键-值数据的分区 ...................................190\n        分区与二级索引 ...................................195\n        分区再平衡 ....................................198\n        请求路由 ..................................202\n        小结 .................................204\n        第7章 事务 .............................. 211\n        深入理解事务 ......................................212\n        弱隔离级别 .................................221\n        串行化 ...........................................237\n        小结 ...........................................250\n        第8章 分布式系统的挑战 ...................... 259\n        故障与部分失效 ...............................260\n        不可靠的网络 ..................................262\n        不可靠的时钟 ..................................271\n        知识，真相与谎言 ...............................282\n        小结 ..........................................292\n        第9章 一致性与共识 ..................... 303\n        一致性保证 ....................................304\n        可线性化 ........................................305\n        顺序保证 ........................................319\n        分布式事务与共识 .................................330\n        小结 ...............................................349\n        第三部分 派生数据\n        第10章 批处理系统 ................................ 367\n        使用UNIX工具进行批处理 .............................368\n        MapReduce与分布式文件系统 .........................375\n        超越MapReduce ....................................394\n        小结 ............................................403\n        第11章 流处理系统 .............................. 413\n        发送事件流 .......................................414\n        数据库与流 .......................................424\n        流处理 .........................................435\n        小结 ............................................449\n        第12章 数据系统的未来 ............................ 461\n        数据集成 .........................................461\n        分拆数据库 .......................................469\n        端到端的正确性 ....................................484\n        做正确的事情 .......................................500\n        小结 ..............................................509\n        术语表 ............................................ 521\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 111 条",
      "commentsList": [
        {
          "user": "张岩kris",
          "ratingScore": "推荐",
          "ratingTime": "2019-02-24",
          "thumbsUpCount": "37",
          "content": "为了您的身体健康，请不要阅读开源翻译版本....我只举一个例子。leader one翻译成林登万是几个意思？难不成还有林登兔？"
        },
        {
          "user": "fly2best",
          "ratingScore": "力荐",
          "ratingTime": "2019-01-06",
          "thumbsUpCount": "7",
          "content": "通读了一遍，对这个分布式存储领域有一个完整的认识；会再细读一遍，结合文中的引用和MIT6.824来看。\n这本书对单机存储、分布式存储系统都做了详细的说明；作者是个搞研究的，会详细的比较多种设计之间的优缺点，方便读者理解，我还挺喜欢这个套路的。\n前两部分翻译的还不错, 翻译上第三部分略差，不过整体不影响阅读。"
        },
        {
          "user": "清风乱醉",
          "ratingScore": "力荐",
          "ratingTime": "2019-01-28",
          "thumbsUpCount": "7",
          "content": "CRUD程序员进阶必读之书。近年来读的最爽的技术书，很多方面在实际工作中都涉及到了，并且给出了自己的解决方案，但是看完本书，想把以前的再实现一下——虽然这是几乎不可能的。"
        },
        {
          "user": "贾里",
          "ratingScore": "力荐",
          "ratingTime": "2019-08-15",
          "thumbsUpCount": "3",
          "content": "20190815第一遍。啃了大半个月才啃完，一二部分对我很有帮助，基本上梳理并讨论了现有工业界分布式系统的各种理论及其实现细节。这本书应该作为后端架构的必读书目，对很多笼罩着光环的各种架构服务很有祛媚效果。每章后面的参考文献是个大宝藏，需要好好阅读。"
        },
        {
          "user": "Swampy",
          "ratingScore": "力荐",
          "ratingTime": "2019-06-24",
          "thumbsUpCount": "2",
          "content": "断断续续看完了。对于数据架构的整体认识帮助很大，接下来就是到各细分领域继续研究。吐槽一下第十二章的翻译错别字特别多。\n\n我整理的读书笔记：https://www.bicky.me/blog/categories.html#category-Web%20Arch"
        },
        {
          "user": "Olivia",
          "ratingScore": "力荐",
          "ratingTime": "2019-06-08",
          "thumbsUpCount": "1",
          "content": "传说中的ddia果然名不虚传。提纲挈领，高屋建瓴。注定要回看许多遍才能吃透。每章章首的题图真乃一大亮点。那些走过的路呀，那些趟过的河，以及那些掉过的坑。"
        },
        {
          "user": "Day",
          "ratingScore": "力荐",
          "ratingTime": "2019-06-25",
          "thumbsUpCount": "1",
          "content": "比七周七数据库写的好多了。。。。当然不是一类东西\n看了半年终于浏览一遍了。。。"
        },
        {
          "user": "惟以不永怀",
          "ratingScore": "力荐",
          "ratingTime": "2019-12-29",
          "thumbsUpCount": "1",
          "content": "上帝视角细数各类数据相关系统优劣得失，用学术研究的方式来写书，本质上就是一本大综述，真是太适合我了，太棒了。信息量超大，将我平时了解的各种零散概念关联串结起来，感觉任督二脉已打通，要飘了"
        },
        {
          "user": "eminemheaton",
          "ratingScore": "力荐",
          "ratingTime": "2020-02-12",
          "thumbsUpCount": "1",
          "content": "内容很全面，并且结构非常有条理：提出问题-提出多种解决方案-解决方案的优劣和使用场景。 \n前9章翻译水平不错，第10章很差，最后三章建议直接看英文原版。\n200111-200212"
        },
        {
          "user": "darcy27149",
          "ratingScore": "力荐",
          "ratingTime": "2019-09-01",
          "thumbsUpCount": "1",
          "content": "书是好书，但是对我有点超纲了，有几章云里雾里；吐槽第三部分很多错别字、翻译不通顺；当做是第一遍通读一下。"
        }
      ]
    }
  },
  {
    "title": "微服务设计原理与架构",
    "bookUrl": "https://book.douban.com/subject/30233793/",
    "authorInfo": "郑天民 ",
    "pubInfo": " 人民邮电出版社 / 2018-5-1 / 59.80",
    "bookInfo": {
      "img": [
        "https://img3.doubanio.com/view/subject/l/public/s29779140.jpg",
        "https://img3.doubanio.com/view/subject/s/public/s29779140.jpg"
      ],
      "originalName": "",
      "averageRating": 0.0,
      "ratersCount": 0,
      "ratings": [],
      "bookIntro": "本书共分为四大篇幅内容，包括： 1. 直面微服务篇，剖析微服务架构的基本特征、优势和劣势，并给出实施微服务架构的系统方法。 2. 服务建模篇，介绍服务建模的思路和方法，并从服务拆分和集成角度对服务模型进行重点展开。 3. 服务实现篇，介绍微服务架构涉及的基础组件、关键要素以及目前主流的技术实现体系。 4. 服务转型篇，包括对遗留系统进行微服务架构的改造方法以及对研发过程转型的讨论。",
      "authorIntro": "本书作者有近10年软件行业从业经验，在医疗、安防和电商行业都有所涉及，主持和参与过多个大型企业级应用和移动互联网系统的开发和管理工作，前后担任技术经理、系统分析架构师和部门经理等职务，目前就职于一家国内电商独角兽企业。主持过十余个面向研发人员的技术和管理类培训系统课程，善于提炼和抽象核心内容作为教学内容，善于知识分享和技术人员培养，对系统架构设计和研发过程改进有丰富的经验和较深的理解。",
      "bookToc": "目　录\n        第 一篇　直面微服务　1\n        第 1　章　直面微服务架构　2\n        1.1　分布式系统　3\n        1.1.1　单块系统的问题　3\n        1.1.2　分布式系统的基本特征　6\n        1.2　微服务架构　8\n        1.2.1　微服务的概念　9\n        1.2.2　微服务架构基础　10\n        1.2.3　微服务架构与现有架构体系\n        对比　12\n        1.3　构建微服务架构的系统方法　14\n        1.3.1　服务模型　15\n        1.3.2　实现技术　15\n        1.3.3　基础设施　16\n        1.3.4　研发过程　16\n        1.4　微服务架构的优势　16\n        1.4.1　技术优势　16\n        1.4.2　业务与组织优势　18\n        1.5　微服务架构的挑战　20\n        1.5.1　技术架构挑战　20\n        1.5.2　研发过程挑战　21\n        1.6　实施微服务架构　22\n        1.6.1　微服务架构实施前提　22\n        1.6.2　微服务架构实施模式　23\n        1.7　本章小结　23\n        第二篇　服务建模　24\n        第 2　章　服务建模方法　25\n        2.1　服务分类　25\n        2.1.1　服务的基本类别　26\n        2.1.2　服务与业务　29\n        2.2　服务模型　30\n        2.2.1　服务的概念模型　31\n        2.2.2　服务的统一表现形式　32\n        2.3　服务边界　33\n        2.3.1　识别业务领域及边界　33\n        2.3.2　界限上下文　36\n        2.3.3　服务边界划分的原则　41\n        2.4　服务数据　41\n        2.4.1　规范化数据模型的问题　41\n        2.4.2　数据去中心化　42\n        2.5　本章小结　47\n        第3　章　服务拆分与集成　48\n        3.1　服务拆分　49\n        3.1.1　服务拆分的维度　49\n        3.1.2　服务拆分的策略　50\n        3.1.3　管理服务的依赖关系　53\n        3.1.4　管理服务的数据　56\n        3.1.5　管理事务的边界　59\n        3.2　服务集成　61\n        3.2.1　系统集成基础　61\n        3.2.2　RPC　62\n        3.2.3　REST　64\n        3.2.4　消息传递　70\n        3.2.5　服务总线　72\n        3.2.6　数据复制　74\n        3.2.7　客户端集成　76\n        3.2.8　外部集成　78\n        3.3　本章小结　80\n        第三篇　服务实现　81\n        第4　章　微服务架构基础组件　82\n        4.1　服务通信　82\n        4.1.1　网络连接　82\n        4.1.2　IO　模型　83\n        4.1.3　可靠性　85\n        4.1.4　同步与异步　85\n        4.2　事件驱动　88\n        4.2.1　基本事件驱动架构　88\n        4.2.2　事件驱动架构与领域模型　89\n        4.3　负载均衡　92\n        4.3.1　服务器端负载均衡　92\n        4.3.2　客户端负载均衡　93\n        4.3.3　负载均衡算法　94\n        4.4　服务路由　95\n        4.4.1　直接路由　95\n        4.4.2　间接路由　96\n        4.4.3　路由规则　96\n        4.5　API　网关　97\n        4.5.1　网关的作用　98\n        4.5.2　网关的功能　99\n        4.6　配置管理　100\n        4.6.1　配置中心模型　101\n        4.6.2　分布式协调机制　102\n        4.7　本章小结　104\n        第5　章　微服务架构关键要素　105\n        5.1　服务治理　106\n        5.1.1　服务注册中心　106\n        5.1.2　服务发布与注册　109\n        5.1.3　服务发现与调用　110\n        5.1.4　服务监控　111\n        5.2　数据一致性　113\n        5.2.1　分布式事务　113\n        5.2.2　CAP　理论与BASE　思想　116\n        5.2.3　可靠事件模式　118\n        5.2.4　补偿模式　124\n        5.2.5　Sagas　长事务模式　126\n        5.2.6　TCC　模式　127\n        5.2.7　最大努力通知模式　133\n        5.2.8　人工干预模式　135\n        5.2.9　数据一致性模式总结　135\n        5.3　服务可靠性　136\n        5.3.1　服务访问失败的原因　136\n        5.3.2　服务失败的应对策略　138\n        5.3.3　服务容错　139\n        5.3.4　服务隔离　140\n        5.3.5　服务限流　143\n        5.3.6　服务降级　145\n        5.4　本章小结　148\n        第6　章　微服务架构实现技术　149\n        6.1　微服务架构实现技术选型　149\n        6.1.1　技术选型的参考标准　150\n        6.1.2　微服务实现框架对比　152\n        6.2　Spring　Boot　153\n        6.2.1　Spring　Boot　概览　154\n        6.2.2　Spring　Boot　核心原理　155\n        6.3　Spring　Cloud　157\n        6.3.1　Spring　Cloud　概览　157\n        6.3.2　Spring　Cloud　Netflix　Eureka\n        与服务治理　159\n        6.3.3　Spring　Cloud　Netflix　Ribbon\n        与负载均衡　165\n        6.3.4　Spring　Cloud　Netflix　Hystrix\n        与服务容错　168\n        6.3.5　Spring　Cloud　Netflix　Zuul　与\n        API　网关　177\n        6.3.6　Spring　Cloud　Config　与配置\n        中心　180\n        6.4　案例分析　184\n        6.4.1　服务建模　184\n        6.4.2　服务架构设计　186\n        6.4.3　服务实现　188\n        6.5　本章小结　193\n        第7　章　微服务架构管理体系　194\n        7.1　服务测试　194\n        7.1.1　微服务测试的维度　195\n        7.1.2　微服务测试实现方法　198\n        7.1.3　消费者驱动的契约测试　200\n        7.2　服务交付与部署　205\n        7.2.1　微服务交付管理　205\n        7.2.2　基于Docker　部署微服务　209\n        7.3　服务监控　219\n        7.3.1　日志聚合　220\n        7.3.2　服务跟踪　224\n        7.4　服务安全　227\n        7.4.1　通用安全性技术　228\n        7.4.2　安全性协议　230\n        7.4.3　微服务中的安全性设计　235\n        7.5　本章小结　237\n        第四篇　服务转型　239\n        第8　章　向微服务架构转型　240\n        8.1　微服务架构转型过程与方法　241\n        8.1.1　调整架构的技术　242\n        8.1.2　微服务架构与现有系统　245\n        8.1.3　微服务实施最佳实践　251\n        8.2　微服务架构与研发过程转变　256\n        8.2.1　产品管理转变　256\n        8.2.2　组织架构转变　259\n        8.2.3　研发文化转变　262\n        8.3　微服务架构转型案例分析　264\n        8.3.1　系统描述　264\n        8.3.2　微服务架构改造整体方案　268\n        8.3.3　微服务架构改造第 一阶段　268\n        8.3.4　微服务架构改造第二阶段　273\n        8.3.5　微服务架构改造第三阶段　280\n        8.3.6　微服务架构改造第四阶段　285\n        8.4　本章小结　290\n        参考文献　291\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 5 条",
      "commentsList": [
        {
          "user": "Zane",
          "ratingScore": "力荐",
          "ratingTime": "2019-07-14",
          "thumbsUpCount": "2",
          "content": "第一次读到如此诚恳地介绍微服务的书，每一页都是干货，从分布式讲起，到微服务，到划分、组件、一致性理论与解法、实现、转型，一气呵成。翻到最后发现定价才59.8，我一定买一本支持作者，支持国内良心的技术书籍。"
        },
        {
          "user": "昊天",
          "ratingScore": "推荐",
          "ratingTime": "2019-11-21",
          "thumbsUpCount": "0",
          "content": "1.直面微服务篇。从微服务的基本概念出发，阐述微服务架构的发展阶段、所具备的优势以及所面临的挑战，并给出实施微服务架构的系统方法。\n2.服务建模篇。关注于微服务建模，首先介绍服务建模方法，用于明确服务模型的各个维度和表现形式；然后对服务拆分和集成方法进行展开，侧重于从服务的依赖关系、数据、事务边界等维度出发讨论实现策略。\n3.服务实现篇。作为微服务架构实现过程中的主体知识部分，本篇从微服务架构基础组件、关键要素、实现技术和管理体系等四个角度切入，全面介绍微服务架构实现上的工具框架、技术原理和最佳实践。\n4.服务转型篇。从实际应用角度出发探讨如何在现有系统的基础上向微服务架构转型，一方面提供技术架构调整的方法和模式，另一方面也阐述了如何从组织过程管理角度出发向微服务架构转型。"
        },
        {
          "user": "Kevin",
          "ratingScore": "推荐",
          "ratingTime": "2019-11-08",
          "thumbsUpCount": "0",
          "content": "脉络相对清晰一些"
        },
        {
          "user": "xyz",
          "ratingScore": "力荐",
          "ratingTime": "2019-10-17",
          "thumbsUpCount": "0",
          "content": "挺好的，条目和归纳都不错，很多干货，收获很大。适合有实战经验的开发。"
        },
        {
          "user": "yishanchuan2013",
          "ratingScore": "推荐",
          "ratingTime": "2018-10-21",
          "thumbsUpCount": "0",
          "content": "从微服务的起步到概念辨析，设计、分析、实现、转型都有独到且认可度高的实现方案，整本书我连续读三天，看完后觉得受益匪浅，给自己的微服务实践有了一些新的感悟。我对这本书定位为综述类书，总结了微服务的方方面面，点到为止，不罗嗦，不错的行动参考指南。"
        }
      ]
    }
  },
  {
    "title": "领域驱动设计:软件核心复杂性应对之道",
    "bookUrl": "https://book.douban.com/subject/5344973/",
    "authorInfo": "埃文斯 / 赵俐、盛海艳、刘霞 ",
    "pubInfo": " 人民邮电出版社 / 2010-11 / 69.00元",
    "bookInfo": {
      "img": [
        "https://img3.doubanio.com/view/subject/l/public/s27608362.jpg",
        "https://img3.doubanio.com/view/subject/s/public/s27608362.jpg"
      ],
      "originalName": "",
      "averageRating": " 9.1 ",
      "ratersCount": "188",
      "ratings": [
        "60.1%",
        "32.4%",
        "6.4%",
        "0.5%",
        "0.5%"
      ],
      "bookIntro": "",
      "authorIntro": "",
      "bookToc": "第一部分 让领域模型发挥作用\n        第1章 消化知识\n        1.1 有效建模的要素\n        1.2 知识消化\n        1.3 持续学习\n        1.4 知识丰富的设计\n        1.5 深层模型\n        第2章 语言的交流和使用\n        2.1 模式：UBIQUITOUS LANGUAGE\n        2.2 “大声地”建模\n        2.3 一个团队，一种语言\n        2.4 文档和图\n        2.4.1 书面设计文档\n        2.4.2 完全依赖可执行代码的情况\n        2.5 解释性模型\n        第3章 绑定模型和实现\n        3.1 模式：MODEL-DRIVEN DESIGN\n        3.2 建模范式和工具支持\n        3.3 揭示主旨：为什么模型对用户至关重要\n        3.4 模式：HANDS-ON MODELER\n        第二部分 模型驱动设计的构造块\n        第4章 分离领域\n        4.1 模式：LAYERED ARCHITECTURE\n        4.1.1 将各层关联起来\n        4.1.2 架构框架\n        4.2 模型属于领域层\n        4.3 模式：THE SMART UI“ANTI-PATTERN”\n        4.4 其他分离方式\n        第5章 软件中所表示的模型\n        5.1 关联\n        5.2 模式：ENTITY（又称为REFERENCE OBJECT）\n        5.2.1 ENTITY建模\n        5.2.2 设计标识操作\n        5.3 模式：VALUE OBJECT\n        5.3.1 设计VALUE OBJECT\n        5.3.2 设计包含VALUE OBJECT的关联\n        5.4 模式：SERVICE\n        5.4.1 SERVICE与孤立的领域层\n        5.4.2 粒度\n        5.4.3 对SERVICE的访问\n        5.5 模式：ＭODULE（也称为PACKAGE）\n        5.5.1 敏捷的MODULE\n        5.5.2 基础设施驱动的打包存在的隐患\n        5.6 建模范式\n        5.6.1 对象范式流行的原因\n        5.6.2 对象世界中的非对象\n        5.6.3 在混合范式中坚持使用MODEL-DRIVEN DESIGN\n        第6章 领域对象的生命周期\n        6.1 模式：AGGREGATE\n        6.2 模式：FACTORY\n        6.2.1 选择FACTORY及其应用位置\n        6.2.2 有些情况下只需使用构造函数\n        6.2.3 接口的设计\n        6.2.4 固定规则的逻辑应放置在哪里\n        6.2.5 ENTITY FACTORY与VALUE OBJECT FACTORY\n        6.2.6 重建已存储的对象\n        6.3 模式：REPOSITORY\n        6.3.1 REPOSITORY的查询\n        6.3.2 客户代码可以忽略REPOSITORY的实现，但开发人员不能忽略\n        6.3.3 REPOSITORY的实现\n        6.3.4 在框架内工作\n        6.3.5 REPOSITORY与FACTORY的关系\n        6.4 为关系数据库设计对象\n        第7章 使用语言：一个扩展的示例\n        7.1 货物运输系统简介\n        7.2 隔离领域：应用程序的引入\n        7.3 将ENTITY和VALUE OBJECT区别开\n        7.4 设计运输系统中的关联\n        7.5 AGGREGATE边界\n        7.6 选择REPOSITORY\n        7.7 场景走查\n        7.7.1 应用程序特性举例：更改Cargo的目的地\n        7.7.2 应用程序特性举例：重复业务\n        7.8 对象的创建\n        7.8.1 Cargo的FACTORY和构造函数\n        7.8.2 添加一个Handling Event\n        7.9 停下来重构：Cargo AGGREGATE的另一种设计\n        7.10 运输模型中的ＭODULE\n        7.11 引入新特性：配额检查\n        7.11.1 连接两个系统\n        7.11.2 进一步完善模型：划分业务\n        7.11.3 性能优化\n        7.12 小结\n        第三部分 通过重构来加深理解\n        第8章 突破\n        8.1 一个突破的故事\n        8.1.1 华而不实的模型\n        8.1.2 突破\n        8.1.3 更深层模型\n        8.1.4 冷静决策\n        8.1.5 成果\n        8.2 机遇\n        8.3 关注根本\n        8.4 后记：越来越多的新理解\n        第9章 将隐式概念转变为显式概念\n        9.1 概念挖掘\n        9.1.1 倾听语言\n        9.1.2 检查不足之处\n        9.1.3 思考矛盾之处\n        9.1.4 查阅书籍\n        9.1.5 尝试，再尝试\n        9.2 如何为那些不太明显的概念建模\n        9.2.1 显式的约束\n        9.2.2 作为领域对象的过程\n        9.2.3 模式：SPECIFICATION\n        9.2.4 SPECIFICATION的应用和实现\n        第10章 柔 性 设 计\n        10.1 模式：INTENTION-REVEALING INTERFACES\n        10.2 模式：SIDE-EFFECT-FREE FUNCTION\n        10.3 模式：ASSERTION\n        10.4 模式：CONCEPTUAL CONTOUR\n        10.5 模式：STANDALONE CLASS\n        10.6 模式：CLOSURE OF OPERATION\n        10.7 声明式设计\n        10.8 声明式设计风格\n        10.9 切入问题的角度\n        10.9.1 分割子领域\n        10.9.2 尽可能利用已有的形式\n        第11章 分析模式的应用\n        第12章 将设计模式应用于模型\n        12.1 模式：STRATEGY（也称为POLICY）\n        12.2 模式：COMPOSITE\n        12.3 为什么没有介绍FLYWEIGHT\n        第13章 通过重构得到更深层的理解\n        13.1 开始重构\n        13.2 探索团队\n        13.3 借鉴先前的经验\n        13.4 针对开发人员的设计\n        13.5 重构的时机\n        13.6 危机就是机遇\n        第四部分 战略设计\n        第14章 保持模型的完整性\n        14.1 模式：BOUNDED CONTEXT\n        14.2 模式：CONTINUOUS INTEGRATION\n        14.3 模式：CONTEXT MAP\n        14.3.1 测试CONTEXT的边界\n        14.3.2 CONTEXT MAP的组织和文档化\n        14.4 BOUNDED CONTEXT之间的关系\n        14.5 模式：SHARED KERNEL\n        14.6 模式：CUSTOMER/SUPPLIERDEVELOPMENT TEAM\n        14.7 模式：CONFORMIST\n        14.8 模式：ANTICORRUPTION LAYER\n        14.8.1 设计ANTICORRUPTION LAYER的接口\n        14.8.2 实现ANTICORRUPTION LAYER\n        14.8.3 一个关于防御的故事\n        14.9 模式：SEPARATE WAY\n        14.10 模式：OPEN HOST SERVICE\n        14.11 模式：PUBLISHED LANGUAGE\n        14.12 “大象”的统一\n        14.13 选择你的模型上下文策略\n        14.13.1 制定团队决策或更高层的决策\n        14.13.2 在上下文中工作\n        14.13.3 转换边界\n        14.13.4 接受那些我们无法更改的事物：描述外部系统\n        14.13.5 与外部系统的关系\n        14.13.6 正在设计的系统\n        14.13.7 满足不同模型的特殊需要\n        14.13.8 部署\n        14.13.9 权衡\n        14.13.10 当项目正在进行时\n        14.14 转换\n        14.14.1 合并CONTEXT：SEPARATE WAY →SHARED KERNEL\n        14.14.2 合并CONTEXT：SHARED KERNEL→CONTINUOUS INTEGRATION\n        14.14.3 逐步淘汰遗留系统\n        14.14.4 OPEN HOST SERVICE→PUBLISHED LANGUAGE\n        第15章 精炼\n        15.1 模式：CORE DOMAIN\n        15.1.1 选择核心\n        15.1.2 工作的分配\n        15.2 精炼的逐步提升\n        15.3 模式：GENERIC SUBDOMAIN\n        15.3.1 通用不等于可以重用\n        15.3.2 项目风险管理\n        15.4 模式：DOMAIN VISION STATEMENT\n        15.5 模式：HIGHLIGHTED CORE\n        15.5.1 精炼文档\n        15.5.2 标明CORE\n        15.5.3 把精炼文档作为过程工具\n        15.6 模式：COHESIVE MECHANISM\n        15.6.1 GENERIC SUBDOMAIN与COHE-SIVE MECHANISM的比较\n        15.6.2 MECHANISM是CORE DOMAIN一部分\n        15.7 通过精炼得到声明式风格\n        15.8 模式：SEGREGATED CORE\n        15.8.1 创建SEGREGATED CORE的代价\n        15.8.2 不断发展演变的团队决策\n        15.9 模式：ABSTRACT CORE\n        15.10 深层模型精炼\n        15.11 选择重构目标\n        第16章 大比例结构\n        16.1 模式：EVOLVING ORDER\n        16.2 模式：SYSTEM METAPHOR\n        16.3 模式：RESPONSIBILITY LAYER\n        16.4 模式：KNOWLEDGE LEVEL\n        16.5 模式：PLUGGABLE COMPONENT FRAMEWORK\n        16.6 结构应该有一种什么样的约束\n        16.7 通过重构得到更适当的结构\n        16.7.1 最小化\n        16.7.2 沟通和自律\n        16.7.3 通过重构得到柔性设计\n        16.7.4 通过精炼可以减轻负担\n        第17章 领域驱动设计的综合运用\n        17.1 把大比例结构与BOUNDED CONTEXT结合起来使用\n        17.2 将大比例结构与精炼结合起来使用\n        17.3 首先评估\n        17.4 由谁制定策略\n        17.4.1 从应用程序开发自动得出的结构\n        17.4.2 以客户为中心的架构团队\n        17.5 制定战略设计决策的6个要点\n        17.5.1 技术框架同样如此\n        17.5.2 注意总体规划\n        结束语\n        附录\n        术语表\n        参考文献\n        图片说明\n        索引\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 64 条",
      "commentsList": [
        {
          "user": "Maxint删国掩疫",
          "ratingScore": "推荐",
          "ratingTime": "2016-03-17",
          "thumbsUpCount": "10",
          "content": "磕不下去了 对很多概念和场景都完全无感 两个重要的案例分别设计航运和金融 完全不了解 看着模型演变满满就成了「你说啥就是啥吧」 反思一下 就是自己根本还没有入「企业级开发」的门 挺讽刺的 我TM这两年到底干了啥？"
        },
        {
          "user": "离开以后",
          "ratingScore": "力荐",
          "ratingTime": "2012-08-24",
          "thumbsUpCount": "1",
          "content": "这书要常读"
        },
        {
          "user": "颜小婧",
          "ratingScore": "推荐",
          "ratingTime": "2017-10-11",
          "thumbsUpCount": "4",
          "content": "我觉得每句话我都要读两遍才能明白什么意思，是翻译的问题还是我智商的问题……"
        },
        {
          "user": "[已注销]",
          "ratingScore": "推荐",
          "ratingTime": "2015-07-14",
          "thumbsUpCount": "0",
          "content": "从大学读到现在才读完的一本书…这本书不是教抽象抽象再抽象，而是传扬规范化领域概念并引入到软件设计中的一种思想。其实现在已经是很普遍的做法了…"
        },
        {
          "user": "Qin Wei",
          "ratingScore": "力荐",
          "ratingTime": "2012-04-02",
          "thumbsUpCount": "1",
          "content": "这书一定要一边实践，一边看；最好是设计或者重构的时候看；如果当成理论书籍来看，保证你睡着。"
        },
        {
          "user": "大男孩",
          "ratingScore": "力荐",
          "ratingTime": "2013-11-10",
          "thumbsUpCount": "0",
          "content": "只是初步看了下，确实是很经典的书籍，看完之后再来更新"
        },
        {
          "user": "赵公口赌气车站",
          "ratingScore": "推荐",
          "ratingTime": "2013-11-05",
          "thumbsUpCount": "0",
          "content": "抽象，再抽象，里面的例子要读懂真是费脑壳壳"
        },
        {
          "user": "Warren",
          "ratingScore": "力荐",
          "ratingTime": "2015-09-23",
          "thumbsUpCount": "0",
          "content": "待读完 实现领域驱动设计再来一起写个书评"
        },
        {
          "user": "嘉陵",
          "ratingScore": 0.0,
          "ratingTime": "",
          "thumbsUpCount": "0",
          "content": "很多概念无法深入理解，期待某天能顿悟作者的思想。"
        },
        {
          "user": "漂来漂去",
          "ratingScore": "力荐",
          "ratingTime": "2017-10-28",
          "thumbsUpCount": "0",
          "content": "最近在思考系统设计的问题，读了之后很受启发。区分Entity、Value Object、Service、Repository这是最基本的，如何减少关联，降低耦合，如何区分Hard state&soft state，如何处理并发， 如何Aggregate。"
        }
      ]
    }
  },
  {
    "title": "MicroservicesinAction",
    "bookUrl": "https://book.douban.com/subject/30152655/",
    "authorInfo": "Morgan Bruce、Paulo Pereira ",
    "pubInfo": " Manning Publications / 2018-7-28 / GBP 35.83",
    "bookInfo": {
      "img": [
        "https://img9.doubanio.com/view/subject/l/public/s29699856.jpg",
        "https://img9.doubanio.com/view/subject/s/public/s29699856.jpg"
      ],
      "originalName": "",
      "averageRating": 0.0,
      "ratersCount": 0,
      "ratings": [],
      "bookIntro": "Morgan Bruce is the VP of Engineering at Onfido. He has years of experience building distributed applications, with particular expertise in the high-stakes finance and identity verification industries. Paulo A. Pereira is a software developer and engineering director at Onfido. He works daily with microservices in a production environment using the tools and techniques presente...(展开全部)",
      "authorIntro": "Morgan Bruce is the VP of Engineering at Onfido. He has years of experience building distributed applications, with particular expertise in the high-stakes finance and identity verification industries. Paulo A. Pereira is a software developer and engineering director at Onfido. He works daily with microservices in a production environment using the tools and techniques presented in this book.",
      "bookToc": "PART 1 - The lay of the land\n        Designing and running microservices\n        Microservices at SimpleBank\n        PART 2 - Design\n        Architecture of a microservice application\n        Designing new features\n        Transactions and queries in microservices\n        Designing reliable services\n        Building a reusable microservice framework\n        PART 3 - Deployment\n        Deploying microservices\n        Deployment with containers and schedulers\n        Building a delivery pipeline for microservices\n        PART 4 - Observability and ownership\n        Building a monitoring system\n        Using logs and traces to understand behavior\n        Building microservice teams\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 1 条",
      "commentsList": [
        {
          "user": "之江",
          "ratingScore": 0.0,
          "ratingTime": "",
          "thumbsUpCount": "0",
          "content": "太务虚,这种书不适合一般人写,也不适合一般人读."
        }
      ]
    }
  },
  {
    "title": "云原生应用架构实践:从单体到服务化演进",
    "bookUrl": "https://book.douban.com/subject/27091064/",
    "authorInfo": "网易云基础服务架构团队 ",
    "pubInfo": " 电子工业出版社 / 2017-7 / 79.00",
    "bookInfo": {
      "img": [
        "https://img1.doubanio.com/view/subject/l/public/s29496917.jpg",
        "https://img1.doubanio.com/view/subject/s/public/s29496917.jpg"
      ],
      "originalName": "",
      "averageRating": " 7.0 ",
      "ratersCount": "24",
      "ratings": [
        "25.0%",
        "25.0%",
        "33.3%",
        "16.7%",
        "0.0%"
      ],
      "bookIntro": "针对企业如何采用云原生架构实现高效的产品迭代能力、支持互联网业务健康发展，《云原生应用架构实践》总结了一套可行的方法论。书中详解了云原生应用的内涵和要点，对实现云原生应用面临的功能和非功能（高性能、高可用、可扩展、安全性、高可靠等）的不同阶段需求和实现方案进行了较为完整的梳理。内容涵盖了系统工程化、高性能数据库、分布式数据库、DevOps、微服务架构、服务化测试、多机房架构等方面，既有业务挑战分析，也有架构实践指导，并通过实战案例加以诠释。 《云原生应用架构实践》适合希望采用云计算帮助企业实现业务提升的 CTO、CIO、架构师等群体。",
      "authorIntro": "网易云基础服务架构团队，负责网易云基础服务平台建设，包括计算、网络、存储、CDN、数据库等服务，以及自动化平台的架构和实践，该平台支撑了网易内部95%的互联网产品。团队在互联网产品开发和规范化的系统建设上有丰富的经验，对互联网业务需求、系统设计、开发、测试、运维和调优等方面有独到的经验和理解。",
      "bookToc": "引子\t1\n        第1章　互联网系统架构的挑战\t2\n        1.1  云应用架构技术发展\t4\n        1.2  云平台下架构的不同点\t5\n        1.2.1  开发模式的区别\t6\n        1.2.2  交付模式的区别\t7\n        1.2.3  架构设计的区别\t8\n        1.3  云原生应用架构\t10\n        1.4  架构演化发展历程\t21\n        1.4.1  初创期架构\t22\n        1.4.2  快速成长期架构\t24\n        1.4.3  分布式服务架构\t26\n        1.5  云计算服务介绍\t29\n        1.6  云计算解决方案\t31\n        1.7  案例概述\t34\n        1.7.1  背景介绍\t34\n        1.7.2  环境要求\t36\n        1.7.3  项目构建\t36\n        1.7.4  项目运行\t36\n        1.7.5  相关技术介绍\t37\n        小结\t40\n        第2章  从0到1工程实践\t41\n        2.1  工程化\t41\n        2.1.1  工程模板\t41\n        2.1.2  模块化\t45\n        2.1.3  工程化构建\t50\n        2.1.4  代码规范及检查\t53\n        2.1.5  代码版本管理\t54\n        2.1.6  环境划分\t61\n        2.2  基于容器工程化\t62\n        2.2.1  Docker及作用\t63\n        2.2.2  Docker镜像及操作\t66\n        2.2.3  Docker容器及操作\t73\n        2.2.4  基于容器工程化\t77\n        2.3  实战示例\t78\n        小结\t84\n        第3章  初创期应用架构实践\t85\n        3.1  技术选型\t85\n        3.1.1  业务框架选型\t85\n        3.1.2  结构化数据存储\t92\n        3.1.3  缓存选型\t102\n        3.1.4  静态资源存储\t106\n        3.2  架构实践\t109\n        3.2.1  快速迭代\t109\n        3.2.2  高可用与负载均衡\t111\n        3.2.3  交付与部署\t117\n        3.2.4  Web应用安全\t119\n        3.3  应用监控\t127\n        3.3.1  应用监控指标\t127\n        3.3.2  应用进程监控\t128\n        3.3.3  操作系统监控\t129\n        小结\t136\n        第4章  快速成长期应用架构实践\t137\n        4.1  关键业务需求\t137\n        4.1.1  计数与排序\t137\n        4.1.2  秒杀\t146\n        4.1.3  全文检索\t149\n        4.1.4  日志收集\t154\n        4.2  架构实践\t156\n        4.2.1  前端系统扩展\t157\n        4.2.2  无状态服务设计\t157\n        4.2.3  在线水平扩展\t160\n        4.2.4  后端系统扩展\t163\n        4.2.5  系统通信\t173\n        4.2.6  消息中间件\t176\n        4.3  系统优化\t181\n        4.3.1  静态资源分离\t182\n        4.3.2  数据库调优\t185\n        4.3.3  系统高可用\t193\n        4.4  应用诊断\t200\n        4.4.1  应用健康检查\t200\n        4.4.2  性能问题诊断\t204\n        4.4.3  基于日志的故障诊断\t210\n        4.5  数据库诊断\t214\n        4.6  DevOps\t223\n        4.6.1  持续集成\t224\n        4.6.2  持续交付\t227\n        4.6.3  灰度发布\t229\n        4.6.4  大应用编排\t231\n        4.7  安全设计\t246\n        4.7.1  入侵检测\t247\n        4.7.2  防劫持攻击\t249\n        小结\t255\n        第5章  稳定期服务化应用架构实践\t256\n        5.1  业务拆分\t256\n        5.2  统一配置中心\t259\n        5.3  分布式定时任务\t261\n        5.3.1  分布式定时任务设计\t262\n        5.3.2  业界流行的开源框架\t264\n        5.4  分布式锁系统\t274\n        5.5  微服务化架构\t277\n        5.5.1  服务发现\t279\n        5.5.2  服务治理\t302\n        5.5.3  微服务框架\t307\n        5.5.4  服务编排\t313\n        5.5.5  微服务测试\t321\n        5.6  分布式数据一致性\t333\n        5.6.1  CAP和BASE理论\t333\n        5.6.2  一致性模型\t336\n        5.6.3  典型的解决方案\t337\n        5.7  同城多活\t344\n        5.7.1  应用同城多活\t345\n        5.7.2  跨AZ负载均衡\t347\n        5.8  故障诊断\t348\n        小结\t353\n        参考文献\t354\n        技术术语\t356\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 11 条",
      "commentsList": [
        {
          "user": "八哥",
          "ratingScore": "力荐",
          "ratingTime": "2018-01-28",
          "thumbsUpCount": "1",
          "content": "本书非常的不错，从初创期、快速成长期、稳定期三个阶段，提出了切实可行的方法来提供架构方案，包括技术选型，开发、测试、部署发布相关流程等内容。\n以网易云和网易考拉为基础，给读者不同视野来开发和架构云原生应用。"
        },
        {
          "user": "卡莱",
          "ratingScore": "较差",
          "ratingTime": "2018-06-20",
          "thumbsUpCount": "0",
          "content": "太水了，全都是泛泛而谈"
        },
        {
          "user": "纯阳子",
          "ratingScore": "推荐",
          "ratingTime": "2019-11-13",
          "thumbsUpCount": "0",
          "content": "这本书里的云原生味道不错。同样是写云原生，《未来架构》是挑着写，作者根据自己的认识和经验挑一些重点领域重点写，其他直接略过，重点还是非重点是个见仁见智的事，所以评价两边倒。《持续演进的Cloud Native》是扩着写，除了写技术里边的关键点，还写组织文化、流程制度，给人的印象是作者很强啊，技术出生，还有格局有视野。而本书则是分着写，以企业的不同发展阶段为主要分界点，分别为初创企业、处于快速发展期的企业和成熟稳定期的企业提供了满足各自发展特征的系统构建思路和方案，并在这种方案的阐述里把云原生有关的技术穿插进去讨。\n所以本书第一大看点当属作者把握企业不同时期系统建设重点的能力。从技术的角度讲，技术是分高低好坏的，但是技术毕竟是用来解决问题的，所以对企业应用来说，真（后文见书评正文）"
        },
        {
          "user": "Morgan Chen",
          "ratingScore": "还行",
          "ratingTime": "2018-03-24",
          "thumbsUpCount": "0",
          "content": "覆盖的内容范围比较广，但是相应深度有限，开卷有益吧。"
        },
        {
          "user": "summer",
          "ratingScore": "较差",
          "ratingTime": "2018-10-30",
          "thumbsUpCount": "0",
          "content": "深度有限，推荐给男人看了"
        },
        {
          "user": "TianbingJ",
          "ratingScore": "推荐",
          "ratingTime": "2018-05-22",
          "thumbsUpCount": "0",
          "content": "很多书评价不一，是因为受众群不一样。这本书的作用是提供关于实践架构的概览，真正可实践的干货不多。如果你是想了解整个行业（Java）技术的经典实践，这本书还是值得一读，当然也仅仅限于了解。"
        },
        {
          "user": "仰望星空",
          "ratingScore": "还行",
          "ratingTime": "2019-11-04",
          "thumbsUpCount": "0",
          "content": "干货不多，泛泛而谈。"
        },
        {
          "user": "garfield",
          "ratingScore": "还行",
          "ratingTime": "2018-02-28",
          "thumbsUpCount": "0",
          "content": "真PPT"
        },
        {
          "user": "托板鞋先生",
          "ratingScore": "还行",
          "ratingTime": "2019-10-11",
          "thumbsUpCount": "0",
          "content": "了解类，入门书籍"
        },
        {
          "user": "li",
          "ratingScore": "力荐",
          "ratingTime": "2019-12-22",
          "thumbsUpCount": "0",
          "content": "一本介绍服务器开发的好书。虽然内容不深，但介绍的很全，思路很好。"
        }
      ]
    }
  },
  {
    "title": "云原生Java:SpringBoot、SpringCloud与CloudFoundry弹性系统设计",
    "bookUrl": "https://book.douban.com/subject/30270037/",
    "authorInfo": "乔西·朗 (Josh Long)、肯尼·巴斯塔尼 (Kenny Bastani) / 张若飞、宋净超 ",
    "pubInfo": " 电子工业出版社 / 2018-7-1 / CNY 128.00",
    "bookInfo": {
      "img": [
        "https://img3.doubanio.com/view/subject/l/public/s29873853.jpg",
        "https://img3.doubanio.com/view/subject/s/public/s29873853.jpg"
      ],
      "originalName": "",
      "averageRating": " 7.8 ",
      "ratersCount": "11",
      "ratings": [
        "18.2%",
        "36.4%",
        "45.5%",
        "0.0%",
        "0.0%"
      ],
      "bookIntro": "无论是传统IT行业，还是互联网行业，都正处于行业历史上最剧烈的变革中 ：大量的系统正在从传统的IT架构转向基于云的架构， 开发模式也正在从开发和运维分工的传统模式，逐渐转向统一的“DevOps”模式。Java技术已经进入了新的生命周期，大量被用于构建现代的、基于云的应用程序。 本书详细阐述了开发云原生应用程序的机遇和挑战，明确指出了成功实现的方向，并且重点介绍了微服务框架Spring Boot。Spring Boot可以轻松创建任何粒度的 Spring服务，并部署到现代的容器环境中。本书主要面向正在使用 Spring Boot、SpringCloud和Cloud Foundry， 以便更快、更好地构建软件的Java/JVM 开发人员。 本书一共分为4个部分共15章。第1章和第2章介绍了云原生思想产生的背景，然后介绍了Spring Foundry。第3章介绍了如何配置Spring Boot应用程序。第4章介绍了如何测试Spring应用程序，从如何测试最简单的组件到测试分布式系统。第5章介绍了可以将应用程序迁移到Cloud Foundry等云平台的轻量级重构方式。第6章介绍了如何使用Spring构建HTTP和RESTful服务。第7章介绍了在分布式系统中控制请求进出的常用方法。第8章介绍了如何构建一个响应外部请求的服务。第9章介绍了如何使用Spring Data在Spring中管理数据。这为领域驱动的思想奠定了基础。第10章介绍了如何使用Spring中事件驱动、消息中心化的能力，来集成分布式服务和数据。第11章介绍了如何利用云平台（如Cloud Foundry）的能力来处理长期运行的工作。第12章介绍了在分布式系统中管理状态的一些方法。第13章介绍了如何构建具备可观测性和可操作性的系统。第14章介绍了如何构建类似于Cloud Foundry平台的服务代理。第15章介绍了持续交付背后的思想。",
      "authorIntro": "Josh Long是一名Spring developer advocate，是InfoQ.com Java团队的编辑。他也是多部著作的主要作者，如Spring Recipes, 2nd Edition(Apress)。 Kenny Bastani是Pivotal的一名Spring developer advocate。作为一名开源贡献者和软件架构博主（WWW.kennybastani.com），他为软件开发者提供关于构建事件驱动的微服务和无服务器架构方面的教程。他也在一些行业会议上做演讲，如OSCON、SpringOne Platform和GOTO大会。",
      "bookToc": "目录\n        前言（James Watters）.......................................................xv\n        前言（Rod Johnson）........................................................ xvii\n        前言................................................................................ xix\n        第Ⅰ部分　基础知识\n        第1 章　云原生应用程序.......................................................... 3\n        亚马逊的故事 ........................................................................................................ 3\n        平台的承诺 ............................................................................................................ 5\n        模式 ........................................................................................................................ 7\n        可扩展性 ................................................................................................................. 7\n        可靠性 .................................................................................................................... 8\n        敏捷性 ..................................................................................................................... 8\n        Netflix 的故事 ......................................................................................................... 9\n        微服务 ................................................................................................................. 11\n        拆分单体系统 ...................................................................................................... 12\n        Netflix OSS ......................................................................................................... 13\n        云原生Java ......................................................................................................... 14\n        十二要素原则 ....................................................................................................... 14\n        代码库 ................................................................................................................. 15\n        依赖 ..................................................................................................................... 15\n        配置 ..................................................................................................................... 16\n        x ｜ 目录\n        后端服务 ............................................................................................................. 17\n        构建、发布、运行 .............................................................................................. 17\n        进程 ..................................................................................................................... 17\n        端口绑定 ............................................................................................................. 18\n        并发 ..................................................................................................................... 18\n        易处理 ................................................................................................................. 18\n        开发/ 生产环境一致 ........................................................................................... 19\n        日志 ..................................................................................................................... 19\n        管理进程 ............................................................................................................. 19\n        总结 ........................................................................................................................ 20\n        第2 章　训练营：Spring Boot 和Cloud Foundry......................21\n        什么是Spring Boot ................................................................................................ 21\n        Spring Initializr 入门 .............................................................................................. 21\n        Spring Tool Suite 入门 ............................................................................................ 30\n        安装Spring Tool Suite（STS）............................................................................. 30\n        使用Spring Initializr 创建一个新项目 ................................................................ 31\n        Spring 指南大全 ................................................................................................... 36\n        遵循STS 中的指南 ............................................................................................. 38\n        配置 ....................................................................................................................... 40\n        Cloud Foundry 平台 ............................................................................................... 52\n        总结 ....................................................................................................................... 66\n        第3 章　符合十二要素程序风格的配置....................................... 67\n        令人迷惑的“配置”合并 ........................................................................................... 67\n        Spring 框架对配置的支持 .................................................................................... 67\n        PropertyPlaceholderConfigurer ............................................................................ 68\n        Environment 接口和@Value 注解 ....................................................................... 69\n        Profile .................................................................................................................. 71\n        启动配置 ............................................................................................................. 73\n        使用Spring Cloud Config Server 进行中心化、日志型的配置................................... 76\n        Spring Cloud Config Server ................................................................................. 76\n        Spring Cloud Config 客户端 ................................................................................ 78\n        安全 ..................................................................................................................... 79\n        目录 ｜ xi\n        可刷新的配置 ....................................................................................................... 79\n        总结 ...................................................................................................................... 83\n        第４章　测试..................................................................... 85\n        测试的构成 ........................................................................................................... 86\n        在Spring Boot 中进行测试 ................................................................................... 86\n        集成测试 ............................................................................................................. 88\n        测试切片 ............................................................................................................. 89\n        测试中的Mock ................................................................................................... 89\n        使用@SpringBootTest 中的Servlet 容器 ............................................................ 93\n        测试分片 ............................................................................................................. 94\n        端到端测试 ......................................................................................................... 102\n        测试分布式系统 ................................................................................................ 102\n        消费者驱动的契约测试 ..................................................................................... 104\n        Spring Cloud Contract ....................................................................................... 105\n        总结 .................................................................................................................... 113\n        第5 章　迁移遗留的应用程序................................................. 115\n        契约 .................................................................................................................... 115\n        迁移应用程序环境 ................................................................................................ 116\n        开箱即用的构建包（Buildpacks） ..................................................................... 116\n        自定义的构建包 ................................................................................................ 117\n        容器化的应用程序 ............................................................................................ 118\n        将应用程序迁移到云上的微重构 ........................................................................ 119\n        连接后端服务 .................................................................................................... 120\n        用Spring 实现服务平等 .................................................................................... 121\n        总结 .................................................................................................................... 133\n        第Ⅱ部分　Web 服务\n        第6 章　REST API........................................................... 137\n        伦纳德· 理查森的成熟模型 .................................................................................. 137\n        使用Spring MVC 实现简单的REST API ................................................................. 139\n        内容协商 .............................................................................................................. 142\n        xii ｜ 目录\n        读写二进制数据 ................................................................................................ 142\n        Google Protocol Buffers .................................................................................... 145\n        错误处理 ............................................................................................................. 150\n        超媒体 ................................................................................................................. 152\n        媒体类型和模式 ................................................................................................ 158\n        API 版本 ............................................................................................................. 159\n        编写REST API 文档 ........................................................................................... 162\n        客户端 ................................................................................................................ 167\n        用于临时浏览和交互的REST 客户端 ............................................................... 167\n        RestTemplate ..................................................................................................... 171\n        总结 ................................................................................................................... 177\n        第7 章　路由.................................................................... 179\n        DiscoveryClient 接口 .......................................................................................... 180\n        Cloud Foundry Route 服务 .................................................................................. 190\n        总结 ...................................................................................................................... 195\n        第8 章　边缘服务............................................................... 197\n        Greetings 服务 ...................................................................................................... 198\n        一个简单的边缘服务 ........................................................................................... 200\n        Netflix Feign ........................................................................................................ 202\n        使用Netflix Zuul 进行过滤和代理 ........................................................................... 204\n        自定义Zuul 过滤器 ........................................................................................... 214\n        边缘服务的安全 .................................................................................................... 218\n        OAuth ................................................................................................................... 219\n        服务端应用程序 ................................................................................................ 220\n        HTML5 和JavaScript 单页面应用程序 ............................................................. 221\n        没有用户的应用 ................................................................................................ 221\n        受信任的客户端 ................................................................................................ 221\n        Spring Security .................................................................................................... 222\n        Spring Cloud Security ........................................................................................... 227\n        一个Spring Security OAuth 授权服务器 ........................................................... 227\n        保护Greetings 资源服务器的安全 .................................................................... 232\n        创建一个受OAuth 保护的单页面应用程序 ...................................................... 238\n        总结 ..................................................................................................................... 247\n        目录 ｜ xiii\n        第Ⅲ部分　数据整合\n        第9 章　数据管理............................................................... 251\n        数据建模 ............................................................................................................... 251\n        关系数据库管理系统（RDBMS） ...................................................................... 252\n        NoSQL............................................................................................................... 253\n        Spring Data ......................................................................................................... 253\n        Spring Data 应用程序的结构 ............................................................................. 254\n        域类 ................................................................................................................... 254\n        库 ...................................................................................................................... 254\n        为领域数据组织Java 包 .................................................................................... 255\n        使用JDBC 访问RDBMS 数据 ............................................................................... 258\n        Spring 的JDBC 支持 ........................................................................................... 259\n        Spring Data 示例 ................................................................................................. 261\n        Spring Data JPA.................................................................................................... 264\n        Account Service ................................................................................................. 264\n        集成测试 ........................................................................................................... 274\n        Spring Data MongoDB ......................................................................................... 275\n        Order Service ..................................................................................................... 275\n        集成测试 ........................................................................................................... 282\n        Spring Data Neo4j ............................................................................................... 284\n        Inventory Service ............................................................................................... 284\n        集成测试 ........................................................................................................... 294\n        Spring Data Redis ................................................................................................ 297\n        高速缓存 ........................................................................................................... 298\n        总结 .................................................................................................................... 302\n        第10 章　消息系统............................................................. 303\n        Spring Integration 的事件驱动架构 ..................................................................... 304\n        消息端点 ........................................................................................................... 305\n        使用简单的组件构建复杂的系统 ...................................................................... 306\n        消息代理、桥接、竞争消费者模式和事件溯源 ................................................... 314\n        发布—订阅目的地 ............................................................................................ 314\n        点对点目的地 .................................................................................................... 315\n        xiv ｜ 目录\n        Spring Cloud Stream .......................................................................................... 315\n        流生产者 ........................................................................................................... 316\n        流消费者 ........................................................................................................... 321\n        总结 .................................................................................................................... 323\n        第11 章　批处理和任务........................................................ 325\n        批处理工作 ........................................................................................................ 325\n        Spring Batch ....................................................................................................... 326\n        我们的第一个批处理作业 ................................................................................. 327\n        调度 .................................................................................................................... 336\n        通过消息传递远程分区Spring 批处理作业 ............................................................. 337\n        任务管理 ............................................................................................................. 346\n        通过Workflow 进行的以工作流为中心的整合 ........................................................ 348\n        使用消息传递的分布式......................................................................................... 362\n        总结 ..................................................................................................................... 362\n        第12 章　数据集成............................................................. 363\n        分布式事务 .......................................................................................................... 364\n        故障隔离和优雅的降级........................................................................................ 364\n        saga 模式 ............................................................................................................. 369\n        CQRS（命令查询责任分离） .............................................................................. 369\n        投诉API ............................................................................................................ 371\n        投诉统计API .................................................................................................... 383\n        Spring Cloud Data Flow ...................................................................................... 385\n        Stream ............................................................................................................... 387\n        任务 ................................................................................................................... 390\n        REST API .......................................................................................................... 391\n        实现Data Flow 客户端 ...................................................................................... 392\n        总结 .................................................................................................................... 407\n        第IV 部分　生产\n        第13 章　可观测的系统....................................................... 411\n        你构建，你运行 ................................................................................................. 412\n        目录 ｜ xv\n        谋杀神秘微服务 .................................................................................................. 413\n        十二要素运维 ..................................................................................................... 413\n        新方式 ................................................................................................................. 414\n        可观测性 ............................................................................................................ 416\n        推与拉的可观测性和解析率 ................................................................................ 416\n        使用Spring Boot Actuator 捕获应用程序的当前状态 .......................................... 417\n        度量 ...................................................................................................................... 418\n        通过/info 端点识别服务 ......................................................................................... 431\n        健康检查 ............................................................................................................. 432\n        审计事件 .............................................................................................................. 436\n        应用程序日志 ...................................................................................................... 439\n        指定日志输出 .................................................................................................... 440\n        指定日志级别 .................................................................................................... 441\n        分布式跟踪 ......................................................................................................... 445\n        用Spring Cloud Sleuth 寻找线索 ...................................................................... 446\n        多少数据是足够的 ............................................................................................ 447\n        OpenZipkin ：一张图片胜过千丝万缕 ............................................................... 448\n        跟踪其他平台和技术 ......................................................................................... 454\n        仪表板 ................................................................................................................ 455\n        使用Hystrix 仪表板监控下游服务 .................................................................... 455\n        Codecentric 的Spring Boot Admin .................................................................... 459\n        Ordina Microservices 仪表板 ............................................................................. 462\n        Pivotal Cloud Foundry 的AppsManager ............................................................ 463\n        修复 .................................................................................................................. 465\n        总结 ................................................................................................................... 467\n        第14 章　服务代理.............................................................................................469\n        创建后台服务 .................................................................................................. 470\n        平台视图 ............................................................................................................ 472\n        使用Spring Cloud Cloud Foundry Service Broker 实现服务代理 ........................ 473\n        简单的Amazon S3 服务代理 ............................................................................ 473\n        服务目录 ........................................................................................................... 474\n        管理服务实例 .................................................................................................... 476\n        服务绑定 ........................................................................................................... 482\n        保护服务代理 .................................................................................................... 486\n        xvi ｜ 目录\n        部署 ................................................................................................................... 487\n        使用BOSH 发布 ............................................................................................... 487\n        使用Cloud Foundry 发布 .................................................................................. 488\n        注册Amazon S3 Service Broker ....................................................................... 489\n        创建Amazon S3 服务实例 ................................................................................ 490\n        消费服务实例 .................................................................................................... 491\n        S3 客户端应用程序 ........................................................................................... 493\n        运行测试 ........................................................................................................... 496\n        总结 .................................................................................................................. 496\n        第15 章　持续交付.............................................................497\n        持续集成之外 .................................................................................................. 497\n        John Allspaw 在Flickr 以及后来的Etsy ........................................................... 498\n        Netflix 的Adrian Cockroft ................................................................................ 499\n        亚马逊的持续交付 ............................................................................................ 500\n        流水线 ................................................................................................................ 500\n        测试 .................................................................................................................... 501\n        持续交付微服务 ................................................................................................502\n        工具 .................................................................................................................. 503\n        Concourse ......................................................................................................... 503\n        容器 ................................................................................................................... 504\n        持续交付微服务 ................................................................................................. 504\n        安装Concourse ................................................................................................. 505\n        基本的管道设计 ................................................................................................ 506\n        持续集成 ........................................................................................................... 518\n        消费者驱动的协约测试......................................................................................  518\n        User 微服务流水线 ............................................................................................ 519\n        数据 ................................................................................................................... 522\n        生产 ................................................................................................................... 523\n        第V 部分　附录\n        附录A　在Java EE 中使用Spring Boot................................527\n        索引............................................................................... 552\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 2 条",
      "commentsList": [
        {
          "user": "yzxfz",
          "ratingScore": "力荐",
          "ratingTime": "2019-05-30",
          "thumbsUpCount": "0",
          "content": "第一个评价 沙发"
        },
        {
          "user": "jianjie_ohyeah",
          "ratingScore": "推荐",
          "ratingTime": "2019-10-07",
          "thumbsUpCount": "0",
          "content": "不得不说，spring 对 云时代 的切入点，真是准"
        }
      ]
    }
  },
  {
    "title": "SpringCloud微服务架构进阶",
    "bookUrl": "https://book.douban.com/subject/30410461/",
    "authorInfo": "朱荣鑫、张天、黄迪璇 ",
    "pubInfo": " 机械工业出版社 / 2018-10-9 / 89.00元",
    "bookInfo": {
      "img": [
        "https://img9.doubanio.com/view/subject/l/public/s29955364.jpg",
        "https://img9.doubanio.com/view/subject/s/public/s29955364.jpg"
      ],
      "originalName": "",
      "averageRating": 0.0,
      "ratersCount": 0,
      "ratings": [],
      "bookIntro": "本书全面系统地介绍SpringCloud及其在微服务架构中的应用。全书共13章，第1章介绍微服务架构相关的基本概念；第2章介绍SpringCloud中包含的组件以SpringCloud约定的上下文；第3章介绍SpringCloud的基础：SpringBoot，包括如何构建一个SpringBoot服务、SpringBoot的配置文件和Actuator提供的监控管理端点；第4至第13章详细讲解SpringCloud组件，包括：Eureka（服务注册与发现）、OpenFeign（声明式Restful客户端）、Hystrix（断路器）、Ribbon（客户端负载均衡器）、Gateway（API网关）、Config（配置中心)、Stream（消息驱动）、Bus（消息总线）、Security（认证与授权）、Sleuth（服务链路追踪）。本书为读者揭开了Spring...(展开全部)",
      "authorIntro": "本书全面系统地介绍SpringCloud及其在微服务架构中的应用。全书共13章，第1章介绍微服务架构相关的基本概念；第2章介绍SpringCloud中包含的组件以SpringCloud约定的上下文；第3章介绍SpringCloud的基础：SpringBoot，包括如何构建一个SpringBoot服务、SpringBoot的配置文件和Actuator提供的监控管理端点；第4至第13章详细讲解SpringCloud组件，包括：Eureka（服务注册与发现）、OpenFeign（声明式Restful客户端）、Hystrix（断路器）、Ribbon（客户端负载均衡器）、Gateway（API网关）、Config（配置中心)、Stream（消息驱动）、Bus（消息总线）、Security（认证与授权）、Sleuth（服务链路追踪）。本书为读者揭开了SpringCloud组件实现的技术内幕，并提供了进阶应用的思路，可以作为使用SpringCloud进行微服务架构实践的参考书。",
      "bookToc": "前言\n        第1章 微服务架构介绍1\n        1.1 微服务架构的出现1\n        1.1.1 单体应用架构1\n        1.1.2 SOA架构2\n        1.1.3 微服务架构3\n        1.2 微服务架构的流派5\n        1.3 云原生与微服务9\n        1.4 本章小结12\n        第2章 Spring Cloud总览13\n        2.1 Spring Cloud架构13\n        2.2 Spring Cloud特性16\n        2.2.1 Spring Cloud Context：应用上下文16\n        2.2.2 Spring Cloud Commons：公共抽象19\n        2.3 本章小结21\n        第3章 Spring Cloud的基础：Spring Boot22\n        3.1 Spring Boot简介22\n        3.2 构建一个微服务24\n        3.3 Spring Boot配置文件29\n        3.3.1 默认配置文件29\n        3.3.2 外部化配置29\n        3.3.3 YAML30\n        3.3.4 自动载入外部属性到Bean30\n        3.3.5 多Profile31\n        3.3.6 Starter32\n        3.3.7 自制一个Starter32\n        3.3.8 Actuator36\n        3.4 本章小结38\n        第4章 服务注册与发现：Eureka39\n        4.1 基础应用40\n        4.1.1 Eureka简介40\n        4.1.2 搭建Eureka服务注册中心40\n        4.1.3 搭建Eureka服务提供者42\n        4.1.4 搭建Eureka服务调用者43\n        4.1.5 Eureka服务注册和发现44\n        4.1.6 Consul的简单应用46\n        4.2 服务发现原理48\n        4.3 Eureka Client源码解析49\n        4.3.1 读取应用自身配置信息50\n        4.3.2 服务发现客户端52\n        4.3.3 拉取注册表信息56\n        4.3.4 服务注册61\n        4.3.5 初始化定时任务62\n        4.3.6 服务下线68\n        4.4 Eureka Server源码解析70\n        4.4.1 服务实例注册表70\n        4.4.2 服务注册72\n        4.4.3 接受服务心跳74\n        4.4.4 服务剔除75\n        4.4.5 服务下线77\n        4.4.6 集群同步78\n        4.4.7 获取注册表中服务实例信息82\n        4.5 进阶应用84\n        4.5.1 Eureka Instance和Client的元数据84\n        4.5.2 状态页和健康检查页端口设置85\n        4.5.3 区域与可用区85\n        4.5.4 高可用性服务注册中心86\n        4.6 本章小结87\n        第5章 声明式RESTful客户端：Spring Cloud OpenFeign88\n        5.1 基础应用88\n        5.1.1 微服务之间的交互88\n        5.1.2 OpenFeign简介89\n        5.1.3 代码示例89\n        5.2 源码分析91\n        5.2.1 核心组件与概念91\n        5.2.2 动态注册BeanDefinition92\n        5.2.3 实例初始化98\n        5.2.4 函数调用和网络请求107\n        5.3 进阶应用111\n        5.3.1 Decoder与Encoder的定制化111\n        5.3.2 请求/响应压缩112\n        5.4 本章小结113\n        第6章 断路器：Hystrix114\n        6.1 基础应用114\n        6.1.1 RestTemplate与Hystrix115\n        6.1.2 OpenFeign与Hystrix117\n        6.2 Hystrix原理118\n        6.2.1 服务雪崩118\n        6.2.2 断路器119\n        6.2.3 服务降级操作120\n        6.2.4 资源隔离121\n        6.2.5 Hystrix实现思路122\n        6.3 源码解析123\n        6.3.1 封装HystrixCommand123\n        6.3.2 HystrixCommand类结构129\n        6.3.3 异步回调执行命令129\n        6.3.4 异步执行命令和同步执行命令137\n        6.3.5 断路器逻辑137\n        6.3.6 资源隔离143\n        6.3.7 请求超时监控148\n        6.3.8 失败回滚逻辑150\n        6.4 进阶应用152\n        6.4.1 异步与异步回调执行命令152\n        6.4.2 继承HystrixCommand153\n        6.4.3 请求合并157\n        6.5 本章小结161\n        第7章 客户端负载均衡器：Spring Cloud Netflix Ribbon162\n        7.1 负载均衡162\n        7.2 基础应用163\n        7.3 源码分析165\n        7.3.1 配置和实例初始化165\n        7.3.2 与OpenFeign的集成167\n        7.3.3 负载均衡器LoadBalancerClient171\n        7.3.4 ILoadBalancer173\n        7.3.5 负载均衡策略实现177\n        7.4 进阶应用184\n        7.4.1 Ribbon API184\n        7.4.2 使用Netty发送网络请求185\n        7.4.3 只读数据库的负载均衡实现186\n        7.5 本章小结187\n        第8章 API网关：Spring Cloud Gateway189\n        8.1 Spring Cloud Gateway介绍189\n        8.2 基础应用190\n        8.2.1 用户服务191\n        8.2.2 网关服务192\n        8.2.3 客户端的访问195\n        8.3 源码解析195\n        8.3.1 初始化配置196\n        8.3.2 网关处理器197\n        8.3.3 路由定义定位器202\n        8.3.4 路由定位器205\n        8.3.5 路由断言208\n        8.3.6 网关过滤器216\n        8.3.7 全局过滤器227\n        8.3.8 API端点234\n        8.4 应用进阶235\n        8.4.1 限流机制235\n        8.4.2 熔断降级238\n        8.4.3 网关重试过滤器240\n        8.5 本章小结241\n        第9章 配置中心：Spring Cloud Config243\n        9.1 基础应用244\n        9.1.1 配置客户端244\n        9.1.2 配置仓库245\n        9.1.3 服务端246\n        9.1.4 配置验证248\n        9.1.5 配置动态更新249\n        9.2 源码解析250\n        9.2.1 配置服务器251\n        9.2.2 配置客户端261\n        9.3 应用进阶267\n        9.3.1 为Config Server配置多个repo268\n        9.3.2 客户端覆写远端的配置属性268\n        9.3.3 属性覆盖269\n        9.3.4 安全保护269\n        9.3.5 加密解密270\n        9.3.6 快速响应失败与重试机制272\n        9.4 本章小结272\n        第10章 消息驱动：Spring Cloud Stream274\n        10.1 消息队列274\n        10.2 基础应用276\n        10.2.1 声明和绑定通道276\n        10.2.2 自定义通道276\n        10.2.3 接收消息276\n        10.2.4 配置278\n        10.3 源码分析278\n        10.3.1 动态注册BeanDefinition279\n        10.3.2 绑定服务282\n        10.3.3 获取绑定器284\n        10.3.4 绑定生产者289\n        10.3.5 消息发送的流程291\n        10.3.6 StreamListener注解的处理293\n        10.3.7 绑定消费者298\n        10.3.8 消息的接收304\n        10.4 进阶应用306\n        10.4.1 Bin\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 1 条",
      "commentsList": [
        {
          "user": "Flying Dragon",
          "ratingScore": 0.0,
          "ratingTime": "",
          "thumbsUpCount": "0",
          "content": "真本书其实被低估了，可能是没人刷人气，可能换个名字，叫spring cloud源码分析会好些。通篇60%的内容是源码分析。"
        }
      ]
    }
  },
  {
    "title": "Java多线程与Socket：实战微服务框架",
    "bookUrl": "https://book.douban.com/subject/32976350/",
    "authorInfo": "庞永华 ",
    "pubInfo": " 电子工业出版社 / 2019-3 / 99.00元",
    "bookInfo": {
      "img": [
        "https://img9.doubanio.com/view/subject/l/public/s32264785.jpg",
        "https://img9.doubanio.com/view/subject/s/public/s32264785.jpg"
      ],
      "originalName": "",
      "averageRating": 0.0,
      "ratersCount": 0,
      "ratings": [],
      "bookIntro": "本书从实战角度出发，首先介绍Java多线程、Socket、Spring、动态代理、动态字节码、序列化等技术在构建分布式微服务框架中的应用。然后介绍一种微服务框架的架构设计与编程实践，并将这一微服务框架分解为底层Socket通信、服务注册与发现、服务暴露与引用、远程方法调用等层面，逐一深入讲解。这里重点介绍作者如何活用相关技术一步步地构建微服务框架的基础RPC框架并分享了相应的性能调优经验。最后介绍微服务架构中配套的服务治理系统的设计与实现方案，包括服务的设计、配置、管理与监控。",
      "authorIntro": "IBM高级咨询架构师，拥有16年以上各种类型软件系统的开发经验。擅长分布式与微服务架构的设计和开发。",
      "bookToc": "第1章  多线程基础\n        1.1  多线程的概念\n        1.1.1  进程与线程\n        1.1.2  并发与并行\n        1.1.3  线程状态\n        1.2  Thread线程类\n        1.2.1  基本用法与思考\n        1.2.2  常用方法介绍\n        1.2.3  wait和sleep的区别\n        1.2.4  sleep和yield的区别\n        1.3  Runnable接口\n        1.4  线程池\n        1.4.1  Executors\n        1.4.2  ExecutorService\n        1.4.3  ThreadPoolExecutor\n        1.4.4  基本用法与思考\n        1.5  Callable与Future\n        1.6  线程安全与效率\n        1.6.1  什么是线程安全\n        1.6.2  线程同步\n        1.6.3  饥饿与公平\n        1.6.4  锁与死锁\n        1.6.5  线程中断\n        1.7  编程进阶\n        1.7.1  volatile关键字\n        1.7.2  synchronized关键字\n        1.7.3  wait/notify/notifyAll\n        1.7.4  CAS操作\n        1.7.5  atomic包\n        1.7.6  Lock自旋锁\n        1.7.7  Condition条件变量\n        1.7.8  线程安全容器\n        1.7.9  ThreadLocal类\n        1.7.10  CountDownLatch计数器\n        1.7.11  CyclicBarrier栅栏\n        1.7.12  Semaphore信号量\n        1.7.13  fork/join框架\n        第2章  Socket基础\n        2.1  TCP与Socket\n        2.2  TCP的通信过程\n        2.2.1  基本过程\n        2.2.2  建立连接\n        2.2.3  全双工异步通信\n        2.2.4  断开连接\n        2.2.5  优雅地断开\n        2.2.6  半……连接\n        2.3  通信方式\n        2.3.1  长连接与短连接\n        2.3.2  线程模型\n        2.3.3  拆包与组包\n        2.3.4  断包与粘包\n        2.3.5  数据包的结构\n        2.4  BIO\n        2.4.1  典型编程模型\n        2.4.2  关键API概述\n        2.4.3  字符流传输\n        2.4.4  字节流传输\n        2.4.5  传输多笔数据\n        2.5  NIO\n        2.5.1  NIO简介\n        2.5.2  Buffer\n        2.5.3  Channel\n        2.5.4  Selector\n        2.5.5  Scatter/Gather\n        2.5.6  Pipe\n        2.5.7  内存映像文件\n        2.5.8  文件传输示例\n        2.5.9  “聊天室”示例\n        2.6  AIO\n        2.6.1  AIO简介\n        2.6.2  关键API概述\n        2.6.3  示例代码\n        第3章  Spring与Spring Cloud\n        3.1  Spring简介\n        3.2  IoC容器\n        3.2.1  IoC的概念\n        3.2.2  Spring中的bean\n        3.2.3  XML配置方式\n        3.2.4  注解配置方式\n        3.2.5  用Java类来配置\n        3.2.6  BeanFactory与FactoryBean\n        3.2.7  ApplicationContext与ApplicationContextAware\n        3.2.8  动态注册bean配置\n        3.2.9  ApplicationListener与容器事件\n        3.3  bean的基本配置\n        3.3.1  scope属性\n        3.3.2  parent与abstract\n        3.3.3  factory-bean与factory-method\n        3.3.4  bean的初始化与释放\n        3.4  依赖注入\n        3.4.1  setter注入\n        3.4.2  工厂方式注入\n        3.4.3  构造器注入\n        3.4.4  注解注入\n        3.5  Spring Boot\n        3.5.1  快速创建工程\n        3.5.2  编码与测试\n        3.5.3  打包部署\n        3.5.4  辅助开发工具\n        3.5.5  监控功能\n        3.6  Spring Cloud\n        3.6.1  Spring Cloud简介\n        3.6.2  架构设计\n        3.6.3  创建应用\n        3.6.4  服务的注册与发现\n        3.6.5  服务配置\n        3.6.6  Ribbon负载均衡\n        3.6.7  Feign服务调用\n        3.6.8  Hystrix\n        3.6.9  Zuul服务路由\n        3.6.10  服务监控\n        第4章  动态代理\n        4.1  代理模式\n        4.2  静态代理\n        4.3  类的装载\n        4.4  Java反射\n        4.5  JDK动态代理\n        4.6  CGLIB动态代理\n        4.7  Java Compiler API\n        4.8  Javassist动态代理\n        第5章  对象序列化\n        5.1  什么是序列化\n        5.2  Java序列化\n        5.2.1  基本用法\n        5.2.2  关于serialVersionUID\n        5.2.3  自定义序列化\n        5.2.4  封装实现代码\n        5.3  Hessian序列化\n        5.4  Kryo序列化\n        5.5  FST序列化\n        5.6  其他序列化组件\n        5.7  集成与扩展\n        5.7.1  优雅地集成\n        5.7.2  使用Java SPI\n        5.7.3  使用Spring\n        第6章  框架设计\n        6.1  总体结构\n        6.1.1  逻辑架构\n        6.1.2  框架设计概述\n        6.1.3  RPC原理\n        6.1.4  工程结构\n        6.1.5  依赖的jar包\n        6.1.6  主要的类\n        6.2  初始化过程\n        6.2.1  Spring配置\n        6.2.2  应用节点的启动\n        6.2.3  Web容器的启动\n        6.2.4  RpcCore的初始化\n        6.2.5  RpcContext的初始化\n        6.3  服务的暴露\n        6.3.1  服务暴露配置\n        6.3.2  方法配置与ID\n        6.3.3  内置的服务方法\n        6.3.4  服务提供方本地调用器\n        6.3.5  服务提供方代理生成器\n        6.3.6  注册要暴露的服务\n        6.4  服务的引用\n        6.4.1  服务引用配置\n        6.4.2  本地引用工厂类\n        6.4.3  注册本地引用工厂\n        6.4.4  本地引用与方法ID\n        6.5  服务的注册与发现\n        6.5.1  注册表集合\n        6.5.2  注册表的同步\n        6.5.3  注册表的解析\n        6.5.4  提交注册表\n        6.5.5  注册表推送\n        6.5.6  注册表检查\n        6.6  优雅地停机\n        6.6.1  停机的过程\n        6.6.2  停机钩子\n        6.6.3  监听Web容器的关闭\n        6.6.4  RpcCore的关闭\n        6.6.5  停机通知的处理\n        第7章  方法调用\n        7.1  方法调用类型\n        7.2  同步调用\n        7.2.1  同步调用的时序\n        7.2.2  同步调用的发起\n        7.2.3  负载均衡\n        7.2.4  指定服务提供者\n        7.2.5  失败转移\n        7.2.6  发送调用请求\n        7.2.7  处理调用请求\n        7.2.8  处理调用响应\n        7.3  异步调用\n        7.3.1  异步调用的时序\n        7.3.2  异步调用的发起\n        7.3.3  异步调用的执行\n        7.3.4  方法调用对象\n        7.4  同步/异步通知\n        7.5  异步回调\n        7.6  广播调用与广播通知\n        7.6.1  广播示例\n        7.6.2  广播代码\n        第8章  通信层实现\n        8.1  Socket通信框架\n        8.1.1  Netty与Mina\n        8.1.2  为什么要自己写\n        8.1.3  是NIO还是AIO\n        8.1.4  设计思路\n        8.1.5  实际结构\n        8.2  通信协议\n        8.2.1  传输对象\n        8.2.2  数据包结构\n        8.2.3  拆包与发送\n        8.2.4  接收并组包\n        8.3  连接的建立\n        8.3.1  工作模型\n        8.3.2  开始监听\n        8.3.3  发起连接\n        8.3.4  绑定连接\n        8.3.5  断线检测\n        第9章  性能测试与调优\n        9.1  性能调优概述\n        9.1.1  性能指标\n        9.1.2  性能瓶颈\n        9.1.3  环境因素\n        9.2  压力测试\n        9.2.1  测试方法\n        9.2.2  场景设计\n        9.2.3  测试环境\n        9.2.4  Dubbo配置\n        9.2.5  测试程序\n        9.3  线程池调优\n        9.3.1  调整线程池的大小\n        9.3.2  选择合适的队列\n        9.3.3  线程的管理逻辑\n        9.3.4  选择拒绝策略\n        9.4  优化线程同步\n        9.4.1  减少上下文切换\n        9.4.2  避免线程滥用\n        9.4.3  避免过多的锁\n        9.4.4  synchronized VS Lock\n        9.4.5  缩小锁的范围和粒度\n        9.4.6  线程分析工具\n        9.5  JVM调优\n        9.5.1  堆与栈\n        9.5.2  JVM内存的分代\n        9.5.3  GC分类\n        9.5.4  GC算法\n        9.5.5  分代GC\n        9.5.6  对象的引用\n        9.5.7  内存大小设置\n        9.5.8  内存调优工具\n        9.6  其他优化内容\n        9.6.1  避免使用反射\n        9.6.2  对象池\n        9.6.3  缓冲区队列\n        9.6.4  使用直接内存\n        9.6.5  缓存其他对象\n        9.6.6  协调与平衡\n        第10章  服务治理\n        10.1  服务治理概述\n        10.1.1  什么是服务治理\n        10.1.2  服务治理架构\n        10.1.3  服务治理接口\n        10.2  服务的定义\n        10.2.1  服务识别\n        10.2.2  接口定义\n        10.2.3  版本管理\n        10.2.4  协议适配\n        10.2.5  服务设计\n        10.2.6  服务的实现\n        10.2.7  依赖关系管理\n        10.3  服务的部署\n        10.3.1  服务的部署方式\n        10.3.2  自动化部署\n        10.3.3  服务的热部署\n        10.4  注册与发现\n        10.4.1  WSDL与UDDI\n        10.4.2  ZooKeeper的方案\n        10.4.3  Eureka的方案\n        10.4.4  Consul的方案\n        10.4.5  etcd的方案\n        10.4.6  注册中心集成方案\n        10.5  服务的控制\n        10.5.1  服务状态\n        10.5.2  服务控制\n        10.5.3  服务开关\n        10.5.4  服务模拟\n        10.5.5  黑白名单\n        10.5.6  “踢除”服务提供者\n        10.6  监控与限流\n        10.6.1  TPS监控与限流\n        10.6.2  响应时间的监控\n        10.6.3  调用链的监控\n        10.6.4  资源监控\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 2 条",
      "commentsList": [
        {
          "user": "Zane",
          "ratingScore": "力荐",
          "ratingTime": "2019-09-14",
          "thumbsUpCount": "0",
          "content": "非常精彩，前五章一些知识的总结特别清晰，从第六章开始逐渐勾勒出一个rpc框架的轮廓。站在本书基础上，有利于进一步理解dubbo的实现。"
        },
        {
          "user": "转身夏至wyw",
          "ratingScore": "力荐",
          "ratingTime": "2019-12-30",
          "thumbsUpCount": "0",
          "content": "作者基础夯实，条理清晰，有自己的看法，是值得看的好书"
        }
      ]
    }
  },
  {
    "title": "混沌工程：Netflix系统稳定性之道",
    "bookUrl": "https://book.douban.com/subject/34466272/",
    "authorInfo": "【美】凯西·罗森塔尔（Casey Rosenthal） 等 / 侯杰 ",
    "pubInfo": " 电子工业出版社 / 2019-8 / 45.00元",
    "bookInfo": {
      "img": [
        "https://img3.doubanio.com/view/subject/l/public/s33322882.jpg",
        "https://img3.doubanio.com/view/subject/s/public/s33322882.jpg"
      ],
      "originalName": "",
      "averageRating": " 6.9 ",
      "ratersCount": "20",
      "ratings": [
        "10.0%",
        "45.0%",
        "40.0%",
        "5.0%",
        "0.0%"
      ],
      "bookIntro": "在一个由很多微服务组成的分布式系统中，我们永远难以全面掌握发生什么事件会 导致系统局部不可用，甚至全面崩溃。但我们却可以尽可能地在这些不可用的情况发生 之前找出系统中的脆弱点。《混沌工程：Netflix系统稳定性之道》介绍了 Netflix 的工程师团队是如何根据多年实践经验 主动发现系统中脆弱点的一整套方法。这套方法现在已经逐渐演变成计算机科学的一门 新兴学科，即“混沌工程”。通过一系列可控的实验和执行实验的原则，混沌工程将揭 示出分布式系统中随时发生的各类事件是如何逐步导致系统整体不可用的。 《混沌工程：Netflix系统稳定性之道》既适合研发、测试人员用来了解如何构建健壮的系统，也适合软件架构师用来 了解设计创建高可用微服务体系的前沿方法，同时更适合在大型互联网或技术组织中专 门负责系统稳定性的工程团队阅读。",
      "authorIntro": "译者介绍 侯杰，美利金融集团技术副总裁，TGO鲲鹏会会员，毕业于南京大学；曾就职于IBM中国、IBM澳大利亚和iClick（爱点击）；在多个行业的大型组织机构中负责过研发和管理工作，拥有十多年大规模分布式信息系统的设计、研发和实施经验。 技术审校者 周洋，花名中亭，阿里巴巴高可用架构团队高级技术专家，混沌工程布道师，开源项目ChaosBlade发起人。具有多年高可用保障、产品研发和系统架构经验，曾担任2015年双11稳定性负责人。目前负责高可用技术云化输出，并担任应用高可用服务（AHAS）及集团突袭演练负责人。",
      "bookToc": "第一部分  混沌工程介绍\t21\n        第1章  为什么需要混沌工程\t25\n        混沌工程和测试的区别\t25\n        混沌工程绝不是Netflix的专属\t28\n        实施混沌工程的前提条件\t31\n        第2章  管理复杂性\t35\n        理解复杂系统\t37\n        系统复杂性的例子\t41\n        从例子中学到了什么\t45\n        第二部分  混沌工程原则\t49\n        第3章  建立稳定状态的假设\t55\n        如何描述稳定状态\t60\n        建立假设\t61\n        第4章  用多样的现实世界事件做验证\t65\n        第5章  在生产环境中进行实验\t73\n        状态和服务\t74\n        生产环境中的输入\t76\n        第三方系统\t77\n        生产环境变更\t79\n        外部有效性\t79\n        不愿意实践混沌工程的说辞\t80\n        离生产环境越近越好\t82\n        第6章  自动化实验以持续运行\t84\n        自动执行实验\t84\n        自动创建实验\t89\n        第7章  最小化爆炸半径\t91\n        第三部分  混沌工程实践\t97\n        第8章  设计实验\t100\n        选定假设\t101\n        设定实验的范围\t101\n        识别出要监控的指标\t102\n        在组织内沟通到位\t103\n        执行实验\t104\n        分析实验结果\t105\n        扩大实验范围\t105\n        自动化实验\t106\n        第9章  混沌工程成熟度模型\t107\n        熟练度\t108\n        应用度\t110\n        绘制成熟度模型图\t112\n        第10章  结论\t114\n        一些资源\t114\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 7 条",
      "commentsList": [
        {
          "user": "Suave",
          "ratingScore": "还行",
          "ratingTime": "2019-08-08",
          "thumbsUpCount": "1",
          "content": "简单介绍整体概念，指导原则，应用工具等。100页45大洋的定价真是有点贵"
        },
        {
          "user": "unknown",
          "ratingScore": "推荐",
          "ratingTime": "2019-10-10",
          "thumbsUpCount": "0",
          "content": "概念、原则、指导建议等。"
        },
        {
          "user": "resolvewang",
          "ratingScore": "推荐",
          "ratingTime": "2019-12-29",
          "thumbsUpCount": "0",
          "content": "混沌工程概念，和简洁的实践介绍"
        },
        {
          "user": "Shaman",
          "ratingScore": "力荐",
          "ratingTime": "2019-10-31",
          "thumbsUpCount": "0",
          "content": "亲身实践便可知晓书中描述的原则是如此精妙。"
        },
        {
          "user": "archimekai",
          "ratingScore": "推荐",
          "ratingTime": "2020-03-16",
          "thumbsUpCount": "0",
          "content": "书比较薄，很快就看完了"
        },
        {
          "user": "饕盡天下",
          "ratingScore": "还行",
          "ratingTime": "2019-12-16",
          "thumbsUpCount": "0",
          "content": "一本很小很薄的小册子，简单介绍了混沌工程的背景以及效果。入门可看。"
        },
        {
          "user": "湖州黄老爷",
          "ratingScore": "还行",
          "ratingTime": "2019-08-13",
          "thumbsUpCount": "0",
          "content": "很小的一本册子，介绍的概念比较多，感觉不太合算"
        }
      ]
    }
  },
  {
    "title": "SpringCloud与Docker微服务架构实战（第2版）",
    "bookUrl": "https://book.douban.com/subject/30278673/",
    "authorInfo": "周立 ",
    "pubInfo": " 电子工业出版社 / 2018-7 / 79.00元",
    "bookInfo": {
      "img": [
        "https://img3.doubanio.com/view/subject/l/public/s29823921.jpg",
        "https://img3.doubanio.com/view/subject/s/public/s29823921.jpg"
      ],
      "originalName": "",
      "averageRating": 0.0,
      "ratersCount": 0,
      "ratings": [],
      "bookIntro": "《Spring Cloud与Docker微服务架构实战（第2版）》基于Spring Cloud Edgware RELEASE 与Docker 17.09，以指导技术团队实现微服务架构落地为宗旨，覆盖微服务理论、微服务开发框架（Spring Cloud）及运行平台（Docker）三大主题。全书分为3部分，第1 部分对微服务架构进行系统介绍；第2 部分使用Spring Cloud 开发框架编写一个“电影售票系统”；第3 部分讲解如何将微服务应用运行在Docker 之上。全书采用精心设计的Demo 驱动，以连贯的场景、真实的代码示例来引导读者学习用强大的微服务技术实现架构设计。作为第2 版，《Spring Cloud与Docker微服务架构实战（第2版）》增补大量新版本框架独有的技术特性及其技巧、用例，以帮助读者避开升级中可能遇到的困难与陷阱。 《Spring Cloud与Docker微服务架构实战（第2版）》适合Java 工程师、架构师及运维人员及技术爱好者阅读。",
      "authorIntro": "周立，Spring Cloud中国社区联合发起人。拥有近7年的软件系统开发经验，多年系统架构经验。对Spring Cloud、微服务、持续集成、持续交付有一定见地。 热爱技术交流，曾代表公司参加全球微服务架构高峰论坛、QCon等技术沙龙。拥抱开源，在GitHub与Git@OSC上开源多个项目，并获得了开源中国的推荐，例如开源电子书 《使用Spring Cloud与Docker实战微服务》等。 笔者博客：http://itmuch.com，定期分享Spring Cloud相关博客。读者可扫码关注Spring Cloud 中国社区公众号以及作者公众号。",
      "bookToc": "1 微服务架构概述  1\n        1.1 单体应用架构存在的问题  . 1\n        1.2 如何解决单体应用架构存在的问题  3\n        1.3 什么是微服务  . 3\n        1.4 微服务架构的优点与挑战  . 4\n        1.4.1 微服务架构的优点  5\n        1.4.2 微服务架构面临的挑战  5\n        1.5 微服务设计原则  6\n        1.6 如何实现微服务架构  7\n        1.6.1 技术选型  7\n        1.6.2 架构图及常用组件  8\n        2 微服务开发框架——Spring Cloud  . 9\n        2.1 Spring Cloud 简介  . 9\n        2.2 Spring Cloud 特点  . 10\n        2.3 Spring Cloud 版本  . 10\n        2.3.1 版本简介  10\n        2.3.2 子项目一览  . 12\n        2.3.3 Spring Cloud/Spring Boot 版本兼容性  . 13\n        3 开始使用Spring Cloud 实战微服务  14\n        3.1 Spring Cloud 实战前提  14\n        3.1.1 技术储备  14\n        3.1.2 工具及软件版本  . 15\n        3.2 服务提供者与服务消费者  . 16\n        3.3 编写服务提供者  16\n        3.3.1 手动编写项目  . 17\n        3.3.2 使用Spring Initializr 快速创建Spring Boot 项目  . 21\n        3.4 编写服务消费者  23\n        3.5 为项目整合Spring Boot Actuator  . 25\n        3.6 硬编码有哪些问题  28\n        4 微服务注册与发现  30\n        4.1 服务发现简介  . 30\n        4.2 Eureka 简介  . 32\n        4.3 Eureka 原理  . 32\n        4.4 编写Eureka Server  34\n        4.5 将微服务注册到Eureka Server 上  36\n        4.6 Eureka Server 的高可用  38\n        4.6.1 编写高可用Eureka Server  38\n        4.6.2 将应用注册到Eureka Server 集群上  41\n        4.7 用户认证  . 41\n        4.7.1 为Eureka Server 添加用户认证  . 41\n        4.7.2 将微服务注册到需认证的Eureka Server  43\n        4.8 Eureka 的元数据  43\n        4.8.1 改造用户微服务  . 43\n        4.8.2 改造电影微服务  . 44\n        4.9 Eureka Server 的REST 端点  46\n        4.9.1 示例  47\n        4.9.2 注销微服务实例  . 52\n        4.10 Eureka 的自我保护模式  . 53\n        4.11 多网卡环境下的IP 选择  . 54\n        4.12 Eureka 的健康检查  56\n        4.13 排除Jersey 依赖  . 57\n        5 使用Ribbon 实现客户端侧负载均衡  . 59\n        5.1 Ribbon 简介  59\n        5.2 为服务消费者整合Ribbon  . 60\n        5.3 Ribbon 配置自定义  63\n        5.3.1 使用Java 代码自定义Ribbon 配置  63\n        5.3.2 使用属性自定义Ribbon 配置  67\n        5.4 脱离Eureka 使用Ribbon  68\n        5.5 饥饿加载  . 70\n        6 使用Feign 实现声明式REST 调用  . 72\n        6.1 Feign 简介  73\n        6.2 为服务消费者整合Feign  73\n        6.3 自定义Feign 配置  . 75\n        6.3.1 使用Java 代码自定义Feign 配置  . 75\n        6.3.2 使用属性自定义Feign 配置  79\n        6.4 手动创建Feign  80\n        6.4.1 修改用户微服务  . 80\n        6.4.2 修改电影微服务  . 84\n        6.5 Feign 对继承的支持  . 86\n        6.6 Feign 对压缩的支持  . 87\n        6.7 Feign 的日志  87\n        6.7.1 编码方式设置日志级别  88\n        6.7.2 使用属性配置日志级别  89\n        6.8 使用Feign 构造多参数请求  90\n        6.8.1 GET 请求多参数的URL  . 90\n        6.8.2 POST 请求包含多个参数  91\n        6.9 使用Feign 上传文件  92\n        7 使用Hystrix 实现微服务的容错处理  . 94\n        7.1 实现容错的手段  94\n        7.1.1 雪崩效应  95\n        7.1.2 如何容错  95\n        7.2 使用Hystrix 实现容错  . 97\n        7.2.1 Hystrix 简介  . 97\n        7.2.2 通用方式整合Hystrix  98\n        7.2.3 Hystrix 断路器的状态监控与深入理解  102\n        7.2.4 Hystrix 线程隔离策略与传播上下文  103\n        7.2.5 Feign 使用Hystrix  . 106\n        7.3 Hystrix 的监控  112\n        7.4 使用Hystrix Dashboard 可视化监控数据  . 113\n        7.5 使用Turbine 聚合监控数据  116\n        7.5.1 Turbine 简介  116\n        7.5.2 使用Turbine 监控多个微服务  117\n        7.5.3 使用消息中间件收集数据  119\n        8 使用Zuul 构建微服务网关  124\n        8.1 为什么要使用微服务网关  . 124\n        8.2 Zuul 简介  . 126\n        8.3 编写Zuul 微服务网关  . 126\n        8.4 管理端点  . 129\n        8.4.1 routes 端点  129\n        8.4.2 filters 端点  131\n        8.5 路由配置详解  . 132\n        8.6 Zuul 的安全与Header  . 136\n        8.6.1 敏感Header 的设置  . 136\n        8.6.2 忽略Header  . 136\n        8.7 使用Zuul 上传文件  . 137\n        8.8 Zuul 的过滤器  140\n        8.8.1 过滤器类型与请求生命周期  . 140\n        8.8.2 内置过滤器详解  . 141\n        8.8.3 编写Zuul 过滤器  144\n        8.8.4 禁用Zuul 过滤器  146\n        8.9 Zuul 的容错与回退  146\n        8.10 饥饿加载  . 149\n        8.11 Query String 编码  . 150\n        8.12 Hystrix 隔离策略与线程池  . 150\n        8.12.1 隔离策略  150\n        8.12.2 线程池配置  . 151\n        8.13 Zuul 的高可用  152\n        8.13.1 Zuul 客户端也注册到了Eureka Server 上  . 152\n        8.13.2 Zuul 客户端未注册到Eureka Server 上  152\n        8.14 使用Sidecar 整合非JVM 微服务  . 154\n        8.14.1 编写Node.js 微服务  . 154\n        8.14.2 编写Sidecar  . 155\n        8.14.3 Sidecar 的端点  . 157\n        8.14.4 Sidecar 与Node.js 微服务分离部署  . 158\n        8.14.5 Sidecar 原理分析  158\n        8.15 使用Zuul 聚合微服务  . 160\n        9 使用Spring Cloud Config 统一管理微服务配置  166\n        9.1 为什么要统一管理微服务配置  . 166\n        9.2 Spring Cloud Config 简介  167\n        9.3 编写Config Server  . 168\n        9.4 编写Config Client  . 171\n        9.5 Config Server 的Git 仓库配置详解  . 173\n        9.5.1 占位符支持  . 173\n        9.5.2 模式匹配  174\n        9.5.3 搜索目录  174\n        9.5.4 启动时加载配置文件  175\n        9.6 Config Server 的健康状况指示器  . 176\n        9.7 配置内容的加解密  177\n        9.7.1 安装JCE  177\n        9.7.2 Config Server 的加解密端点  177\n        9.7.3 对称加密  177\n        9.7.4 存储加密的内容  . 178\n        9.7.5 非对称加密  . 179\n        9.8 使用/refresh 端点手动刷新配置  180\n        9.9 使用Spring Cloud Bus 自动刷新配置  . 181\n        9.9.1 Spring Cloud Bus 简介  181\n        9.9.2 实现自动刷新  . 182\n        9.9.3 局部刷新  183\n        9.9.4 架构改进  184\n        9.9.5 跟踪总线事件  . 184\n        9.10 Spring Cloud Config 与Eureka 配合使用  186\n        9.11 Spring Cloud Config 的用户认证  . 187\n        9.12 Config Server 的高可用  188\n        9.12.1 Git 仓库的高可用  188\n        9.12.2 RabbitMQ 的高可用  . 189\n        9.12.3 Config Server 自身的高可用  189\n        10 使用Spring Cloud Sleuth 实现微服务跟踪  . 191\n        10.1 为什么要实现微服务跟踪  . 191\n        10.2 Spring Cloud Sleuth 简介  . 192\n        10.3 整合Spring Cloud Sleuth  . 194\n        10.4 Spring Cloud Sleuth 与ELK 配合使用  . 196\n        10.5 Spring Cloud Sleuth 与Zipkin 配合使用  . 200\n        10.5.1 Zipkin 简介  . 200\n        10.5.2 编写Zipkin Server  . 200\n        10.5.3 微服务整合Zipkin  . 202\n        10.5.4 Zipkin 与Eureka 配合使用  . 205\n        10.5.5 使用消息中间件收集数据  206\n        10.5.6 使用Elasticsearch 存储跟踪数据  209\n        10.5.7 依赖关系图  . 211\n        11 Spring Cloud 常见问题与总结  . 213\n        11.1 Eureka 常见问题  213\n        11.1.1 Eureka 注册服务慢  213\n        11.1.2 已停止的微服务节点注销慢或不注销  214\n        11.1.3 如何自定义微服务的Instance ID  . 215\n        11.1.4 Eureka 的UNKNOWN 问题总结与解决  217\n        11.2 整合Hystrix 后首次请求失败  218\n        11.2.1 原因分析  218\n        11.2.2 解决方案  218\n        11.3 Turbine 聚合的数据不完整  219\n        11.4 Spring Cloud 各组件超时  220\n        11.4.1 RestTemplate 的超时  . 221\n        11.4.2 Ribbon 的超时  . 221\n        11.4.3 Feign 的超时  221\n        11.4.4 Hystrix 的超时  222\n        11.4.5 Zuul 的超时  . 222\n        11.5 Spring Cloud 各组件重试  223\n        11.5.1 重试步骤  224\n        11.5.2 基于HTTP 响应码重试  224\n        11.5.3 关闭重试  224\n        11.5.4 注意点  224\n        11.6 Spring Cloud 各组件调优  225\n        11.6.1 Tomcat 参数  . 225\n        11.6.2 Hystrix 参数  . 225\n        11.6.3 Feign 参数  226\n        11.6.4 Zuul 参数  . 226\n        11.7 Spring Cloud 各组件配置属性  228\n        11.7.1 Spring Boot 的配置  228\n        11.7.2 Spring Cloud 的配置  . 228\n        11.7.3 原生配置  229\n        11.8 Spring Cloud 定位问题思路总结  . 229\n        12 Docker 入门  232\n        12.1 Docker 简介  232\n        12.2 版本与迭代计划  232\n        12.2.1 版本区别  233\n        12.2.2 迭代计划  233\n        12.3 Docker 的架构  234\n        12.4 安装Docker  236\n        12.4.1 CentOS 7 安装Docker  . 236\n        12.4.2 Ubuntu 安装Docker  . 239\n        12.4.3 Windows 安装Docker  244\n        12.4.4 Mac OS 安装Docker  . 245\n        12.5 配置镜像加速器  245\n        12.6 Docker 常用命令  246\n        12.6.1 Docker 镜像常用命令  246\n        12.6.2 Docker 容器常用命令  252\n        13 将微服务运行在Docker 上  260\n        13.1 使用Dockerfile 构建Docker 镜像  260\n        13.1.1 Dockerfile 常用指令  . 261\n        13.1.2 使用Dockerfile 构建镜像  266\n        13.2 使用Docker Registry 管理Docker 镜像  . 268\n        13.2.1 使用Docker Hub 管理镜像  . 268\n        13.2.2 使用私有仓库管理镜像  270\n        13.3 使用Maven 插件构建Docker 镜像  . 271\n        13.3.1 快速入门  272\n        13.3.2 插件读取Dockerfile 进行构建  273\n        13.3.3 将插件绑定在某个phase 执行  274\n        13.3.4 推送镜像  275\n        13.4 常见问题与总结  277\n        14 使用Docker Compose 编排微服务  . 278\n        14.1 Docker Compose 简介  . 278\n        14.2 安装Docker Compose  . 279\n        14.2.1 安装Compose  . 279\n        14.2.2 安装Compose 命令补全工具  . 279\n        14.3 Docker Compose 快速入门  . 280\n        14.3.1 基本步骤  280\n        14.3.2 入门示例  280\n        14.3.3 工程、服务、容器  281\n        14.4 docker-compose.yml 常用命令  . 281\n        14.5 docker-compose 常用命令  . 285\n        14.6 Docker Compose 网络设置  . 286\n        14.6.1 基本概念  286\n        14.6.2 更新容器  287\n        14.6.3 links  287\n        14.6.4 指定自定义网络  . 288\n        14.6.5 配置默认网络  . 289\n        14.6.6 使用已存在的网络  289\n        14.7 综合实战：使用Docker Comose 编排Spring Cloud 微服务  289\n        14.7.1 编排Spring Cloud 微服务  289\n        14.7.2 编排高可用的Eureka Server  293\n        14.7.3 编排高可用Spring Cloud 微服务集群及动态伸缩  . 295\n        14.8 常见问题与总结  297\n        后记  298\n        附录A：本书配套代码  . 299\n        附录B：Spring Cloud YES——快速开发脚手架  300\n        附录C：使用Docker 快速安装本书中的组件  301\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 1 条",
      "commentsList": [
        {
          "user": "20160323",
          "ratingScore": "还行",
          "ratingTime": "2019-12-28",
          "thumbsUpCount": "1",
          "content": "比较后悔，半天翻完，没什么技术含量。springcloud可以带你入个门，docker有点凑篇幅（介绍一堆安装，为什么要用docker一点没提）。这些知识点网上一大堆，书应该体现某一个技术的精华和思想，或者说是作者对这个技术的思考抉择。而不是写一堆傻瓜式的操作教程，这样的知识流传不下去的，不是浪费纸吗"
        }
      ]
    }
  },
  {
    "title": "经济学原理:宏观经济学分册",
    "bookUrl": "https://book.douban.com/subject/3719531/",
    "authorInfo": "[美] N.格里高利·曼昆 / 梁小民、梁砾 ",
    "pubInfo": " 北京大学出版社 / 2009-4 / 42.00元",
    "bookInfo": {
      "img": [
        "https://img1.doubanio.com/view/subject/l/public/s3802188.jpg",
        "https://img1.doubanio.com/view/subject/s/public/s3802188.jpg"
      ],
      "originalName": "",
      "averageRating": " 9.3 ",
      "ratersCount": "4854",
      "ratings": [
        "71.3%",
        "24.1%",
        "4.2%",
        "0.2%",
        "0.2%"
      ],
      "bookIntro": "《经济学原理(第5版):宏观经济学分册》是世界上最流行的经济学教材！其英文原版现已被哈佛大学、耶鲁大学、斯坦福大学等美国600余所大学用作经济学原理课程的教材迄今为止它已被翻译成20种语言在全世界销售100多万册！《经济学原理(第5版):宏观经济学分册》前四版的中译本自1999年出版以来也一直是国内选用最多、最受欢迎的经济学教材！在继续保持条理清晰、易于理解的写作风格基础上，曼昆教授在第5版中对全书36章都做了精心修订；同时也更新了大部分“新闻摘录”和部分“案例研究”；此外，为帮助教师进行课堂设计和课堂讲解，本版还极大地丰富了教辅资源。    点击链接进入英文版：   Principles of Economics      点击链接进入：   经济学原理:宏观经济学分册(第6版)    海报：",
      "authorIntro": "N.格里高利·曼昆，哈佛大学经济学教授，曾在普林斯顿大学和麻省理工学院院学习经济学；讲授过宏观经济学、微观经济学、统计学和经济学原理。曼昆教授还是美国国家经济研究局的合作研究人员，波士顿联邦储备银行和国会预算办公室的顾问；他还供职于ETS考试研发委员会下设的经济学高价水平考试委员会；从2003年到2005年，他担任总统经济顾问委员会主席。",
      "bookToc": "第8篇　宏观经济学的数据\n        第23章　一国收入的衡量\n        23.1　经济的收入与支出\n        23.2　国内生产总值的衡量\n        23.2.1　“GDP是市场价值……”\n        23.2.2　“所有的……”\n        23.2.3　“最终的……”\n        23.2.4　“物品与劳务……”\n        23.2.5　“生产的……”\n        23.2.6　“一个国家之内……”\n        23.2.7　“……在某一既定时期内……”\n        参考资料　其他收入衡量指标\n        23.3　GDP的组成部分\n        23.3.1　消费\n        23.3.2　投资\n        23.3.3　政府购买\n        23.3.4　净出口\n        案例研究美国GDP的组成部分\n        23.4　真实GDP与名义GDP\n        23.4.1　一个数字例子心\n        23.4.2　GDP平减指数\n        案例研究 近年来的真实GDP\n        新闻摘录　地下经济\n        23.5　GDP是衡量经济福利的好指标吗\n        案例研究GDP与生活质量的国际差异\n        案例研究谁在奥林匹克比赛中获胜\n        23.6　结论\n        内容提要\n        关键概念\n        复习题\n        问题与应用\n        第24章　生活费用的衡量\n        24.1　消费物价指数\n        24.1.1 如何计算消费物价指数\n        参考资料　CPl的篮子中有些什么\n        24.1.2　衡量生活费用过程中存在的问题\n        新闻摘录　核算质量变动\n        24.1.3　GDP平减指数与消费物价指数\n        24.2　根据通货膨胀的影响校正经济变量\n        24.2.1　不同时期的美元数字\n        案例研究　指数先生进入好莱坞\n        24.2.2　指数化\n        24.2.3　真实利率与名义利率\n        案例研究　美国经济中的利率\n        24.3　结论\n        内容提要\n        关键概念\n        复习题\n        问题与应用\n        第9篇　长期中的真实经济\n        第25章　生产与增长\n        25.1　世界各国的经济增长\n        参考资料　一张图片顶一千个统计数字\n        参考资料　你比最富的美国人还富吗\n        25.2　生产率：作用及决定因素\n        25.2.1 为什么生产率如此重要\n        25.2.2　生产率是如何决定的\n        参考资料　生产函数\n        新闻摘录　衡量资本\n        案例研究 自然资源是增长的吗\n        25.3　经济增长和公共政策\n        25.3.1　储蓄和投资\n        25.3.2　收益递减和追赶效应\n        25.3.3　来自国外的投资\n        25.3.4　教育\n        新闻摘录　提升人力资本\n        25.3.5　健康与营养以\n        25.3.6　产权和政治稳定以\n        25.3.7　自由贸易以\n        25.3.8　研究与开发\n        25.3.9　人口增长\n        新闻摘录　逃离马尔萨斯\n        25.4　结论：长期增长的重要性\n        内容提要\n        关键概念\n        复习题\n        问题与应用\n        第26章　储蓄、投资和金融体系\n        26.1　美国经济中的金融机构\n        26.1.1　金融市场\n        26.1.2　金融中介机构\n        参考资料　对股市观察者而言的关键数字\n        26.1.3　总结\n        26.2　国民收入账户中的储蓄与投资\n        26.2.1　一些重要的恒等式\n        26.2.2　储蓄与投资的含义\n        26.3　可贷资金市场\n        26.3.1 可贷资金的供给与需求\n        26.3.2　政策1：储蓄激励\n        26.3.3　政策2：投资激励\n        新闻摘录　赞美吝啬鬼\n        26.3.4　政策3：政府预算赤字与盈余\n        案例研究　美国政府债务史跖\n        26.4　结论\n        内容提要\n        关键概念\n        复习题\n        问题与应用如\n        第27章　基本金融工具\n        27.1　现值：衡量货币的时间价值\n        参考资料　复利计算的魔力与70规则\n        27.2　风险管理\n        27.2.1　风险厌恶\n        27.2.2　保险市场\n        参考资料 医疗保险的特点\n        27.2.3　企业特有风险的多元化\n        27.2.4　风险与收益的权衡取舍\n        27.3　资产评估\n        27.3.1　基本面分析\n        27.3.2　有效市场假说\n        案例研究 随机行走与指数基金\n        新闻摘录　神经金融学\n        27.3.3　市场非理性\n        27.4　结论\n        内容提要\n        关键概念\n        复习题\n        问题与应用\n        第28章　失业\n        28.1　失业的确认\n        28.1.1　如何衡量失业\n        案例研究　美国经济中男性与女性的劳动力参工率\n        新闻摘录　成年男性无工作者增加\n        28.1.2　失业率衡量了我们想要衡量的内容吗\n        28.1.3　失业者没有工作的时间有多长\n        28.1.4　为什么总有些人是失业者\n        参考资料　就业岗位数\n        28.2　寻找工作\n        28.2.1 为什么一些摩擦性失业是不可避免的\n        28.2.2　公共政策和寻找工作\n        28.2.3　失业保险\n        新闻摘录　美国的失业政策与他国的失业政策\n        28.3　最低工资法\n        参考资料　谁在领取最低工资\n        28.4　工会和集体谈判\n        28.4.1　工会的经济学\n        28.4.2　工会对经济是好还是坏\n        28.5　效率工资理论\n        28.5.1　工人健康\n        28.5.2　工人流动率\n        28.5.3　工人素质\n        28.5.4　工人努力程度\n        案例研究　亨利·福特及其极为慷慨的每天5美元工资\n        28.6　结论\n        内容提要\n        关键概念\n        复习题\n        问题与应用\n        第10篇　长期中的货币与物价\n        第29章　货币制度\n        第30章　货币增长与通货膨胀\n        第11篇　开放经济的宏观经济学\n        第31章　开放经济的宏观经济学：基本概念\n        第32章　开放经济的宏观经济理论\n        第12篇　短期经济波动\n        第33章　总需求与总供给\n        第34章　货币政策和财政政策对总需求的影响\n        第35章　通货膨胀与失业之间的短期权衡取舍\n        第13篇　最后的思考\n        第3章　宏观经济政策的五个争论问题\n        附录：即问即答的答案\n        术语表\n        索引\n     · · · · · ·     (收起)"
    },
    "comments": {
      "commentsCount": "全部共 949 条",
      "commentsList": [
        {
          "user": "milvaro",
          "ratingScore": "推荐",
          "ratingTime": "2010-05-20",
          "thumbsUpCount": "32",
          "content": "拜托豆瓣不要我读过一本经济学的书你就给我推荐几十本！！！！！姐姐不好这口！！"
        },
        {
          "user": "猪头妖怪",
          "ratingScore": "推荐",
          "ratingTime": "2012-05-12",
          "thumbsUpCount": "26",
          "content": "对我这个全无基础的人来讲，宏观经济学比微观经济学要稍稍难上那么一点，但同时也更有趣些，因为宏观经济学底下勾连着政治哲学，指向了最易受关注的那些公共议题。"
        },
        {
          "user": "venus_cheung",
          "ratingScore": "力荐",
          "ratingTime": "2015-08-20",
          "thumbsUpCount": "20",
          "content": "读完终于能看懂经济新闻了"
        },
        {
          "user": "云川",
          "ratingScore": "力荐",
          "ratingTime": "2014-10-07",
          "thumbsUpCount": "20",
          "content": "客观、中立、多元化是曼昆的特点，相较之下，马克思的理论的确有偏激与不完备的地方，他站在某种道德角度来评价经济问题，归根结底是有失偏颇的，人确实有极强的利己性，这是天性，问题在于如何把握一个限度，使人们在利己与利他的合理交换中相互受益。曼昆在微观与宏观中大量提及政府层面的策略研究，对一般人而言也只是看看罢了，而且研究模型以美国为主，对中国读者而言参考价值有限。"
        },
        {
          "user": "过儿",
          "ratingScore": 0.0,
          "ratingTime": "",
          "thumbsUpCount": "4",
          "content": "自以为打通任督二脉，从此世界一马平川。"
        },
        {
          "user": "天线得嘚b",
          "ratingScore": "还行",
          "ratingTime": "2014-06-13",
          "thumbsUpCount": "3",
          "content": "学到宏观就暴露出这种风格教材的缺陷，太缺乏定量的推导，很多结论都显得模棱两可"
        },
        {
          "user": "一切归零",
          "ratingScore": "力荐",
          "ratingTime": "2012-06-12",
          "thumbsUpCount": "2",
          "content": "神教科书。"
        },
        {
          "user": "蝉",
          "ratingScore": 0.0,
          "ratingTime": "",
          "thumbsUpCount": "1",
          "content": ": \t\nF0/6467-7"
        },
        {
          "user": "我欲为人",
          "ratingScore": "力荐",
          "ratingTime": "2015-10-10",
          "thumbsUpCount": "2",
          "content": "书是很经典的书，可惜宏观经济就像索罗斯的反身性理论一样，很多因素互为因果，在不同的场景下，很难理清~"
        },
        {
          "user": "鸟人勿忘勿原谅",
          "ratingScore": "力荐",
          "ratingTime": "2012-04-27",
          "thumbsUpCount": "1",
          "content": "经济学书的好坏，大半取决于其图表"
        }
      ]
    }
  }
]